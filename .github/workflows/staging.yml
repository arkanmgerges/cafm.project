name: Staging

on:
  push:
    branches:
      - staging

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout repository code
      uses: actions/checkout@v2

    - name: Notify Slack
      if: success()
      id: slack
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      uses: voxmedia/github-action-slack-notify-build@v1
      with:
        channel: infra-ci-cafm
        status: STARTED
        color: warning

    - name: Verify that we can build the Docker image
      run: |
        docker build \
          -t cafm-project:local \
          -f ${GITHUB_WORKSPACE}/.pkg/local/docker/Dockerfile \
          ${GITHUB_WORKSPACE}

    - name: Run tests inside the built image
      run: |
        docker run --rm cafm-project:local pytest /app/test

    - name: Deploy to staging
      uses: fifsky/ssh-action@master
      with:
        command: |
          ssh-add -D
          ssh-add ~/.ssh/id_rsa_project
          docker-compose -f ~/cafm.project/.pkg/local/docker/docker-compose.yaml -p cafm-project down --rmi all --remove-orphans
          git -C ~/cafm.project pull
          docker-compose -f ~/cafm.project/.pkg/local/docker/docker-compose.yaml -p cafm-project up --build -d
          ssh-add -D
        host: 104.248.129.157
        port: 22
        user: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        args: "-tt"

    - name: Notify Slack success
      if: success()
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      uses: voxmedia/github-action-slack-notify-build@v1
      with:
        message_id: ${{ steps.slack.outputs.message_id }}
        channel: infra-ci-cafm
        status: SUCCESS
        color: good

    - name: Notify Slack failure
      if: failure()
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      uses: voxmedia/github-action-slack-notify-build@v1
      with:
        message_id: ${{ steps.slack.outputs.message_id }}
        channel: infra-ci-cafm
        status: FAILED
        color: danger

    - name: Logout from Amazon ECR
      if: always()
      run: |
        docker logout ${{ steps.login-ecr.outputs.registry }}
