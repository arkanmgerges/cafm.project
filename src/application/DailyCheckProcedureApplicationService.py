"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from src.domain_model.project.daily_check.procedure.DailyCheckProcedure import (
    DailyCheckProcedure,
)
from src.domain_model.project.daily_check.procedure.DailyCheckProcedureRepository import (
    DailyCheckProcedureRepository,
)
from src.domain_model.project.daily_check.procedure.DailyCheckProcedureService import (
    DailyCheckProcedureService,
)
from src.domain_model.resource.exception.DomainModelException import DomainModelException
from src.domain_model.resource.exception.ProcessBulkDomainException import ProcessBulkDomainException
from src.domain_model.resource.exception.UpdateDailyCheckProcedureFailedException import (
    UpdateDailyCheckProcedureFailedException,
)
from src.domain_model.token.TokenService import TokenService
from src.domain_model.util.DomainModelAttributeValidator import DomainModelAttributeValidator
from src.resource.logging.decorator import debugLogger
from src.domain_model.project.equipment.EquipmentRepository import EquipmentRepository
from src.domain_model.project.equipment.category.group.EquipmentCategoryGroupRepository import (
    EquipmentCategoryGroupRepository,
)


class DailyCheckProcedureApplicationService:
    def __init__(
        self,
        repo: DailyCheckProcedureRepository,
        dailyCheckProcedureService: DailyCheckProcedureService,
        equipmentRepo: EquipmentRepository,
        equipmentCategoryGroupRepo: EquipmentCategoryGroupRepository,
    ):
        self._repo = repo
        self._dailyCheckProcedureService = dailyCheckProcedureService
        self._equipmentRepo = equipmentRepo
        self._equipmentCategoryGroupRepo = equipmentCategoryGroupRepo

    @debugLogger
    def newId(self):
        return DailyCheckProcedure.createFrom(skipValidation=True).id()

    @debugLogger
    def createDailyCheckProcedure(
        self,
        id: str = None,
        name: str = None,
        description: str = None,
        equipmentId: str = None,
        equipmentCategoryGroupId: str = None,
        objectOnly: bool = False,
        token: str = "",
    ):
        obj: DailyCheckProcedure = self.constructObject(
            id=id,
            name=name,
            description=description,
            equipmentId=equipmentId,
            equipmentCategoryGroupId=equipmentCategoryGroupId,
        )
        tokenData = TokenService.tokenDataFromToken(token=token)
        if equipmentId is None and equipmentCategoryGroupId is None:
            raise UpdateDailyCheckProcedureFailedException(
                message="One of equipmentId or equipmentCategoryGroupId must be completed."
            )

        if equipmentId:
            self._equipmentRepo.equipmentById(id=equipmentId)

        if equipmentCategoryGroupId:
            self._equipmentCategoryGroupRepo.equipmentCategoryGroupById(
                id=equipmentCategoryGroupId
            )

        return self._dailyCheckProcedureService.createDailyCheckProcedure(
            obj=obj, objectOnly=objectOnly, tokenData=tokenData
        )

    @debugLogger
    def updateDailyCheckProcedure(
        self,
        id: str,
        name: str = None,
        description: str = None,
        equipmentId: str = None,
        equipmentCategoryGroupId: str = None,
        token: str = None,
    ):
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: DailyCheckProcedure = self._repo.dailyCheckProcedureById(id=id)
            obj: DailyCheckProcedure = self.constructObject(
                id=id,
                name=name,
                description=description,
                equipmentId=equipmentId,
                equipmentCategoryGroupId=equipmentCategoryGroupId,
                _sourceObject=oldObject,
            )
            self._dailyCheckProcedureService.updateDailyCheckProcedure(
                oldObject=oldObject, newObject=obj, tokenData=tokenData
            )
        except Exception as e:
            raise UpdateDailyCheckProcedureFailedException(message=str(e))

    @debugLogger
    def deleteDailyCheckProcedure(self, id: str, token: str = None):
        tokenData = TokenService.tokenDataFromToken(token=token)
        obj = self._repo.dailyCheckProcedureById(id=id)
        self._dailyCheckProcedureService.deleteDailyCheckProcedure(
            obj=obj, tokenData=tokenData
        )

    @debugLogger
    def bulkCreate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(domainModelObject=self.constructObject(skipValidation=True),
                                                       attributeDictionary=objListParamsItem)
                objList.append(self.constructObject(id=objListParamsItem["daily_check_procedure_id"],
                                                    name=objListParamsItem["name"],
                                                    description=objListParamsItem["description"],
                                                    equipmentId=objListParamsItem[
                                                        "equipment_id"] if 'equipment_id' in objListParamsItem else None,
                                                    equipmentCategoryGroupId=objListParamsItem[
                                                        "equipment_category_group_id"] if 'equipment_category_group_id' in objListParamsItem else None
                                                    ))
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._dailyCheckProcedureService.bulkCreate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkDelete(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(domainModelObject=self.constructObject(skipValidation=True),
                                                       attributeDictionary=objListParamsItem)
                objList.append(
                    self.constructObject(id=objListParamsItem["daily_check_procedure_id"], skipValidation=True))
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._dailyCheckProcedureService.bulkDelete(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkUpdate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(domainModelObject=self.constructObject(skipValidation=True),
                                                       attributeDictionary=objListParamsItem)
                oldObject: DailyCheckProcedure = self._repo.dailyCheckProcedureById(
                    id=objListParamsItem["daily_check_procedure_id"])
                newObject = self.constructObject(id=objListParamsItem["daily_check_procedure_id"],
                                                 name=objListParamsItem[
                                                     "name"] if "name" in objListParamsItem else None,
                                                 description=objListParamsItem[
                                                     "description"] if "description" in objListParamsItem else None,
                                                 equipmentId=objListParamsItem[
                                                     "equipment_id"] if "equipment_id" in objListParamsItem else None,
                                                 equipmentCategoryGroupId=objListParamsItem[
                                                     "equipment_category_group_id"] if "equipment_category_group_id" in objListParamsItem else None,
                                                 _sourceObject=oldObject)
                objList.append((newObject, oldObject), )
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._dailyCheckProcedureService.bulkUpdate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def dailyCheckProcedureById(
        self, id: str, token: str = None
    ) -> DailyCheckProcedure:
        dailyCheckProcedure = self._repo.dailyCheckProcedureById(id=id)
        TokenService.tokenDataFromToken(token=token)
        return dailyCheckProcedure

    @debugLogger
    def dailyCheckProcedures(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._dailyCheckProcedureService.dailyCheckProcedures(
            tokenData=tokenData,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def dailyCheckProceduresByEquipmentOrGroupId(
        self,
        equipmentOrGroupId: str = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return (
            self._dailyCheckProcedureService.dailyCheckProceduresByEquipmentOrGroupId(
                tokenData=tokenData,
                equipmentOrGroupId=equipmentOrGroupId,
                resultFrom=resultFrom,
                resultSize=resultSize,
                order=order,
            )
        )

    @debugLogger
    def constructObject(
        self,
        id: str = None,
        name: str = None,
        description: str = None,
        equipmentId: str = None,
        equipmentCategoryGroupId: str = None,
        _sourceObject: DailyCheckProcedure = None,
    ) -> DailyCheckProcedure:
        if _sourceObject is not None:
            return DailyCheckProcedure.createFrom(
                id=id,
                name=name if name is not None else _sourceObject.name(),
                description=description
                if description is not None
                else _sourceObject.description(),
                equipmentId=equipmentId
                if equipmentId is not None
                else _sourceObject.equipmentId(),
                equipmentCategoryGroupId=equipmentCategoryGroupId
                if equipmentCategoryGroupId is not None
                else _sourceObject.equipmentCategoryGroupId(),
            )
        else:
            return DailyCheckProcedure.createFrom(
                id=id,
                name=name,
                description=description,
                equipmentId=equipmentId,
                equipmentCategoryGroupId=equipmentCategoryGroupId,
            )
