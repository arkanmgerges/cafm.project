"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from src.application.BaseApplicationService import BaseApplicationService
from src.application.model.BaseApplicationServiceBulkData import BaseApplicationServiceBulkData
from src.application.model.BaseApplicationServiceModelData import BaseApplicationServiceModelData
from src.domain_model.project.daily_check.procedure.DailyCheckProcedure import (
    DailyCheckProcedure,
)
from src.domain_model.project.daily_check.procedure.DailyCheckProcedureRepository import (
    DailyCheckProcedureRepository,
)
from src.domain_model.project.daily_check.procedure.DailyCheckProcedureService import (
    DailyCheckProcedureService,
)
from src.domain_model.project.equipment.EquipmentRepository import EquipmentRepository
from src.domain_model.project.equipment.category.group.EquipmentCategoryGroupRepository import (
    EquipmentCategoryGroupRepository,
)
from src.domain_model.resource.exception.UpdateDailyCheckProcedureFailedException import (
    UpdateDailyCheckProcedureFailedException,
)
from src.domain_model.token.TokenService import TokenService
from src.resource.logging.decorator import debugLogger


class DailyCheckProcedureApplicationService(BaseApplicationService):
    def __init__(
        self,
        repo: DailyCheckProcedureRepository,
        dailyCheckProcedureService: DailyCheckProcedureService,
        equipmentRepo: EquipmentRepository,
        equipmentCategoryGroupRepo: EquipmentCategoryGroupRepository,
    ):
        self._repo = repo
        self._dailyCheckProcedureService = dailyCheckProcedureService
        self._equipmentRepo = equipmentRepo
        self._equipmentCategoryGroupRepo = equipmentCategoryGroupRepo

    @debugLogger
    def newId(self):
        return DailyCheckProcedure.createFrom(skipValidation=True).id()

    @debugLogger
    def createDailyCheckProcedure(
        self,
        token: str = None,
        objectOnly: bool = False,
        **kwargs,
    ):

        obj: DailyCheckProcedure = self._constructObject(**kwargs)
        _tokenData = TokenService.tokenDataFromToken(token=token)
        if kwargs["equipmentId"] is None or kwargs["equipmentCategoryGroupId"] is None:
            raise UpdateDailyCheckProcedureFailedException(
                message="One of equipmentId or equipmentCategoryGroupId must be completed."
            )

        self._equipmentRepo.equipmentById(id=kwargs["equipmentId"])
        self._equipmentCategoryGroupRepo.equipmentCategoryGroupById(id=kwargs["equipmentCategoryGroupId"])

        return self._dailyCheckProcedureService.createDailyCheckProcedure(obj=obj, objectOnly=objectOnly)

    @debugLogger
    def updateDailyCheckProcedure(
        self,
        token: str = None,
        **kwargs,
    ):
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: DailyCheckProcedure = self._repo.dailyCheckProcedureById(id=kwargs["id"])
            super().callFunction(
                modelData=BaseApplicationServiceModelData(
                    function=self._dailyCheckProcedureService.updateDailyCheckProcedure,
                    kwargs={
                        "oldObject": oldObject,
                        "newObject": self._constructObject(_sourceObject=oldObject, **kwargs),
                        "tokenData": tokenData,
                    },
                )
            )

        except Exception as e:
            raise UpdateDailyCheckProcedureFailedException(message=str(e))

    @debugLogger
    def deleteDailyCheckProcedure(self, id: str, token: str = None, **_kwargs):
        super().callFunction(
            modelData=BaseApplicationServiceModelData(
                function=self._dailyCheckProcedureService.deleteDailyCheckProcedure,
                kwargs={"obj": self._repo.dailyCheckProcedureById(id=id), "tokenData": TokenService.tokenDataFromToken(token=token)},
            )
        )

    @debugLogger
    def bulkCreate(self, objListParams: List[dict], token: str = ""):
        super()._bulkCreate(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="daily_check_procedure_id",
                domainService=self._dailyCheckProcedureService,
            )
        )

    @debugLogger
    def bulkDelete(self, objListParams: List[dict], token: str = ""):
        super()._bulkDelete(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="daily_check_procedure_id",
                domainService=self._dailyCheckProcedureService,
            )
        )

    @debugLogger
    def bulkUpdate(self, objListParams: List[dict], token: str = ""):
        super()._bulkUpdate(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="daily_check_procedure_id",
                domainService=self._dailyCheckProcedureService,
                repositoryCallbackFunction=self._repo.dailyCheckProcedureById,
            )
        )

    @debugLogger
    def dailyCheckProcedureById(self, id: str, token: str = None, **_kwargs) -> DailyCheckProcedure:
        TokenService.tokenDataFromToken(token=token)
        return super().callGetterFunction(
            modelData=BaseApplicationServiceModelData(
                getterFunction=self._repo.dailyCheckProcedureById, kwargs={"id": id}
            )
        )

    @debugLogger
    def dailyCheckProcedures(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
        **_kwargs,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return super().callGetterFunction(
            modelData=BaseApplicationServiceModelData(
                getterFunction=self._dailyCheckProcedureService.dailyCheckProcedures,
                kwargs={"resultFrom": resultFrom, "resultSize": resultSize, "order": order, "tokenData": tokenData},
            )
        )

    @debugLogger
    def dailyCheckProceduresByEquipmentOrGroupId(
        self,
        equipmentOrGroupId: str = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
        **_kwargs,
    ) -> dict:
        _tokenData = TokenService.tokenDataFromToken(token=token)
        return super().callGetterFunction(
            modelData=BaseApplicationServiceModelData(
                getterFunction=self._dailyCheckProcedureService.dailyCheckProceduresByEquipmentOrGroupId,
                kwargs={
                    "resultFrom": resultFrom,
                    "resultSize": resultSize,
                    "order": order,
                    "equipmentOrGroupId": equipmentOrGroupId,
                },
            )
        )

    @debugLogger
    def _constructObject(self, *args, **kwargs) -> DailyCheckProcedure:
        kwargs[BaseApplicationService.DOMAIN_MODEL_CLASS] = DailyCheckProcedure
        return super()._constructObject(*args, **kwargs)
