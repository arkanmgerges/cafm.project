"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from src.application.BaseApplicationService import BaseApplicationService
from src.domain_model.project.daily_check.procedure.DailyCheckProcedure import (
    DailyCheckProcedure,
)
from src.domain_model.project.daily_check.procedure.DailyCheckProcedureRepository import (
    DailyCheckProcedureRepository,
)
from src.domain_model.project.daily_check.procedure.DailyCheckProcedureService import (
    DailyCheckProcedureService,
)
from src.domain_model.project.equipment.EquipmentRepository import EquipmentRepository
from src.domain_model.project.equipment.category.group.EquipmentCategoryGroupRepository import (
    EquipmentCategoryGroupRepository,
)
from src.domain_model.resource.exception.DomainModelException import DomainModelException
from src.domain_model.resource.exception.ProcessBulkDomainException import ProcessBulkDomainException
from src.domain_model.resource.exception.UpdateDailyCheckProcedureFailedException import (
    UpdateDailyCheckProcedureFailedException,
)
from src.domain_model.token.TokenService import TokenService
from src.domain_model.util.DomainModelAttributeValidator import DomainModelAttributeValidator
from src.resource.logging.decorator import debugLogger


class DailyCheckProcedureApplicationService(BaseApplicationService):
    def __init__(
        self,
        repo: DailyCheckProcedureRepository,
        dailyCheckProcedureService: DailyCheckProcedureService,
        equipmentRepo: EquipmentRepository,
        equipmentCategoryGroupRepo: EquipmentCategoryGroupRepository,
    ):
        self._repo = repo
        self._dailyCheckProcedureService = dailyCheckProcedureService
        self._equipmentRepo = equipmentRepo
        self._equipmentCategoryGroupRepo = equipmentCategoryGroupRepo

    @debugLogger
    def newId(self):
        return DailyCheckProcedure.createFrom(skipValidation=True).id()

    @debugLogger
    def createDailyCheckProcedure(
        self,
        id: str = None,
        name: str = None,
        description: str = None,
        equipmentId: str = None,
        equipmentCategoryGroupId: str = None,
        objectOnly: bool = False,
        token: str = "",
    ):
        obj: DailyCheckProcedure = self._constructObject(
            id=id,
            name=name,
            description=description,
            equipmentId=equipmentId,
            equipmentCategoryGroupId=equipmentCategoryGroupId,
        )
        _tokenData = TokenService.tokenDataFromToken(token=token)
        if equipmentId is None and equipmentCategoryGroupId is None:
            raise UpdateDailyCheckProcedureFailedException(
                message="One of equipmentId or equipmentCategoryGroupId must be completed."
            )

        if equipmentId:
            self._equipmentRepo.equipmentById(id=equipmentId)

        if equipmentCategoryGroupId:
            self._equipmentCategoryGroupRepo.equipmentCategoryGroupById(id=equipmentCategoryGroupId)

        return self._dailyCheckProcedureService.createDailyCheckProcedure(
            obj=obj, objectOnly=objectOnly
        )

    @debugLogger
    def updateDailyCheckProcedure(
        self,
        id: str,
        name: str = None,
        description: str = None,
        equipmentId: str = None,
        equipmentCategoryGroupId: str = None,
        token: str = None,
    ):
        _tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: DailyCheckProcedure = self._repo.dailyCheckProcedureById(id=id)
            obj: DailyCheckProcedure = self._constructObject(
                id=id,
                name=name,
                description=description,
                equipmentId=equipmentId,
                equipmentCategoryGroupId=equipmentCategoryGroupId,
                _sourceObject=oldObject,
            )
            self._dailyCheckProcedureService.updateDailyCheckProcedure(
                oldObject=oldObject, newObject=obj
            )
        except Exception as e:
            raise UpdateDailyCheckProcedureFailedException(message=str(e))

    @debugLogger
    def deleteDailyCheckProcedure(self, id: str, token: str = None):
        _tokenData = TokenService.tokenDataFromToken(token=token)
        obj = self._repo.dailyCheckProcedureById(id=id)
        self._dailyCheckProcedureService.deleteDailyCheckProcedure(obj=obj)

    @debugLogger
    def bulkCreate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(
                    domainModelObject=self._constructObject(skipValidation=True), attributeDictionary=objListParamsItem
                )
                objList.append(
                    self._constructObject(
                        id=objListParamsItem["daily_check_procedure_id"],
                        name=objListParamsItem["name"],
                        description=objListParamsItem["description"],
                        equipmentId=objListParamsItem["equipment_id"] if "equipment_id" in objListParamsItem else None,
                        equipmentCategoryGroupId=objListParamsItem["equipment_category_group_id"]
                        if "equipment_category_group_id" in objListParamsItem
                        else None,
                    )
                )
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        _tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._dailyCheckProcedureService.bulkCreate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkDelete(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(
                    domainModelObject=self._constructObject(skipValidation=True), attributeDictionary=objListParamsItem
                )
                objList.append(
                    self._constructObject(id=objListParamsItem["daily_check_procedure_id"], skipValidation=True)
                )
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        _tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._dailyCheckProcedureService.bulkDelete(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkUpdate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(
                    domainModelObject=self._constructObject(skipValidation=True), attributeDictionary=objListParamsItem
                )
                oldObject: DailyCheckProcedure = self._repo.dailyCheckProcedureById(
                    id=objListParamsItem["daily_check_procedure_id"]
                )
                newObject = self._constructObject(
                    id=objListParamsItem["daily_check_procedure_id"],
                    name=objListParamsItem["name"] if "name" in objListParamsItem else None,
                    description=objListParamsItem["description"] if "description" in objListParamsItem else None,
                    equipmentId=objListParamsItem["equipment_id"] if "equipment_id" in objListParamsItem else None,
                    equipmentCategoryGroupId=objListParamsItem["equipment_category_group_id"]
                    if "equipment_category_group_id" in objListParamsItem
                    else None,
                    _sourceObject=oldObject,
                )
                objList.append(
                    (newObject, oldObject),
                )
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        _tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._dailyCheckProcedureService.bulkUpdate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def dailyCheckProcedureById(self, id: str, token: str = None) -> DailyCheckProcedure:
        dailyCheckProcedure = self._repo.dailyCheckProcedureById(id=id)
        TokenService.tokenDataFromToken(token=token)
        return dailyCheckProcedure

    @debugLogger
    def dailyCheckProcedures(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
    ) -> dict:
        _tokenData = TokenService.tokenDataFromToken(token=token)
        return self._dailyCheckProcedureService.dailyCheckProcedures(
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def dailyCheckProceduresByEquipmentOrGroupId(
        self,
        equipmentOrGroupId: str = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
    ) -> dict:
        _tokenData = TokenService.tokenDataFromToken(token=token)
        return self._dailyCheckProcedureService.dailyCheckProceduresByEquipmentOrGroupId(
            equipmentOrGroupId=equipmentOrGroupId,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def _constructObject(self, *args, **kwargs) -> DailyCheckProcedure:
        kwargs[BaseApplicationService.APPLICATION_SERVICE_CLASS] = DailyCheckProcedure
        return super()._constructObject(*args, **kwargs)
