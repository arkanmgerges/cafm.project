"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from src.application.BaseApplicationService import BaseApplicationService
from src.domain_model.project.daily_check.procedure.operation.DailyCheckProcedureOperationRepository import (
    DailyCheckProcedureOperationRepository,
)
from src.domain_model.project.daily_check.procedure.operation.parameter.DailyCheckProcedureOperationParameter import (
    DailyCheckProcedureOperationParameter,
)
from src.domain_model.project.daily_check.procedure.operation.parameter.DailyCheckProcedureOperationParameterRepository import (
    DailyCheckProcedureOperationParameterRepository,
)
from src.domain_model.project.daily_check.procedure.operation.parameter.DailyCheckProcedureOperationParameterService import (
    DailyCheckProcedureOperationParameterService,
)
from src.domain_model.project.unit.UnitRepository import UnitRepository
from src.domain_model.resource.exception.DomainModelException import DomainModelException
from src.domain_model.resource.exception.ProcessBulkDomainException import ProcessBulkDomainException
from src.domain_model.resource.exception.UpdateDailyCheckProcedureOperationParameterFailedException import (
    UpdateDailyCheckProcedureOperationParameterFailedException,
)
from src.domain_model.token.TokenService import TokenService
from src.domain_model.util.DomainModelAttributeValidator import DomainModelAttributeValidator
from src.resource.common.Util import Util
from src.resource.logging.decorator import debugLogger


class DailyCheckProcedureOperationParameterApplicationService(BaseApplicationService):
    def __init__(
        self,
        repo: DailyCheckProcedureOperationParameterRepository,
        dailyCheckProcedureOperationParameterService: DailyCheckProcedureOperationParameterService,
        unitRepo: UnitRepository,
        dailyCheckProcedureOperationRepo: DailyCheckProcedureOperationRepository,
    ):
        self._repo = repo
        self._dailyCheckProcedureOperationParameterService = dailyCheckProcedureOperationParameterService
        self._unitRepo = unitRepo
        self._dailyCheckProcedureOperationRepo = dailyCheckProcedureOperationRepo

    @debugLogger
    def newId(self):
        return DailyCheckProcedureOperationParameter.createFrom(skipValidation=True).id()

    @debugLogger
    def createDailyCheckProcedureOperationParameter(
        self,
        token: str = None,
        objectOnly: bool = False,
        **kwargs,
    ):
        obj: DailyCheckProcedureOperationParameter = self._constructObject(**kwargs)
        tokenData = TokenService.tokenDataFromToken(token=token)
        self._unitRepo.unitById(id=kwargs["unitId"])
        self._dailyCheckProcedureOperationRepo.dailyCheckProcedureOperationById(
            id=kwargs["dailyCheckProcedureOperationId"]
        )
        return self._dailyCheckProcedureOperationParameterService.createDailyCheckProcedureOperationParameter(
            obj=obj, objectOnly=objectOnly, tokenData=tokenData
        )

    @debugLogger
    def updateDailyCheckProcedureOperationParameter(self, token: str = None, **kwargs):
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: DailyCheckProcedureOperationParameter = self._repo.dailyCheckProcedureOperationParameterById(
                id=kwargs["id"]
            )
            obj: DailyCheckProcedureOperationParameter = self._constructObject(_sourceObject=oldObject, **kwargs)
            self._dailyCheckProcedureOperationParameterService.updateDailyCheckProcedureOperationParameter(
                oldObject=oldObject, newObject=obj, tokenData=tokenData
            )
        except Exception as e:
            raise UpdateDailyCheckProcedureOperationParameterFailedException(message=str(e))

    @debugLogger
    def deleteDailyCheckProcedureOperationParameter(self, id: str, token: str = None):
        tokenData = TokenService.tokenDataFromToken(token=token)
        obj = self._repo.dailyCheckProcedureOperationParameterById(id=id)
        self._dailyCheckProcedureOperationParameterService.deleteDailyCheckProcedureOperationParameter(
            obj=obj, tokenData=tokenData
        )

    @debugLogger
    def dailyCheckProcedureOperationParameterById(
        self, id: str, token: str = None
    ) -> DailyCheckProcedureOperationParameter:
        dailyCheckProcedureOperationParameter = self._repo.dailyCheckProcedureOperationParameterById(id=id)
        TokenService.tokenDataFromToken(token=token)
        return dailyCheckProcedureOperationParameter

    @debugLogger
    def bulkCreate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(
                    domainModelObject=self._constructObject(skipValidation=True), attributeDictionary=objListParamsItem
                )
                objList.append(
                    self._constructObject(
                        **Util.snakeCaseToLowerCameCaseDict(
                            objListParamsItem,
                            keyReplacements=[
                                {"source": "daily_check_procedure_operation_parameter_id", "target": "id"}
                            ],
                        )
                    )
                )
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        _tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._dailyCheckProcedureOperationParameterService.bulkCreate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkDelete(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(
                    domainModelObject=self._constructObject(skipValidation=True), attributeDictionary=objListParamsItem
                )
                objList.append(
                    self._constructObject(
                        id=objListParamsItem["daily_check_procedure_operation_parameter_id"], skipValidation=True
                    )
                )
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        _tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._dailyCheckProcedureOperationParameterService.bulkDelete(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkUpdate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(
                    domainModelObject=self._constructObject(skipValidation=True), attributeDictionary=objListParamsItem
                )
                oldObject: DailyCheckProcedureOperationParameter = self._repo.dailyCheckProcedureOperationParameterById(
                    id=objListParamsItem["daily_check_procedure_operation_parameter_id"]
                )
                newObject = self._constructObject(
                    **Util.snakeCaseToLowerCameCaseDict(
                        objListParamsItem,
                        keyReplacements=[{"source": "daily_check_procedure_operation_parameter_id", "target": "id"}],
                    ),
                    _sourceObject=oldObject,
                )
                objList.append(
                    (newObject, oldObject),
                )
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        _tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._dailyCheckProcedureOperationParameterService.bulkUpdate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def dailyCheckProcedureOperationParameters(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._dailyCheckProcedureOperationParameterService.dailyCheckProcedureOperationParameters(
            tokenData=tokenData,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def dailyCheckProcedureOperationParametersByDailyCheckProcedureOperationId(
        self,
        dailyCheckProcedureOperationId: str = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._dailyCheckProcedureOperationParameterService.dailyCheckProcedureOperationParametersByDailyCheckProcedureOperationId(
            tokenData=tokenData,
            dailyCheckProcedureOperationId=dailyCheckProcedureOperationId,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def _constructObject(self, *args, **kwargs) -> DailyCheckProcedureOperationParameter:
        kwargs[BaseApplicationService.APPLICATION_SERVICE_CLASS] = DailyCheckProcedureOperationParameter
        return super()._constructObject(*args, **kwargs)
