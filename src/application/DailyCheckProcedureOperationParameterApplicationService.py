"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from src.domain_model.project.daily_check.procedure.operation.parameter.DailyCheckProcedureOperationParameter import (
    DailyCheckProcedureOperationParameter,
)
from src.domain_model.project.daily_check.procedure.operation.parameter.DailyCheckProcedureOperationParameterRepository import (
    DailyCheckProcedureOperationParameterRepository,
)
from src.domain_model.project.daily_check.procedure.operation.parameter.DailyCheckProcedureOperationParameterService import (
    DailyCheckProcedureOperationParameterService,
)
from src.domain_model.resource.exception.DomainModelException import DomainModelException
from src.domain_model.resource.exception.ProcessBulkDomainException import ProcessBulkDomainException
from src.domain_model.resource.exception.UpdateDailyCheckProcedureOperationParameterFailedException import (
    UpdateDailyCheckProcedureOperationParameterFailedException,
)
from src.domain_model.token.TokenService import TokenService
from src.domain_model.util.DomainModelAttributeValidator import DomainModelAttributeValidator
from src.resource.logging.decorator import debugLogger
from src.domain_model.project.unit.UnitRepository import UnitRepository
from src.domain_model.project.daily_check.procedure.operation.DailyCheckProcedureOperationRepository import (
    DailyCheckProcedureOperationRepository,
)


class DailyCheckProcedureOperationParameterApplicationService:
    def __init__(
        self,
        repo: DailyCheckProcedureOperationParameterRepository,
        dailyCheckProcedureOperationParameterService: DailyCheckProcedureOperationParameterService,
        unitRepo: UnitRepository,
        dailyCheckProcedureOperationRepo: DailyCheckProcedureOperationRepository,
    ):
        self._repo = repo
        self._dailyCheckProcedureOperationParameterService = (
            dailyCheckProcedureOperationParameterService
        )
        self._unitRepo = unitRepo
        self._dailyCheckProcedureOperationRepo = dailyCheckProcedureOperationRepo

    @debugLogger
    def newId(self):
        return DailyCheckProcedureOperationParameter.createFrom(
            skipValidation=True
        ).id()

    @debugLogger
    def createDailyCheckProcedureOperationParameter(
        self,
        id: str = None,
        name: str = None,
        unitId: str = None,
        dailyCheckProcedureOperationId: str = None,
        minValue: float = None,
        maxValue: float = None,
        objectOnly: bool = False,
        token: str = "",
    ):
        obj: DailyCheckProcedureOperationParameter = self.constructObject(
            id=id,
            name=name,
            unitId=unitId,
            dailyCheckProcedureOperationId=dailyCheckProcedureOperationId,
            minValue=minValue,
            maxValue=maxValue,
        )
        tokenData = TokenService.tokenDataFromToken(token=token)
        self._unitRepo.unitById(id=unitId)
        self._dailyCheckProcedureOperationRepo.dailyCheckProcedureOperationById(
            id=dailyCheckProcedureOperationId
        )
        return self._dailyCheckProcedureOperationParameterService.createDailyCheckProcedureOperationParameter(
            obj=obj, objectOnly=objectOnly, tokenData=tokenData
        )

    @debugLogger
    def updateDailyCheckProcedureOperationParameter(
        self,
        id: str,
        name: str = None,
        unitId: str = None,
        dailyCheckProcedureOperationId: str = None,
        minValue: float = None,
        maxValue: float = None,
        token: str = None,
    ):
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: DailyCheckProcedureOperationParameter = (
                self._repo.dailyCheckProcedureOperationParameterById(id=id)
            )
            obj: DailyCheckProcedureOperationParameter = self.constructObject(
                id=id,
                name=name,
                unitId=unitId,
                dailyCheckProcedureOperationId=dailyCheckProcedureOperationId,
                minValue=minValue,
                maxValue=maxValue,
                _sourceObject=oldObject,
            )
            self._dailyCheckProcedureOperationParameterService.updateDailyCheckProcedureOperationParameter(
                oldObject=oldObject, newObject=obj, tokenData=tokenData
            )
        except Exception as e:
            raise UpdateDailyCheckProcedureOperationParameterFailedException(
                message=str(e)
            )

    @debugLogger
    def deleteDailyCheckProcedureOperationParameter(self, id: str, token: str = None):
        tokenData = TokenService.tokenDataFromToken(token=token)
        obj = self._repo.dailyCheckProcedureOperationParameterById(id=id)
        self._dailyCheckProcedureOperationParameterService.deleteDailyCheckProcedureOperationParameter(
            obj=obj, tokenData=tokenData
        )

    @debugLogger
    def dailyCheckProcedureOperationParameterById(
        self, id: str, token: str = None
    ) -> DailyCheckProcedureOperationParameter:
        dailyCheckProcedureOperationParameter = (
            self._repo.dailyCheckProcedureOperationParameterById(id=id)
        )
        TokenService.tokenDataFromToken(token=token)
        return dailyCheckProcedureOperationParameter

    @debugLogger
    def bulkCreate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(domainModelObject=self.constructObject(skipValidation=True),
                                                       attributeDictionary=objListParamsItem)
                objList.append(
                    self.constructObject(id=objListParamsItem["daily_check_procedure_operation_parameter_id"],
                                         name=objListParamsItem["name"],
                                         unitId=objListParamsItem["unit_id"],
                                         dailyCheckProcedureOperationId=objListParamsItem[
                                             "daily_check_procedure_operation_id"],
                                         minValue=objListParamsItem["min_value"],
                                         maxValue=objListParamsItem["max_value"]))
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._dailyCheckProcedureOperationParameterService.bulkCreate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkDelete(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(domainModelObject=self.constructObject(skipValidation=True),
                                                       attributeDictionary=objListParamsItem)
                objList.append(
                    self.constructObject(id=objListParamsItem["daily_check_procedure_operation_parameter_id"],
                                         skipValidation=True))
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._dailyCheckProcedureOperationParameterService.bulkDelete(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkUpdate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(domainModelObject=self.constructObject(skipValidation=True),
                                                       attributeDictionary=objListParamsItem)
                oldObject: DailyCheckProcedureOperationParameter = self._repo.dailyCheckProcedureOperationParameterById(
                    id=objListParamsItem["daily_check_procedure_operation_parameter_id"])
                newObject = self.constructObject(
                    id=objListParamsItem["daily_check_procedure_operation_parameter_id"],
                    name=objListParamsItem["name"] if "name" in objListParamsItem else None,
                    unitId=objListParamsItem["unit_id"] if "unit_id" in objListParamsItem else None,
                    dailyCheckProcedureOperationId=objListParamsItem[
                        "daily_check_procedure_operation_id"] if "daily_check_procedure_operation_id" in objListParamsItem else None,
                    minValue=objListParamsItem["min_value"] if "min_value" in objListParamsItem else None,
                    maxValue=objListParamsItem["max_value"] if "max_value" in objListParamsItem else None,
                    _sourceObject=oldObject)
                objList.append((newObject, oldObject), )
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._dailyCheckProcedureOperationParameterService.bulkUpdate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def dailyCheckProcedureOperationParameters(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._dailyCheckProcedureOperationParameterService.dailyCheckProcedureOperationParameters(
            tokenData=tokenData,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def dailyCheckProcedureOperationParametersByDailyCheckProcedureOperationId(
        self,
        dailyCheckProcedureOperationId: str = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._dailyCheckProcedureOperationParameterService.dailyCheckProcedureOperationParametersByDailyCheckProcedureOperationId(
            tokenData=tokenData,
            dailyCheckProcedureOperationId=dailyCheckProcedureOperationId,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def constructObject(
        self,
        id: str = None,
        name: str = None,
        unitId: str = None,
        dailyCheckProcedureOperationId: str = None,
        minValue: float = None,
        maxValue: float = None,
        _sourceObject: DailyCheckProcedureOperationParameter = None,
    ) -> DailyCheckProcedureOperationParameter:
        if _sourceObject is not None:
            return DailyCheckProcedureOperationParameter.createFrom(
                id=id,
                name=name if name is not None else _sourceObject.name(),
                unitId=unitId if unitId is not None else _sourceObject.unitId(),
                dailyCheckProcedureOperationId=dailyCheckProcedureOperationId
                if dailyCheckProcedureOperationId is not None
                else _sourceObject.dailyCheckProcedureOperationId(),
                minValue=minValue if minValue is not None else _sourceObject.minValue(),
                maxValue=maxValue if maxValue is not None else _sourceObject.maxValue(),
            )
        else:
            return DailyCheckProcedureOperationParameter.createFrom(
                id=id,
                name=name,
                unitId=unitId,
                dailyCheckProcedureOperationId=dailyCheckProcedureOperationId,
                minValue=minValue,
                maxValue=maxValue,
            )
