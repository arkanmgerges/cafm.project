"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from src.application.BaseApplicationService import BaseApplicationService
from src.application.lifecycle.decorator.readOnly import readOnly
from src.application.lifecycle.decorator.transactional import transactional
from src.application.model.BaseApplicationServiceBulkData import BaseApplicationServiceBulkData
from src.application.model.BaseApplicationServiceModelData import BaseApplicationServiceModelData
from src.domain_model.manufacturer.ManufacturerRepository import ManufacturerRepository
from src.domain_model.project.ProjectRepository import ProjectRepository
from src.domain_model.project.building.BuildingRepository import BuildingRepository
from src.domain_model.project.building.level.BuildingLevelRepository import (
    BuildingLevelRepository,
)
from src.domain_model.project.building.level.room.BuildingLevelRoomRepository import (
    BuildingLevelRoomRepository,
)
from src.domain_model.project.equipment.Equipment import Equipment
from src.domain_model.project.equipment.EquipmentRepository import EquipmentRepository
from src.domain_model.project.equipment.EquipmentService import EquipmentService
from src.domain_model.project.equipment.category.group.EquipmentCategoryGroupRepository import (
    EquipmentCategoryGroupRepository,
)
from src.domain_model.project.equipment.model.EquipmentModelRepository import (
    EquipmentModelRepository,
)
from src.domain_model.project.equipment.project_category.EquipmentProjectCategoryRepository import (
    EquipmentProjectCategoryRepository,
)
from src.domain_model.resource.exception.UpdateEquipmentFailedException import (
    UpdateEquipmentFailedException,
)
from src.domain_model.token.TokenService import TokenService
from src.resource.logging.decorator import debugLogger


class EquipmentApplicationService(BaseApplicationService):
    def __init__(
        self,
        repo: EquipmentRepository,
        equipmentService: EquipmentService,
        projectRepo: ProjectRepository,
        equipmentProjectCategoryRepo: EquipmentProjectCategoryRepository,
        equipmentCategoryGroupRepo: EquipmentCategoryGroupRepository,
        buildingRepo: BuildingRepository,
        buildingLevelRepo: BuildingLevelRepository,
        buildingLevelRoomRepo: BuildingLevelRoomRepository,
        manufacturerRepo: ManufacturerRepository,
        equipmentModelRepo: EquipmentModelRepository,
    ):
        self._repo = repo
        self._equipmentService = equipmentService
        self._projectRepo = projectRepo
        self._equipmentProjectCategoryRepo = equipmentProjectCategoryRepo
        self._equipmentCategoryGroupRepo = equipmentCategoryGroupRepo
        self._buildingRepo = buildingRepo
        self._buildingLevelRepo = buildingLevelRepo
        self._buildingLevelRoomRepo = buildingLevelRoomRepo
        self._manufacturerRepo = manufacturerRepo
        self._equipmentModelRepo = equipmentModelRepo

    @debugLogger
    def newId(self):
        return Equipment.createFrom(skipValidation=True).id()

    @transactional
    @debugLogger
    def createEquipment(
        self,
        token: str = None,
        objectOnly: bool = False,
        **kwargs,
    ):
        obj: Equipment = self._constructObject(**kwargs)
        tokenData = TokenService.tokenDataFromToken(token=token)
        self._projectRepo.projectById(id=kwargs["projectId"])
        self._equipmentProjectCategoryRepo.equipmentProjectCategoryById(id=kwargs["equipmentProjectCategoryId"])
        self._equipmentCategoryGroupRepo.equipmentCategoryGroupById(id=kwargs["equipmentCategoryGroupId"])
        self._buildingRepo.buildingById(id=kwargs["buildingId"], include=[])
        self._buildingLevelRepo.buildingLevelById(id=kwargs["buildingLevelId"], include=[])
        self._buildingLevelRoomRepo.buildingLevelRoomById(id=kwargs["buildingLevelRoomId"])
        self._manufacturerRepo.manufacturerById(id=kwargs["manufacturerId"])
        self._equipmentModelRepo.equipmentModelById(id=kwargs["equipmentModelId"])
        return self._equipmentService.createEquipment(obj=obj, objectOnly=objectOnly, tokenData=tokenData)

    @transactional
    @debugLogger
    def updateEquipment(
        self,
        token: str = None,
        **kwargs,
    ):
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: Equipment = self._repo.equipmentById(id=kwargs["id"])
            super().callFunction(
                modelData=BaseApplicationServiceModelData(
                    function=self._equipmentService.updateEquipment,
                    kwargs={
                        "oldObject": oldObject,
                        "newObject": self._constructObject(_sourceObject=oldObject, **kwargs),
                        "tokenData": tokenData,
                    },
                )
            )

        except Exception as e:
            raise UpdateEquipmentFailedException(message=str(e))

    @transactional
    @debugLogger
    def deleteEquipmentsByProjectId(self, projectId: str, token: str = "", **_kwargs):
        tokenData = TokenService.tokenDataFromToken(token=token)
        result: dict = self._equipmentService.equipments(tokenData=tokenData, projectId=projectId, resultSize=1000000)
        if result['totalItemCount'] > 0:
            for resultItem in result['items']:
                self._equipmentService.deleteEquipment(obj=resultItem, tokenData=tokenData, ignoreRelations=True)

    @transactional
    @debugLogger
    def deleteEquipment(self, id: str, token: str = None, **_kwargs):
        super().callFunction(
            modelData=BaseApplicationServiceModelData(
                function=self._equipmentService.deleteEquipment,
                kwargs={
                    "obj": self._repo.equipmentById(id=id),
                    "tokenData": TokenService.tokenDataFromToken(token=token),
                },
            )
        )

    @transactional
    @debugLogger
    def bulkCreate(self, objListParams: List[dict], token: str = ""):
        super()._bulkCreate(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="equipment_id",
                domainService=self._equipmentService,
            )
        )

    @transactional
    @debugLogger
    def bulkDelete(self, objListParams: List[dict], token: str = ""):
        super()._bulkDelete(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="equipment_id",
                domainService=self._equipmentService,
            )
        )

    @transactional
    @debugLogger
    def bulkUpdate(self, objListParams: List[dict], token: str = ""):
        super()._bulkUpdate(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="equipment_id",
                domainService=self._equipmentService,
                repositoryCallbackFunction=self._repo.equipmentById,
            )
        )

    @readOnly
    @debugLogger
    def equipmentById(self, id: str, token: str = None, **_kwargs) -> Equipment:
        TokenService.tokenDataFromToken(token=token)
        return super().callGetterFunction(
            modelData=BaseApplicationServiceModelData(getterFunction=self._repo.equipmentById, kwargs={"id": id})
        )

    @readOnly
    @debugLogger
    def equipments(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
        **_kwargs,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        kwargs = {"resultFrom": resultFrom, "resultSize": resultSize, "order": order, "tokenData": tokenData}
        if 'projectId' in _kwargs:
            kwargs['projectId'] = _kwargs['projectId']

        return super().callGetterFunction(
            modelData=BaseApplicationServiceModelData(
                getterFunction=self._equipmentService.equipments,
                kwargs=kwargs,
            )
        )


    @debugLogger
    def _constructObject(self, *args, **kwargs) -> Equipment:
        kwargs[BaseApplicationService.DOMAIN_MODEL_CLASS] = Equipment
        return super()._constructObject(*args, **kwargs)
