"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
from typing import List

from src.application.BaseApplicationService import BaseApplicationService
from src.application.ProjectApplicationService import ProjectApplicationService
from src.application.lifecycle.decorator.readOnly import readOnly
from src.application.lifecycle.decorator.transactional import transactional
from src.application.model.BaseApplicationServiceBulkData import BaseApplicationServiceBulkData
from src.application.model.BaseApplicationServiceModelData import BaseApplicationServiceModelData
from src.domain_model.manufacturer.ManufacturerRepository import ManufacturerRepository
from src.domain_model.project.ProjectRepository import ProjectRepository
from src.domain_model.project.building.BuildingRepository import BuildingRepository
from src.domain_model.project.building.level.BuildingLevelRepository import (
    BuildingLevelRepository,
)
from src.domain_model.project.building.level.room.BuildingLevelRoomRepository import (
    BuildingLevelRoomRepository,
)
from src.domain_model.project.equipment.Equipment import Equipment
from src.domain_model.project.equipment.EquipmentRepository import EquipmentRepository
from src.domain_model.project.equipment.EquipmentService import EquipmentService
from src.domain_model.project.equipment.category.group.EquipmentCategoryGroup import EquipmentCategoryGroup
from src.domain_model.project.equipment.category.group.EquipmentCategoryGroupRepository import (
    EquipmentCategoryGroupRepository,
)
from src.domain_model.project.equipment.category.group.EquipmentCategoryGroupService import (
    EquipmentCategoryGroupService,
)
from src.domain_model.project.equipment.model.EquipmentModelRepository import (
    EquipmentModelRepository,
)
from src.domain_model.project.equipment.project_category.EquipmentProjectCategoryRepository import (
    EquipmentProjectCategoryRepository,
)
from src.domain_model.project.standard_equipment.standard_category.standard_group.StandardEquipmentCategoryGroupRepository import \
    StandardEquipmentCategoryGroupRepository
from src.domain_model.resource.exception.UpdateEquipmentFailedException import (
    UpdateEquipmentFailedException,
)
from src.domain_model.token.TokenService import TokenService
from src.resource.logging.decorator import debugLogger


class EquipmentApplicationService(BaseApplicationService):
    def __init__(
        self,
        repo: EquipmentRepository,
        equipmentService: EquipmentService,
        equipmentCategoryGroupService: EquipmentCategoryGroupService,
        projectRepo: ProjectRepository,
        equipmentProjectCategoryRepo: EquipmentProjectCategoryRepository,
        equipmentCategoryGroupRepo: EquipmentCategoryGroupRepository,
        buildingRepo: BuildingRepository,
        buildingLevelRepo: BuildingLevelRepository,
        buildingLevelRoomRepo: BuildingLevelRoomRepository,
        manufacturerRepo: ManufacturerRepository,
        equipmentModelRepo: EquipmentModelRepository,
        standardEquipmentCategoryGroupRepo: StandardEquipmentCategoryGroupRepository,
        projectApplicationService: ProjectApplicationService
    ):
        self._repo = repo
        self._equipmentService = equipmentService
        self._equipmentCategoryGroupService = equipmentCategoryGroupService

        self._projectRepo = projectRepo
        self._equipmentProjectCategoryRepo = equipmentProjectCategoryRepo
        self._equipmentCategoryGroupRepo = equipmentCategoryGroupRepo
        self._buildingRepo = buildingRepo
        self._buildingLevelRepo = buildingLevelRepo
        self._buildingLevelRoomRepo = buildingLevelRoomRepo
        self._manufacturerRepo = manufacturerRepo
        self._equipmentModelRepo = equipmentModelRepo
        self._standardEquipmentCategoryGroupRepo = standardEquipmentCategoryGroupRepo
        self._projectAppService = projectApplicationService

    @debugLogger
    def newId(self):
        return Equipment.createFrom(skipValidation=True).id()

    @debugLogger
    def idByString(self, string: str) -> str:
        import hashlib
        import uuid
        return str(uuid.UUID(hashlib.md5(string.encode()).hexdigest()))

    @transactional
    @debugLogger
    def createEquipment(
        self,
        token: str = None,
        objectOnly: bool = False,
        **kwargs,
    ):
        tokenData = TokenService.tokenDataFromToken(token=token)

        standardEquipmentCategoryGroupId = kwargs.pop("standardEquipmentCategoryGroupId")
        standardEquipmentCategoryGroup = self._standardEquipmentCategoryGroupRepo.standardEquipmentCategoryGroupById(id=standardEquipmentCategoryGroupId)
        equipmentCategoryGroup = self._equipmentCategoryGroupRepo.equipmentCategoryGroupByNameAndProjectIdAndEquipmentProjectCategoryId(
            name=standardEquipmentCategoryGroup.name(),
            projectId=kwargs["projectId"],
            equipmentProjectCategoryId=kwargs["equipmentProjectCategoryId"]
            )
        if equipmentCategoryGroup is None:
            equipmentCategoryGroupId = self.idByString(standardEquipmentCategoryGroup.name()+kwargs["projectId"])
            equipmentCategoryGroup = self._equipmentCategoryGroupService.createEquipmentCategoryGroup(obj=EquipmentCategoryGroup(
                id=equipmentCategoryGroupId,
                name=standardEquipmentCategoryGroup.name(),
                projectId=kwargs["projectId"],
                equipmentProjectCategoryId=kwargs["equipmentProjectCategoryId"]), objectOnly=False, tokenData=tokenData)

        kwargs["equipmentCategoryGroupId"] = equipmentCategoryGroup.id()

        # Check that the project exists, otherwise it will throw exception
        projectId = kwargs["projectId"]
        # self._projectAppService.projectById(id=projectId, token=token)
        obj: Equipment = self._constructObject(**kwargs)
        tokenData = TokenService.tokenDataFromToken(token=token)
        self._projectRepo.projectById(id=projectId)
        self._equipmentProjectCategoryRepo.equipmentProjectCategoryById(id=kwargs["equipmentProjectCategoryId"])
        self._buildingRepo.buildingById(id=kwargs["buildingId"], include=[])
        self._buildingLevelRepo.buildingLevelById(id=kwargs["buildingLevelId"], include=[])
        self._buildingLevelRoomRepo.buildingLevelRoomById(id=kwargs["buildingLevelRoomId"])
        self._manufacturerRepo.manufacturerById(id=kwargs["manufacturerId"])
        self._equipmentModelRepo.equipmentModelById(id=kwargs["equipmentModelId"])
        return self._equipmentService.createEquipmentUsingStandardEquipmentCategoryGroup(obj=obj, objectOnly=objectOnly, standardEquipmentCategoryGroupId=standardEquipmentCategoryGroupId, tokenData=tokenData)

    @transactional
    @debugLogger
    def updateEquipment(
        self,
        token: str = None,
        **kwargs,
    ):
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: Equipment = self._repo.equipmentById(id=kwargs["id"])
            # Check that the project exists, otherwise it will throw exception
            self._projectAppService.projectById(id=oldObject.projectId(), token=token)
            super().callFunction(
                modelData=BaseApplicationServiceModelData(
                    function=self._equipmentService.updateEquipment,
                    kwargs={
                        "oldObject": oldObject,
                        "newObject": self._constructObject(_sourceObject=oldObject, **kwargs),
                        "tokenData": tokenData,
                    },
                )
            )

        except Exception as e:
            raise UpdateEquipmentFailedException(message=str(e))

    @transactional
    @debugLogger
    def deleteEquipmentsByProjectId(self, projectId: str, token: str = "", **_kwargs):
        tokenData = TokenService.tokenDataFromToken(token=token)
        # Check that the project exists, otherwise it will throw exception
        self._projectAppService.projectById(id=projectId, token=token)
        result: dict = self._equipmentService.equipments(tokenData=tokenData, projectId=projectId, resultSize=1000000)
        if result['totalItemCount'] > 0:
            for resultItem in result['items']:
                self._equipmentService.deleteEquipment(obj=resultItem, tokenData=tokenData, ignoreRelations=True)

    @transactional
    @debugLogger
    def deleteEquipment(self, id: str, token: str = None, **_kwargs):
        obj = self._repo.equipmentById(id=id)
        # Check that the project exists, otherwise it will throw exception
        self._projectAppService.projectById(id=obj.projectId(), token=token)
        super().callFunction(
            modelData=BaseApplicationServiceModelData(
                function=self._equipmentService.deleteEquipment,
                kwargs={
                    "obj": obj,
                    "tokenData": TokenService.tokenDataFromToken(token=token),
                },
            )
        )

    @transactional
    @debugLogger
    def bulkCreate(self, objListParams: List[dict], token: str = ""):
        self._checkProjectAccessibility(objListParams=objListParams, token=token)
        super()._bulkCreate(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="equipment_id",
                domainService=self._equipmentService,
            )
        )

    @transactional
    @debugLogger
    def bulkDelete(self, objListParams: List[dict], token: str = ""):
        self._checkProjectAccessibility(objListParams=objListParams, token=token)

        super()._bulkDelete(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="equipment_id",
                domainService=self._equipmentService,
            )
        )

    @transactional
    @debugLogger
    def bulkUpdate(self, objListParams: List[dict], token: str = ""):
        self._checkProjectAccessibility(objListParams=objListParams, token=token)

        super()._bulkUpdate(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="equipment_id",
                domainService=self._equipmentService,
                repositoryCallbackFunction=self._repo.equipmentById,
            )
        )

    @readOnly
    @debugLogger
    def equipmentById(self, id: str, token: str = None, **_kwargs) -> Equipment:
        TokenService.tokenDataFromToken(token=token)
        obj = self._repo.equipmentById(id=id)
        # Check that the project exists, otherwise it will throw exception
        self._projectAppService.projectById(id=obj.projectId(), token=token)
        return obj

    @readOnly
    @debugLogger
    def equipments(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
        **_kwargs,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        kwargs = {"resultFrom": resultFrom, "resultSize": resultSize, "order": order, "tokenData": tokenData}
        if 'projectId' in _kwargs:
            kwargs['projectId'] = _kwargs['projectId']
            # Check that the project exists, otherwise it will throw exception
            self._projectAppService.projectById(id=kwargs["projectId"], token=token)
        return super().callGetterFunction(
            modelData=BaseApplicationServiceModelData(
                getterFunction=self._equipmentService.equipments,
                kwargs=kwargs,
            )
        )

    def _checkProjectAccessibility(self, objListParams, token):
        checkedProjectIdList = []
        for item in objListParams:
            obj = self._repo.equipmentById(id=item["equipment_id"])
            if obj.projectId() not in checkedProjectIdList:
                # Check that the project exists, otherwise it will throw exception
                self._projectAppService.projectById(id=obj.projectId(), token=token)
                checkedProjectIdList.append(obj.projectId())

    @debugLogger
    def _constructObject(self, *args, **kwargs) -> Equipment:
        kwargs[BaseApplicationService.DOMAIN_MODEL_CLASS] = Equipment
        return super()._constructObject(*args, **kwargs)
