"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from src.application.BaseApplicationService import BaseApplicationService
from src.domain_model.manufacturer.ManufacturerRepository import ManufacturerRepository
from src.domain_model.project.ProjectRepository import ProjectRepository
from src.domain_model.project.building.BuildingRepository import BuildingRepository
from src.domain_model.project.building.level.BuildingLevelRepository import (
    BuildingLevelRepository,
)
from src.domain_model.project.building.level.room.BuildingLevelRoomRepository import (
    BuildingLevelRoomRepository,
)
from src.domain_model.project.equipment.Equipment import Equipment
from src.domain_model.project.equipment.EquipmentRepository import EquipmentRepository
from src.domain_model.project.equipment.EquipmentService import EquipmentService
from src.domain_model.project.equipment.category.EquipmentCategoryRepository import (
    EquipmentCategoryRepository,
)
from src.domain_model.project.equipment.category.group.EquipmentCategoryGroupRepository import (
    EquipmentCategoryGroupRepository,
)
from src.domain_model.project.equipment.model.EquipmentModelRepository import (
    EquipmentModelRepository,
)
from src.domain_model.project.equipment.project_category.EquipmentProjectCategoryRepository import (
    EquipmentProjectCategoryRepository,
)
from src.domain_model.resource.exception.DomainModelException import (
    DomainModelException,
)
from src.domain_model.resource.exception.ProcessBulkDomainException import (
    ProcessBulkDomainException,
)
from src.domain_model.resource.exception.UpdateEquipmentFailedException import (
    UpdateEquipmentFailedException,
)
from src.domain_model.token.TokenService import TokenService
from src.domain_model.util.DomainModelAttributeValidator import DomainModelAttributeValidator
from src.resource.common.Util import Util
from src.resource.logging.decorator import debugLogger


class EquipmentApplicationService(BaseApplicationService):
    def __init__(
        self,
        repo: EquipmentRepository,
        equipmentService: EquipmentService,
        projectRepo: ProjectRepository,
        equipmentProjectCategoryRepo: EquipmentProjectCategoryRepository,
        equipmentCategoryRepo: EquipmentCategoryRepository,
        equipmentCategoryGroupRepo: EquipmentCategoryGroupRepository,
        buildingRepo: BuildingRepository,
        buildingLevelRepo: BuildingLevelRepository,
        buildingLevelRoomRepo: BuildingLevelRoomRepository,
        manufacturerRepo: ManufacturerRepository,
        equipmentModelRepo: EquipmentModelRepository,
    ):
        self._repo = repo
        self._equipmentService = equipmentService
        self._projectRepo = projectRepo
        self._equipmentProjectCategoryRepo = equipmentProjectCategoryRepo
        self._equipmentCategoryRepo = equipmentCategoryRepo
        self._equipmentCategoryGroupRepo = equipmentCategoryGroupRepo
        self._buildingRepo = buildingRepo
        self._buildingLevelRepo = buildingLevelRepo
        self._buildingLevelRoomRepo = buildingLevelRoomRepo
        self._manufacturerRepo = manufacturerRepo
        self._equipmentModelRepo = equipmentModelRepo

    @debugLogger
    def newId(self):
        return Equipment.createFrom(skipValidation=True).id()

    @debugLogger
    def createEquipment(
        self,
        token: str = None,
        objectOnly: bool = False,
        **kwargs,
    ):
        obj: Equipment = self._constructObject(**kwargs)
        tokenData = TokenService.tokenDataFromToken(token=token)
        self._projectRepo.projectById(id=kwargs['projectId'])
        self._equipmentProjectCategoryRepo.equipmentProjectCategoryById(id=kwargs['equipmentProjectCategoryId'])
        self._equipmentCategoryRepo.equipmentCategoryById(id=kwargs['equipmentCategoryId'])
        self._equipmentCategoryGroupRepo.equipmentCategoryGroupById(id=kwargs['equipmentCategoryGroupId'])
        self._buildingRepo.buildingById(id=kwargs['buildingId'], include=[])
        self._buildingLevelRepo.buildingLevelById(id=kwargs['buildingLevelId'], include=[])
        self._buildingLevelRoomRepo.buildingLevelRoomById(id=kwargs['buildingLevelRoomId'])
        self._manufacturerRepo.manufacturerById(id=kwargs['manufacturerId'])
        self._equipmentModelRepo.equipmentModelById(id=kwargs['equipmentModelId'])
        return self._equipmentService.createEquipment(obj=obj, objectOnly=objectOnly, tokenData=tokenData)

    @debugLogger
    def updateEquipment(self, token: str = None, **kwargs):
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: Equipment = self._repo.equipmentById(id=kwargs["id"])
            obj: Equipment = self._constructObject(_sourceObject=oldObject, **kwargs)
            self._equipmentService.updateEquipment(oldObject=oldObject, newObject=obj, tokenData=tokenData)
        except Exception as e:
            raise UpdateEquipmentFailedException(message=str(e))

    @debugLogger
    def deleteEquipment(self, id: str, token: str = None):
        tokenData = TokenService.tokenDataFromToken(token=token)
        obj = self._repo.equipmentById(id=id)
        self._equipmentService.deleteEquipment(obj=obj, tokenData=tokenData)

    @debugLogger
    def bulkCreate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(
                    domainModelObject=self._constructObject(skipValidation=True), attributeDictionary=objListParamsItem
                )
                objList.append(
                    self._constructObject(
                        **Util.snakeCaseToLowerCameCaseDict(
                            objListParamsItem, keyReplacements=[{"source": "equipment_id", "target": "id"}]
                        )
                    )
                )
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        _tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._equipmentService.bulkCreate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkDelete(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(
                    domainModelObject=self._constructObject(skipValidation=True), attributeDictionary=objListParamsItem
                )
                objList.append(self._constructObject(id=objListParamsItem["equipment_id"], skipValidation=True))
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        _tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._equipmentService.bulkDelete(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkUpdate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(
                    domainModelObject=self._constructObject(skipValidation=True), attributeDictionary=objListParamsItem
                )
                oldObject: Equipment = self._repo.equipmentById(id=objListParamsItem["equipment_id"])
                newObject = self._constructObject(
                    **Util.snakeCaseToLowerCameCaseDict(
                        objListParamsItem, keyReplacements=[{"source": "equipment_id", "target": "id"}]
                    ),
                    _sourceObject=oldObject,
                )
                objList.append(
                    (newObject, oldObject),
                )
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        _tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._equipmentService.bulkUpdate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def equipmentById(self, id: str, token: str = None) -> Equipment:
        equipment = self._repo.equipmentById(id=id)
        TokenService.tokenDataFromToken(token=token)
        return equipment

    @debugLogger
    def equipments(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._equipmentService.equipments(
            tokenData=tokenData,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def _constructObject(self, *args, **kwargs) -> Equipment:
        kwargs[BaseApplicationService.APPLICATION_SERVICE_CLASS] = Equipment
        return super()._constructObject(*args, **kwargs)
