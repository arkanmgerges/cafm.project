"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from src.domain_model.project.equipment.category.group.EquipmentCategoryGroup import (
    EquipmentCategoryGroup,
)
from src.domain_model.project.equipment.category.group.EquipmentCategoryGroupRepository import (
    EquipmentCategoryGroupRepository,
)
from src.domain_model.project.equipment.category.group.EquipmentCategoryGroupService import (
    EquipmentCategoryGroupService,
)
from src.domain_model.resource.exception.DomainModelException import DomainModelException
from src.domain_model.resource.exception.ProcessBulkDomainException import ProcessBulkDomainException
from src.domain_model.resource.exception.UpdateEquipmentCategoryGroupFailedException import (
    UpdateEquipmentCategoryGroupFailedException,
)
from src.domain_model.project.equipment.category.EquipmentCategoryRepository import (
    EquipmentCategoryRepository,
)
from src.domain_model.token.TokenService import TokenService
from src.domain_model.util.DomainModelAttributeValidator import DomainModelAttributeValidator
from src.resource.logging.decorator import debugLogger


class EquipmentCategoryGroupApplicationService:
    def __init__(
        self,
        repo: EquipmentCategoryGroupRepository,
        equipmentCategoryGroupService: EquipmentCategoryGroupService,
        equipmentCategoryRepo: EquipmentCategoryRepository,
    ):
        self._repo = repo
        self._equipmentCategoryGroupService = equipmentCategoryGroupService
        self._equipmentCategoryRepo = equipmentCategoryRepo

    @debugLogger
    def newId(self):
        return EquipmentCategoryGroup.createFrom(skipValidation=True).id()

    @debugLogger
    def createEquipmentCategoryGroup(
        self,
        id: str = None,
        name: str = None,
        equipmentCategoryId: str = None,
        objectOnly: bool = False,
        token: str = "",
    ):
        obj: EquipmentCategoryGroup = self.constructObject(
            id=id, name=name, equipmentCategoryId=equipmentCategoryId
        )
        tokenData = TokenService.tokenDataFromToken(token=token)
        self._equipmentCategoryRepo.equipmentCategoryById(id=equipmentCategoryId)
        return self._equipmentCategoryGroupService.createEquipmentCategoryGroup(
            obj=obj, objectOnly=objectOnly, tokenData=tokenData
        )

    @debugLogger
    def updateEquipmentCategoryGroup(
        self,
        id: str,
        name: str = None,
        equipmentCategoryId: str = None,
        token: str = None,
    ):
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: EquipmentCategoryGroup = self._repo.equipmentCategoryGroupById(
                id=id
            )
            obj: EquipmentCategoryGroup = self.constructObject(
                id=id,
                name=name,
                equipmentCategoryId=equipmentCategoryId,
                _sourceObject=oldObject,
            )
            self._equipmentCategoryGroupService.updateEquipmentCategoryGroup(
                oldObject=oldObject, newObject=obj, tokenData=tokenData
            )
        except Exception as e:
            raise UpdateEquipmentCategoryGroupFailedException(message=str(e))

    @debugLogger
    def deleteEquipmentCategoryGroup(self, id: str, token: str = None):
        tokenData = TokenService.tokenDataFromToken(token=token)
        obj = self._repo.equipmentCategoryGroupById(id=id)
        self._equipmentCategoryGroupService.deleteEquipmentCategoryGroup(
            obj=obj, tokenData=tokenData
        )

    @debugLogger
    def bulkCreate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(domainModelObject=self.constructObject(skipValidation=True),
                                                       attributeDictionary=objListParamsItem)
                objList.append(self.constructObject(id=objListParamsItem["equipment_category_group_id"],
                                                    name=objListParamsItem["name"],
                                                    equipmentCategoryId=objListParamsItem["equipment_category_id"]))
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._equipmentCategoryGroupService.bulkCreate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkDelete(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(domainModelObject=self.constructObject(skipValidation=True),
                                                       attributeDictionary=objListParamsItem)
                objList.append(
                    self.constructObject(id=objListParamsItem["equipment_category_group_id"], skipValidation=True))
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._equipmentCategoryGroupService.bulkDelete(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkUpdate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(domainModelObject=self.constructObject(skipValidation=True),
                                                       attributeDictionary=objListParamsItem)
                oldObject: EquipmentCategoryGroup = self._repo.equipmentCategoryGroupById(
                    id=objListParamsItem["equipment_category_group_id"])
                newObject = self.constructObject(id=objListParamsItem["equipment_category_group_id"],
                                                 name=objListParamsItem[
                                                     "name"] if "name" in objListParamsItem else None,
                                                 equipmentCategoryId=objListParamsItem[
                                                     "equipment_category_id"] if "equipment_category_id" in objListParamsItem else None,
                                                 _sourceObject=oldObject)
                objList.append((newObject, oldObject), )
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._equipmentCategoryGroupService.bulkUpdate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def equipmentCategoryGroupById(
        self, id: str, token: str = None
    ) -> EquipmentCategoryGroup:
        equipmentCategoryGroup = self._repo.equipmentCategoryGroupById(id=id)
        TokenService.tokenDataFromToken(token=token)
        return equipmentCategoryGroup

    @debugLogger
    def equipmentCategoryGroups(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._equipmentCategoryGroupService.equipmentCategoryGroups(
            tokenData=tokenData,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def constructObject(
        self,
        id: str = None,
        name: str = None,
        equipmentCategoryId: str = None,
        _sourceObject: EquipmentCategoryGroup = None,
        skipValidation: bool = False,
    ) -> EquipmentCategoryGroup:
        if _sourceObject is not None:
            return EquipmentCategoryGroup.createFrom(
                id=id,
                name=name if name is not None else _sourceObject.name(),
                equipmentCategoryId=equipmentCategoryId
                if equipmentCategoryId is not None
                else _sourceObject.equipmentCategoryId(),
                skipValidation=skipValidation,
            )
        else:
            return EquipmentCategoryGroup.createFrom(
                id=id, name=name, equipmentCategoryId=equipmentCategoryId, skipValidation=skipValidation,
            )
