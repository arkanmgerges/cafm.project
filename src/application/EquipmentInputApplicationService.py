"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from src.application.BaseApplicationService import BaseApplicationService
from src.application.model.BaseApplicationServiceBulkData import BaseApplicationServiceBulkData
from src.application.model.BaseApplicationServiceModelData import BaseApplicationServiceModelData
from src.domain_model.project.equipment.input.EquipmentInput import EquipmentInput
from src.domain_model.project.equipment.input.EquipmentInputRepository import (
    EquipmentInputRepository,
)
from src.domain_model.project.equipment.input.EquipmentInputService import (
    EquipmentInputService,
)
from src.domain_model.resource.exception.UpdateEquipmentInputFailedException import (
    UpdateEquipmentInputFailedException,
)
from src.domain_model.token.TokenService import TokenService
from src.resource.logging.decorator import debugLogger


class EquipmentInputApplicationService(BaseApplicationService):
    def __init__(
        self,
        repo: EquipmentInputRepository,
        equipmentInputService: EquipmentInputService,
    ):
        self._repo = repo
        self._equipmentInputService = equipmentInputService

    @debugLogger
    def newId(self):
        return EquipmentInput.createFrom(skipValidation=True).id()

    @debugLogger
    def createEquipmentInput(
        self,
        token: str = None,
        objectOnly: bool = False,
        **kwargs,
    ):
        obj: EquipmentInput = self._constructObject(**kwargs)
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._equipmentInputService.createEquipmentInput(obj=obj, objectOnly=objectOnly, tokenData=tokenData)

    @debugLogger
    def equipmentInputsByEquipmentId(
        self,
        equipmentId: str = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
        **_kwargs,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._equipmentInputService.equipmentInputsByEquipmentId(
            tokenData=tokenData,
            equipmentId=equipmentId,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def updateEquipmentInput(
        self,
        token: str = None,
        **kwargs,
    ):
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: EquipmentInput = self._repo.equipmentInputById(id=kwargs["id"])
            super().callFunction(
                modelData=BaseApplicationServiceModelData(
                    function=self._equipmentInputService.updateEquipmentInput,
                    kwargs={
                        "oldObject": oldObject,
                        "newObject": self._constructObject(_sourceObject=oldObject, **kwargs),
                        "tokenData": tokenData,
                    },
                )
            )

        except Exception as e:
            raise UpdateEquipmentInputFailedException(message=str(e))

    @debugLogger
    def deleteEquipmentInput(self, id: str, token: str = None, **_kwargs):
        super().callFunction(
            modelData=BaseApplicationServiceModelData(
                function=self._equipmentInputService.deleteEquipmentInput,
                kwargs={
                    "obj": self._repo.equipmentInputById(id=id),
                    "tokenData": TokenService.tokenDataFromToken(token=token),
                },
            )
        )

    @debugLogger
    def bulkCreate(self, objListParams: List[dict], token: str = ""):
        super()._bulkCreate(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="equipment_input_id",
                domainService=self._equipmentInputService,
            )
        )

    @debugLogger
    def bulkDelete(self, objListParams: List[dict], token: str = ""):
        super()._bulkDelete(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="equipment_input_id",
                domainService=self._equipmentInputService,
            )
        )

    @debugLogger
    def bulkUpdate(self, objListParams: List[dict], token: str = ""):
        super()._bulkUpdate(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="equipment_input_id",
                domainService=self._equipmentInputService,
                repositoryCallbackFunction=self._repo.equipmentInputById,
            )
        )

    @debugLogger
    def equipmentInputById(self, id: str, token: str = None, **_kwargs) -> EquipmentInput:
        TokenService.tokenDataFromToken(token=token)
        return super().callGetterFunction(
            modelData=BaseApplicationServiceModelData(getterFunction=self._repo.equipmentInputById, kwargs={"id": id})
        )

    @debugLogger
    def equipmentInputs(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
        **_kwargs,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return super().callGetterFunction(
            modelData=BaseApplicationServiceModelData(
                getterFunction=self._equipmentInputService.equipmentInputs,
                kwargs={"resultFrom": resultFrom, "resultSize": resultSize, "order": order, "tokenData": tokenData},
            )
        )

    @debugLogger
    def _constructObject(self, *args, **kwargs) -> EquipmentInput:
        kwargs[BaseApplicationService.DOMAIN_MODEL_CLASS] = EquipmentInput
        return super()._constructObject(*args, **kwargs)
