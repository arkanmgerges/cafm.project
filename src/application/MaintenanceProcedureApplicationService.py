"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
from typing import List

from src.domain_model.project.maintenance.procedure.MaintenanceProcedure import (
    MaintenanceProcedure,
)
from src.domain_model.project.maintenance.procedure.MaintenanceProcedureRepository import (
    MaintenanceProcedureRepository,
)
from src.domain_model.project.maintenance.procedure.MaintenanceProcedureService import (
    MaintenanceProcedureService,
)
from src.domain_model.resource.exception.DomainModelException import DomainModelException
from src.domain_model.resource.exception.ProcessBulkDomainException import ProcessBulkDomainException
from src.domain_model.resource.exception.UpdateMaintenanceProcedureFailedException import (
    UpdateMaintenanceProcedureFailedException,
)
from src.domain_model.token.TokenService import TokenService
from src.domain_model.util.DomainModelAttributeValidator import DomainModelAttributeValidator
from src.resource.logging.decorator import debugLogger
from src.domain_model.project.equipment.EquipmentRepository import EquipmentRepository


class MaintenanceProcedureApplicationService:
    def __init__(
        self,
        repo: MaintenanceProcedureRepository,
        maintenanceProcedureService: MaintenanceProcedureService,
        equipmentRepo: EquipmentRepository,
    ):
        self._repo = repo
        self._maintenanceProcedureService = maintenanceProcedureService
        self._equipmentRepo = equipmentRepo

    @debugLogger
    def newId(self):
        return MaintenanceProcedure.createFrom(skipValidation=True).id()

    @debugLogger
    def createMaintenanceProcedure(
        self,
        id: str = None,
        name: str = None,
        type: str = None,
        subType: str = None,
        frequency: str = None,
        startDate: int = None,
        subcontractorId: str = None,
        equipmentId: str = None,
        objectOnly: bool = False,
        token: str = "",
    ):
        obj: MaintenanceProcedure = self.constructObject(
            id=id,
            name=name,
            type=type,
            subType=subType,
            frequency=frequency,
            startDate=startDate,
            subcontractorId=subcontractorId,
            equipmentId=equipmentId,
        )
        tokenData = TokenService.tokenDataFromToken(token=token)
        self._equipmentRepo.equipmentById(id=equipmentId)
        return self._maintenanceProcedureService.createMaintenanceProcedure(
            obj=obj, objectOnly=objectOnly, tokenData=tokenData
        )

    @debugLogger
    def updateMaintenanceProcedure(
        self,
        id: str,
        name: str = None,
        type: str = None,
        subType: str = None,
        frequency: str = None,
        startDate: int = None,
        subcontractorId: str = None,
        equipmentId: str = None,
        token: str = None,
    ):
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: MaintenanceProcedure = self._repo.maintenanceProcedureById(id=id)
            obj: MaintenanceProcedure = self.constructObject(
                id=id,
                name=name,
                type=type,
                subType=subType,
                frequency=frequency,
                startDate=startDate,
                subcontractorId=subcontractorId,
                equipmentId=equipmentId,
                _sourceObject=oldObject,
            )
            self._maintenanceProcedureService.updateMaintenanceProcedure(
                oldObject=oldObject, newObject=obj, tokenData=tokenData
            )
        except Exception as e:
            raise UpdateMaintenanceProcedureFailedException(message=str(e))

    @debugLogger
    def deleteMaintenanceProcedure(self, id: str, token: str = None):
        tokenData = TokenService.tokenDataFromToken(token=token)
        obj = self._repo.maintenanceProcedureById(id=id)
        self._maintenanceProcedureService.deleteMaintenanceProcedure(
            obj=obj, tokenData=tokenData
        )

    @debugLogger
    def bulkCreate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(domainModelObject=self.constructObject(skipValidation=True),
                                                       attributeDictionary=objListParamsItem)
                objList.append(self.constructObject(id=objListParamsItem["maintenance_procedure_id"],
                                                    name=objListParamsItem["name"],
                                                    type=objListParamsItem["type"],
                                                    subType=objListParamsItem["sub_type"],
                                                    frequency=objListParamsItem["frequency"],
                                                    startDate=objListParamsItem["start_date"],
                                                    subcontractorId=objListParamsItem["subcontractor_id"],
                                                    equipmentId=objListParamsItem["equipment_id"]))
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._maintenanceProcedureService.bulkCreate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkDelete(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(domainModelObject=self.constructObject(skipValidation=True),
                                                       attributeDictionary=objListParamsItem)
                objList.append(
                    self.constructObject(id=objListParamsItem["maintenance_procedure_id"], skipValidation=True))
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._maintenanceProcedureService.bulkDelete(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkUpdate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(domainModelObject=self.constructObject(skipValidation=True),
                                                       attributeDictionary=objListParamsItem)
                oldObject: MaintenanceProcedure = self._repo.maintenanceProcedureById(
                    id=objListParamsItem["maintenance_procedure_id"])
                newObject = self.constructObject(id=objListParamsItem["maintenance_procedure_id"],
                                                 name=objListParamsItem[
                                                     "name"] if "name" in objListParamsItem else None,
                                                 type=objListParamsItem[
                                                     "type"] if "type" in objListParamsItem else None,
                                                 subType=objListParamsItem[
                                                     "sub_type"] if "sub_type" in objListParamsItem else None,
                                                 frequency=objListParamsItem[
                                                     "frequency"] if "frequency" in objListParamsItem else None,
                                                 startDate=objListParamsItem[
                                                     "start_date"] if "start_date" in objListParamsItem else None,
                                                 subcontractorId=objListParamsItem[
                                                     "subcontractor_id"] if "subcontractor_id" in objListParamsItem else None,
                                                 equipmentId=objListParamsItem[
                                                     "equipment_id"] if "equipment_id" in objListParamsItem else None,
                                                 _sourceObject=oldObject)
                objList.append((newObject, oldObject), )
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._maintenanceProcedureService.bulkUpdate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def maintenanceProcedureById(
        self, id: str, token: str = None
    ) -> MaintenanceProcedure:
        maintenanceProcedure = self._repo.maintenanceProcedureById(id=id)
        TokenService.tokenDataFromToken(token=token)
        return maintenanceProcedure

    @debugLogger
    def maintenanceProcedures(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._maintenanceProcedureService.maintenanceProcedures(
            tokenData=tokenData,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def maintenanceProceduresByEquipmentId(
        self,
        equipmentId: str = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._maintenanceProcedureService.maintenanceProceduresByEquipmentId(
            tokenData=tokenData,
            equipmentId=equipmentId,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def constructObject(
        self,
        id: str = None,
        name: str = None,
        type: str = None,
        subType: str = None,
        frequency: str = None,
        startDate: int = None,
        subcontractorId: str = None,
        equipmentId: str = None,
        _sourceObject: MaintenanceProcedure = None,
    ) -> MaintenanceProcedure:
        if _sourceObject is not None:
            return MaintenanceProcedure.createFrom(
                id=id,
                name=name if name is not None else _sourceObject.name(),
                type=type if type is not None else _sourceObject.type(),
                subType=subType if subType is not None else _sourceObject.subType(),
                frequency=frequency
                if frequency is not None
                else _sourceObject.frequency(),
                startDate=startDate
                if startDate is not None
                else _sourceObject.startDate(),
                subcontractorId=subcontractorId
                if subcontractorId is not None
                else _sourceObject.subcontractorId(),
                equipmentId=equipmentId
                if equipmentId is not None
                else _sourceObject.equipmentId(),
            )
        else:
            return MaintenanceProcedure.createFrom(
                id=id,
                name=name,
                type=type,
                subType=subType,
                frequency=frequency,
                startDate=startDate,
                subcontractorId=subcontractorId,
                equipmentId=equipmentId,
            )
