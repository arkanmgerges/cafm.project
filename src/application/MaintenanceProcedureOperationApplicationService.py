"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from src.application.BaseApplicationService import BaseApplicationService
from src.domain_model.project.maintenance.procedure.MaintenanceProcedureRepository import (
    MaintenanceProcedureRepository,
)
from src.domain_model.project.maintenance.procedure.operation.MaintenanceProcedureOperation import (
    MaintenanceProcedureOperation,
)
from src.domain_model.project.maintenance.procedure.operation.MaintenanceProcedureOperationRepository import (
    MaintenanceProcedureOperationRepository,
)
from src.domain_model.project.maintenance.procedure.operation.MaintenanceProcedureOperationService import (
    MaintenanceProcedureOperationService,
)
from src.domain_model.resource.exception.DomainModelException import DomainModelException
from src.domain_model.resource.exception.ProcessBulkDomainException import ProcessBulkDomainException
from src.domain_model.resource.exception.UpdateMaintenanceProcedureOperationFailedException import (
    UpdateMaintenanceProcedureOperationFailedException,
)
from src.domain_model.token.TokenService import TokenService
from src.domain_model.util.DomainModelAttributeValidator import DomainModelAttributeValidator
from src.resource.logging.decorator import debugLogger


class MaintenanceProcedureOperationApplicationService(BaseApplicationService):
    def __init__(
        self,
        repo: MaintenanceProcedureOperationRepository,
        maintenanceProcedureOperationService: MaintenanceProcedureOperationService,
        maintenanceProcedureRepo: MaintenanceProcedureRepository,
    ):
        self._repo = repo
        self._maintenanceProcedureOperationService = maintenanceProcedureOperationService
        self._maintenanceProcedureRepo = maintenanceProcedureRepo

    @debugLogger
    def newId(self):
        return MaintenanceProcedureOperation.createFrom(skipValidation=True).id()

    @debugLogger
    def createMaintenanceProcedureOperation(
        self,
        id: str = None,
        name: str = None,
        description: str = None,
        type: str = None,
        maintenanceProcedureId: str = None,
        objectOnly: bool = False,
        token: str = "",
    ):
        obj: MaintenanceProcedureOperation = self._constructObject(
            id=id,
            name=name,
            description=description,
            type=type,
            maintenanceProcedureId=maintenanceProcedureId,
        )
        tokenData = TokenService.tokenDataFromToken(token=token)
        self._maintenanceProcedureRepo.maintenanceProcedureById(id=maintenanceProcedureId)
        return self._maintenanceProcedureOperationService.createMaintenanceProcedureOperation(
            obj=obj, objectOnly=objectOnly, tokenData=tokenData
        )

    @debugLogger
    def updateMaintenanceProcedureOperation(
        self,
        id: str,
        name: str = None,
        description: str = None,
        type: str = None,
        maintenanceProcedureId: str = None,
        token: str = None,
    ):
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: MaintenanceProcedureOperation = self._repo.maintenanceProcedureOperationById(id=id)
            obj: MaintenanceProcedureOperation = self._constructObject(
                id=id,
                name=name,
                description=description,
                type=type,
                maintenanceProcedureId=maintenanceProcedureId,
                _sourceObject=oldObject,
            )
            self._maintenanceProcedureOperationService.updateMaintenanceProcedureOperation(
                oldObject=oldObject, newObject=obj, tokenData=tokenData
            )
        except Exception as e:
            raise UpdateMaintenanceProcedureOperationFailedException(message=str(e))

    @debugLogger
    def deleteMaintenanceProcedureOperation(self, id: str, token: str = None):
        tokenData = TokenService.tokenDataFromToken(token=token)
        obj = self._repo.maintenanceProcedureOperationById(id=id)
        self._maintenanceProcedureOperationService.deleteMaintenanceProcedureOperation(obj=obj, tokenData=tokenData)

    @debugLogger
    def bulkCreate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(
                    domainModelObject=self._constructObject(skipValidation=True), attributeDictionary=objListParamsItem
                )
                objList.append(
                    self._constructObject(
                        id=objListParamsItem["maintenance_procedure_operation_id"],
                        name=objListParamsItem["name"],
                        description=objListParamsItem["description"],
                        type=objListParamsItem["type"],
                        maintenanceProcedureId=objListParamsItem["maintenance_procedure_id"],
                    )
                )
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        _tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._maintenanceProcedureOperationService.bulkCreate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkDelete(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(
                    domainModelObject=self._constructObject(skipValidation=True), attributeDictionary=objListParamsItem
                )
                objList.append(
                    self._constructObject(
                        id=objListParamsItem["maintenance_procedure_operation_id"], skipValidation=True
                    )
                )
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        _tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._maintenanceProcedureOperationService.bulkDelete(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkUpdate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(
                    domainModelObject=self._constructObject(skipValidation=True), attributeDictionary=objListParamsItem
                )
                oldObject: MaintenanceProcedureOperation = self._repo.maintenanceProcedureOperationById(
                    id=objListParamsItem["maintenance_procedure_operation_id"]
                )
                newObject = self._constructObject(
                    id=objListParamsItem["maintenance_procedure_operation_id"],
                    name=objListParamsItem["name"] if "name" in objListParamsItem else None,
                    description=objListParamsItem["description"] if "description" in objListParamsItem else None,
                    type=objListParamsItem["type"] if "type" in objListParamsItem else None,
                    maintenanceProcedureId=objListParamsItem["maintenance_procedure_id"]
                    if "maintenance_procedure_id" in objListParamsItem
                    else None,
                    _sourceObject=oldObject,
                )
                objList.append(
                    (newObject, oldObject),
                )
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        _tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._maintenanceProcedureOperationService.bulkUpdate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def maintenanceProcedureOperationById(self, id: str, token: str = None) -> MaintenanceProcedureOperation:
        maintenanceProcedureOperation = self._repo.maintenanceProcedureOperationById(id=id)
        TokenService.tokenDataFromToken(token=token)
        return maintenanceProcedureOperation

    @debugLogger
    def maintenanceProcedureOperations(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._maintenanceProcedureOperationService.maintenanceProcedureOperations(
            tokenData=tokenData,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def maintenanceProcedureOperationsByMaintenanceProcedureId(
        self,
        maintenanceProcedureId: str = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._maintenanceProcedureOperationService.maintenanceProcedureOperationsByMaintenanceProcedureId(
            tokenData=tokenData,
            maintenanceProcedureId=maintenanceProcedureId,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def _constructObject(self, *args, **kwargs) -> MaintenanceProcedureOperation:
        kwargs[BaseApplicationService.APPLICATION_SERVICE_CLASS] = MaintenanceProcedureOperation
        return super()._constructObject(*args, **kwargs)
