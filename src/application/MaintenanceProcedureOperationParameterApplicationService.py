"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from src.application.BaseApplicationService import BaseApplicationService
from src.domain_model.project.maintenance.procedure.operation.MaintenanceProcedureOperationRepository import (
    MaintenanceProcedureOperationRepository,
)
from src.domain_model.project.maintenance.procedure.operation.parameter.MaintenanceProcedureOperationParameter import (
    MaintenanceProcedureOperationParameter,
)
from src.domain_model.project.maintenance.procedure.operation.parameter.MaintenanceProcedureOperationParameterRepository import (
    MaintenanceProcedureOperationParameterRepository,
)
from src.domain_model.project.maintenance.procedure.operation.parameter.MaintenanceProcedureOperationParameterService import (
    MaintenanceProcedureOperationParameterService,
)
from src.domain_model.resource.exception.DomainModelException import DomainModelException
from src.domain_model.resource.exception.ProcessBulkDomainException import ProcessBulkDomainException
from src.domain_model.resource.exception.UpdateMaintenanceProcedureOperationParameterFailedException import (
    UpdateMaintenanceProcedureOperationParameterFailedException,
)
from src.domain_model.token.TokenService import TokenService
from src.domain_model.util.DomainModelAttributeValidator import DomainModelAttributeValidator
from src.resource.logging.decorator import debugLogger


class MaintenanceProcedureOperationParameterApplicationService(BaseApplicationService):
    def __init__(
        self,
        repo: MaintenanceProcedureOperationParameterRepository,
        maintenanceProcedureOperationParameterService: MaintenanceProcedureOperationParameterService,
        maintenanceProcedureOperationRepo: MaintenanceProcedureOperationRepository,
    ):
        self._repo = repo
        self._maintenanceProcedureOperationParameterService = maintenanceProcedureOperationParameterService
        self._maintenanceProcedureOperationRepo = maintenanceProcedureOperationRepo

    @debugLogger
    def newId(self):
        return MaintenanceProcedureOperationParameter.createFrom(skipValidation=True).id()

    @debugLogger
    def createMaintenanceProcedureOperationParameter(
        self,
        id: str = None,
        name: str = None,
        unitId: str = None,
        maintenanceProcedureOperationId: str = None,
        minValue: float = None,
        maxValue: float = None,
        objectOnly: bool = False,
        token: str = "",
    ):
        obj: MaintenanceProcedureOperationParameter = self._constructObject(
            id=id,
            name=name,
            unitId=unitId,
            maintenanceProcedureOperationId=maintenanceProcedureOperationId,
            minValue=minValue,
            maxValue=maxValue,
        )
        tokenData = TokenService.tokenDataFromToken(token=token)
        self._maintenanceProcedureOperationRepo.maintenanceProcedureOperationById(id=maintenanceProcedureOperationId)
        return self._maintenanceProcedureOperationParameterService.createMaintenanceProcedureOperationParameter(
            obj=obj, objectOnly=objectOnly, tokenData=tokenData
        )

    @debugLogger
    def updateMaintenanceProcedureOperationParameter(
        self,
        id: str,
        name: str = None,
        unitId: str = None,
        maintenanceProcedureOperationId: str = None,
        minValue: float = None,
        maxValue: float = None,
        token: str = None,
    ):
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: MaintenanceProcedureOperationParameter = self._repo.maintenanceProcedureOperationParameterById(
                id=id
            )
            obj: MaintenanceProcedureOperationParameter = self._constructObject(
                id=id,
                name=name,
                unitId=unitId,
                maintenanceProcedureOperationId=maintenanceProcedureOperationId,
                minValue=minValue,
                maxValue=maxValue,
                _sourceObject=oldObject,
            )
            self._maintenanceProcedureOperationParameterService.updateMaintenanceProcedureOperationParameter(
                oldObject=oldObject, newObject=obj, tokenData=tokenData
            )
        except Exception as e:
            raise UpdateMaintenanceProcedureOperationParameterFailedException(message=str(e))

    @debugLogger
    def deleteMaintenanceProcedureOperationParameter(self, id: str, token: str = None):
        tokenData = TokenService.tokenDataFromToken(token=token)
        obj = self._repo.maintenanceProcedureOperationParameterById(id=id)
        self._maintenanceProcedureOperationParameterService.deleteMaintenanceProcedureOperationParameter(
            obj=obj, tokenData=tokenData
        )

    @debugLogger
    def bulkCreate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(
                    domainModelObject=self._constructObject(skipValidation=True), attributeDictionary=objListParamsItem
                )
                objList.append(
                    self._constructObject(
                        id=objListParamsItem["maintenance_procedure_operation_parameter_id"],
                        name=objListParamsItem["name"],
                        unitId=objListParamsItem["unit_id"],
                        maintenanceProcedureOperationId=objListParamsItem["maintenance_procedure_operation_id"],
                        minValue=objListParamsItem["min_value"],
                        maxValue=objListParamsItem["max_value"],
                    )
                )
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        _tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._maintenanceProcedureOperationParameterService.bulkCreate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkDelete(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(
                    domainModelObject=self._constructObject(skipValidation=True), attributeDictionary=objListParamsItem
                )
                objList.append(
                    self._constructObject(
                        id=objListParamsItem["maintenance_procedure_operation_parameter_id"], skipValidation=True
                    )
                )
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        _tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._maintenanceProcedureOperationParameterService.bulkDelete(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkUpdate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(
                    domainModelObject=self._constructObject(skipValidation=True), attributeDictionary=objListParamsItem
                )
                oldObject: MaintenanceProcedureOperationParameter = (
                    self._repo.maintenanceProcedureOperationParameterById(
                        id=objListParamsItem["maintenance_procedure_operation_parameter_id"]
                    )
                )
                newObject = self._constructObject(
                    id=objListParamsItem["maintenance_procedure_operation_parameter_id"],
                    name=objListParamsItem["name"] if "name" in objListParamsItem else None,
                    unitId=objListParamsItem["unit_id"] if "unit_id" in objListParamsItem else None,
                    maintenanceProcedureOperationId=objListParamsItem["maintenance_procedure_operation_id"]
                    if "maintenance_procedure_operation_id" in objListParamsItem
                    else None,
                    minValue=objListParamsItem["min_value"] if "min_value" in objListParamsItem else None,
                    maxValue=objListParamsItem["max_value"] if "max_value" in objListParamsItem else None,
                    _sourceObject=oldObject,
                )
                objList.append(
                    (newObject, oldObject),
                )
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        _tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._maintenanceProcedureOperationParameterService.bulkUpdate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def maintenanceProcedureOperationParameterById(
        self, id: str, token: str = None
    ) -> MaintenanceProcedureOperationParameter:
        maintenanceProcedureOperationParameter = self._repo.maintenanceProcedureOperationParameterById(id=id)
        TokenService.tokenDataFromToken(token=token)
        return maintenanceProcedureOperationParameter

    @debugLogger
    def maintenanceProcedureOperationParameters(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._maintenanceProcedureOperationParameterService.maintenanceProcedureOperationParameters(
            tokenData=tokenData,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def maintenanceProcedureOperationParametersByMaintenanceProcedureOperationId(
        self,
        maintenanceProcedureOperationId: str = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._maintenanceProcedureOperationParameterService.maintenanceProcedureOperationParametersByMaintenanceProcedureOperationId(
            tokenData=tokenData,
            maintenanceProcedureOperationId=maintenanceProcedureOperationId,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def _constructObject(self, *args, **kwargs) -> MaintenanceProcedureOperationParameter:
        kwargs[BaseApplicationService.APPLICATION_SERVICE_CLASS] = MaintenanceProcedureOperationParameter
        return super()._constructObject(*args, **kwargs)
