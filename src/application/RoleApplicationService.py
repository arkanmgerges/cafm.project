"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from src.application.BaseApplicationService import BaseApplicationService
from src.application.lifecycle.decorator.readOnly import readOnly
from src.application.lifecycle.decorator.transactional import transactional
from src.application.model.BaseApplicationServiceBulkData import (
    BaseApplicationServiceBulkData,
)
from src.application.model.BaseApplicationServiceModelData import (
    BaseApplicationServiceModelData,
)
from src.domain_model.role.Role import Role
from src.domain_model.role.RoleRepository import RoleRepository
from src.domain_model.role.RoleService import RoleService
from src.domain_model.resource.exception.UpdateRoleFailedException import (
    UpdateRoleFailedException,
)
from src.domain_model.token.TokenService import TokenService
from src.domain_model.util.DomainModelAttributeValidator import (
    DomainModelAttributeValidator,
)
from src.domain_model.resource.exception.DomainModelException import (
    DomainModelException,
)
from src.domain_model.resource.exception.ProcessBulkDomainException import (
    ProcessBulkDomainException,
)
from src.resource.logging.decorator import debugLogger


class RoleApplicationService(BaseApplicationService):
    def __init__(
        self,
        repo: RoleRepository,
        roleService: RoleService,
    ):
        self._repo = repo
        self._roleService = roleService

    @debugLogger
    def newId(self):
        return Role.createFrom(skipValidation=True).id()

    @transactional
    @debugLogger
    def createRole(self, token: str = None, objectOnly: bool = False, **kwargs):
        obj: Role = self._constructObject(**kwargs)
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._roleService.createRole(
            obj=obj, objectOnly=objectOnly, tokenData=tokenData
        )

    @readOnly
    @debugLogger
    def roleByName(self, name: str, token: str = "", **_kwargs) -> Role:
        obj = self._repo.roleByName(name=name)
        _tokenData = TokenService.tokenDataFromToken(token=token)
        return obj

    @transactional
    @debugLogger
    def updateRole(
        self,
        token: str = None,
        **kwargs,
    ):
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: Role = self._repo.roleById(id=kwargs["id"])
            super().callFunction(
                modelData=BaseApplicationServiceModelData(
                    function=self._roleService.updateRole,
                    kwargs={
                        "oldObject": oldObject,
                        "newObject": self._constructObject(
                            _sourceObject=oldObject, **kwargs
                        ),
                        "tokenData": tokenData,
                    },
                )
            )

        except Exception as e:
            raise UpdateRoleFailedException(message=str(e))

    @transactional
    @debugLogger
    def deleteRole(self, id: str, token: str = None, **_kwargs):
        super().callFunction(
            modelData=BaseApplicationServiceModelData(
                function=self._roleService.deleteRole,
                kwargs={
                    "obj": self._repo.roleById(id=id),
                    "tokenData": TokenService.tokenDataFromToken(token=token),
                },
            )
        )

    @transactional
    @debugLogger
    def bulkCreate(self, objListParams: List[dict], token: str = ""):
        super()._bulkCreate(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="role_id",
                domainService=self._roleService,
            )
        )

    @transactional
    @debugLogger
    def bulkDelete(self, objListParams: List[dict], token: str = ""):
        super()._bulkDelete(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="role_id",
                domainService=self._roleService,
            )
        )

    @transactional
    @debugLogger
    def bulkUpdate(self, objListParams: List[dict], token: str = ""):
        super()._bulkUpdate(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="role_id",
                domainService=self._roleService,
                repositoryCallbackFunction=self._repo.roleById,
            )
        )

    @readOnly
    @debugLogger
    def roleById(self, id: str, token: str = None, **_kwargs) -> Role:
        TokenService.tokenDataFromToken(token=token)
        return super().callGetterFunction(
            modelData=BaseApplicationServiceModelData(
                getterFunction=self._repo.roleById, kwargs={"id": id}
            )
        )

    @readOnly
    @debugLogger
    def roles(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
        **_kwargs,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return super().callGetterFunction(
            modelData=BaseApplicationServiceModelData(
                getterFunction=self._roleService.roles,
                kwargs={
                    "resultFrom": resultFrom,
                    "resultSize": resultSize,
                    "order": order,
                    "tokenData": tokenData,
                },
            )
        )

    @readOnly
    @debugLogger
    def rolesByOrganizationType(
        self,
        organizationType: str,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)

        return self._roleService.rolesByOrganizationType(
            tokenData=tokenData,
            organizationType=organizationType,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def _constructObject(self, *args, **kwargs) -> Role:
        kwargs[BaseApplicationService.DOMAIN_MODEL_CLASS] = Role
        return super()._constructObject(*args, **kwargs)

