"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from src.application.BaseApplicationService import BaseApplicationService
from src.application.lifecycle.decorator.readOnly import readOnly
from src.application.lifecycle.decorator.transactional import transactional
from src.application.model.BaseApplicationServiceBulkData import BaseApplicationServiceBulkData
from src.application.model.BaseApplicationServiceModelData import BaseApplicationServiceModelData
from src.domain_model.manufacturer.ManufacturerRepository import ManufacturerRepository
from src.domain_model.project.equipment.model.EquipmentModelRepository import (
    EquipmentModelRepository,
)
from src.domain_model.project.standard_equipment.StandardEquipment import (
    StandardEquipment,
)
from src.domain_model.project.standard_equipment.StandardEquipmentRepository import (
    StandardEquipmentRepository,
)
from src.domain_model.project.standard_equipment.StandardEquipmentService import (
    StandardEquipmentService,
)
from src.domain_model.project.standard_equipment.standard_category.StandardEquipmentCategoryRepository import (
    StandardEquipmentCategoryRepository,
)
from src.domain_model.project.standard_equipment.standard_category.standard_group.StandardEquipmentCategoryGroupRepository import (
    StandardEquipmentCategoryGroupRepository,
)
from src.domain_model.resource.exception.UpdateStandardEquipmentFailedException import (
    UpdateStandardEquipmentFailedException,
)
from src.domain_model.token.TokenService import TokenService
from src.resource.logging.decorator import debugLogger


class StandardEquipmentApplicationService(BaseApplicationService):
    def __init__(
        self,
        repo: StandardEquipmentRepository,
        standardEquipmentService: StandardEquipmentService,
        standardEquipmentCategoryRepo: StandardEquipmentCategoryRepository,
        standardEquipmentCategoryGroupRepo: StandardEquipmentCategoryGroupRepository,
        manufacturerRepo: ManufacturerRepository,
        equipmentModelRepo: EquipmentModelRepository,
    ):
        self._repo = repo
        self._standardEquipmentService = standardEquipmentService
        self._standardEquipmentCategoryRepo = standardEquipmentCategoryRepo
        self._standardEquipmentCategoryGroupRepo = standardEquipmentCategoryGroupRepo
        self._manufacturerRepo = manufacturerRepo
        self._equipmentModelRepo = equipmentModelRepo

    @debugLogger
    def newId(self):
        return StandardEquipment.createFrom(skipValidation=True).id()

    @transactional
    @debugLogger
    def createStandardEquipment(self, token: str = None, objectOnly: bool = False, **kwargs):
        obj: StandardEquipment = self._constructObject(**kwargs)
        tokenData = TokenService.tokenDataFromToken(token=token)
        self._standardEquipmentCategoryRepo.standardEquipmentCategoryById(id=kwargs["standardEquipmentCategoryId"])
        self._standardEquipmentCategoryGroupRepo.standardEquipmentCategoryGroupById(
            id=kwargs["standardEquipmentCategoryGroupId"]
        )
        self._manufacturerRepo.manufacturerById(id=kwargs["manufacturerId"])
        self._equipmentModelRepo.equipmentModelById(id=kwargs["equipmentModelId"])
        return self._standardEquipmentService.createStandardEquipment(
            obj=obj, objectOnly=objectOnly, tokenData=tokenData
        )

    @transactional
    @debugLogger
    def updateStandardEquipment(
        self,
        token: str = None,
        **kwargs,
    ):
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: StandardEquipment = self._repo.standardEquipmentById(id=kwargs["id"])
            super().callFunction(
                modelData=BaseApplicationServiceModelData(
                    function=self._standardEquipmentService.updateStandardEquipment,
                    kwargs={
                        "oldObject": oldObject,
                        "newObject": self._constructObject(_sourceObject=oldObject, **kwargs),
                        "tokenData": tokenData,
                    },
                )
            )

        except Exception as e:
            raise UpdateStandardEquipmentFailedException(message=str(e))

    @transactional
    @debugLogger
    def deleteStandardEquipment(self, id: str, token: str = None, **_kwargs):
        super().callFunction(
            modelData=BaseApplicationServiceModelData(
                function=self._standardEquipmentService.deleteStandardEquipment,
                kwargs={
                    "obj": self._repo.standardEquipmentById(id=id),
                    "tokenData": TokenService.tokenDataFromToken(token=token),
                },
            )
        )

    @transactional
    @debugLogger
    def bulkCreate(self, objListParams: List[dict], token: str = ""):
        super()._bulkCreate(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="standard_equipment_id",
                domainService=self._standardEquipmentService,
            )
        )

    @transactional
    @debugLogger
    def bulkDelete(self, objListParams: List[dict], token: str = ""):
        super()._bulkDelete(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="standard_equipment_id",
                domainService=self._standardEquipmentService,
            )
        )

    @transactional
    @debugLogger
    def bulkUpdate(self, objListParams: List[dict], token: str = ""):
        super()._bulkUpdate(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="standard_equipment_id",
                domainService=self._standardEquipmentService,
                repositoryCallbackFunction=self._repo.standardEquipmentById,
            )
        )

    @readOnly
    @debugLogger
    def standardEquipmentById(self, id: str, token: str = None, **_kwargs) -> StandardEquipment:
        TokenService.tokenDataFromToken(token=token)
        return super().callGetterFunction(
            modelData=BaseApplicationServiceModelData(
                getterFunction=self._repo.standardEquipmentById, kwargs={"id": id}
            )
        )

    @readOnly
    @debugLogger
    def standardEquipments(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
        **_kwargs,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return super().callGetterFunction(
            modelData=BaseApplicationServiceModelData(
                getterFunction=self._standardEquipmentService.standardEquipments,
                kwargs={"resultFrom": resultFrom, "resultSize": resultSize, "order": order, "tokenData": tokenData},
            )
        )

    @debugLogger
    def _constructObject(self, *args, **kwargs) -> StandardEquipment:
        kwargs[BaseApplicationService.DOMAIN_MODEL_CLASS] = StandardEquipment
        return super()._constructObject(*args, **kwargs)
