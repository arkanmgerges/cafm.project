"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from src.domain_model.project.standard_equipment.StandardEquipment import (
    StandardEquipment,
)
from src.domain_model.project.standard_equipment.StandardEquipmentRepository import (
    StandardEquipmentRepository,
)
from src.domain_model.project.standard_equipment.StandardEquipmentService import (
    StandardEquipmentService,
)
from src.domain_model.resource.exception.UpdateStandardEquipmentFailedException import (
    UpdateStandardEquipmentFailedException,
)
from src.domain_model.token.TokenService import TokenService
from src.resource.logging.decorator import debugLogger
from src.domain_model.project.standard_equipment.standard_category.StandardEquipmentCategoryRepository import (
    StandardEquipmentCategoryRepository,
)
from src.domain_model.project.standard_equipment.standard_category.standard_group.StandardEquipmentCategoryGroupRepository import (
    StandardEquipmentCategoryGroupRepository,
)
from src.domain_model.manufacturer.ManufacturerRepository import ManufacturerRepository
from src.domain_model.project.equipment.model.EquipmentModelRepository import (
    EquipmentModelRepository,
)


class StandardEquipmentApplicationService:
    def __init__(
        self,
        repo: StandardEquipmentRepository,
        standardEquipmentService: StandardEquipmentService,
        standardEquipmentCategoryRepo: StandardEquipmentCategoryRepository,
        standardEquipmentCategoryGroupRepo: StandardEquipmentCategoryGroupRepository,
        manufacturerRepo: ManufacturerRepository,
        equipmentModelRepo: EquipmentModelRepository,
    ):
        self._repo = repo
        self._standardEquipmentService = standardEquipmentService
        self._standardEquipmentCategoryRepo = standardEquipmentCategoryRepo
        self._standardEquipmentCategoryGroupRepo = standardEquipmentCategoryGroupRepo
        self._manufacturerRepo = manufacturerRepo
        self._equipmentModelRepo = equipmentModelRepo

    @debugLogger
    def newId(self):
        return StandardEquipment.createFrom(skipValidation=True).id()

    @debugLogger
    def createStandardEquipment(
        self,
        id: str = None,
        name: str = None,
        standardEquipmentCategoryId: str = None,
        standardEquipmentCategoryGroupId: str = None,
        manufacturerId: str = None,
        equipmentModelId: str = None,
        objectOnly: bool = False,
        token: str = "",
    ):
        obj: StandardEquipment = self.constructObject(
            id=id,
            name=name,
            standardEquipmentCategoryId=standardEquipmentCategoryId,
            standardEquipmentCategoryGroupId=standardEquipmentCategoryGroupId,
            manufacturerId=manufacturerId,
            equipmentModelId=equipmentModelId,
        )
        tokenData = TokenService.tokenDataFromToken(token=token)
        self._standardEquipmentCategoryRepo.standardEquipmentCategoryById(
            id=standardEquipmentCategoryId
        )
        self._standardEquipmentCategoryGroupRepo.standardEquipmentCategoryGroupById(
            id=standardEquipmentCategoryGroupId
        )
        self._manufacturerRepo.manufacturerById(id=manufacturerId)
        self._equipmentModelRepo.equipmentModelById(id=equipmentModelId)
        return self._standardEquipmentService.createStandardEquipment(
            obj=obj, objectOnly=objectOnly, tokenData=tokenData
        )

    @debugLogger
    def updateStandardEquipment(
        self,
        id: str,
        name: str = None,
        standardEquipmentCategoryId: str = None,
        standardEquipmentCategoryGroupId: str = None,
        manufacturerId: str = None,
        equipmentModelId: str = None,
        token: str = None,
    ):
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: StandardEquipment = self._repo.standardEquipmentById(id=id)
            obj: StandardEquipment = self.constructObject(
                id=id,
                name=name,
                standardEquipmentCategoryId=standardEquipmentCategoryId,
                standardEquipmentCategoryGroupId=standardEquipmentCategoryGroupId,
                manufacturerId=manufacturerId,
                equipmentModelId=equipmentModelId,
                _sourceObject=oldObject,
            )
            self._standardEquipmentService.updateStandardEquipment(
                oldObject=oldObject, newObject=obj, tokenData=tokenData
            )
        except Exception as e:
            raise UpdateStandardEquipmentFailedException(message=str(e))

    @debugLogger
    def deleteStandardEquipment(self, id: str, token: str = None):
        tokenData = TokenService.tokenDataFromToken(token=token)
        obj = self._repo.standardEquipmentById(id=id)
        self._standardEquipmentService.deleteStandardEquipment(
            obj=obj, tokenData=tokenData
        )

    @debugLogger
    def standardEquipmentById(self, id: str, token: str = None) -> StandardEquipment:
        standardEquipment = self._repo.standardEquipmentById(id=id)
        TokenService.tokenDataFromToken(token=token)
        return standardEquipment

    @debugLogger
    def standardEquipments(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._standardEquipmentService.standardEquipments(
            tokenData=tokenData,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def constructObject(
        self,
        id: str,
        name: str = None,
        standardEquipmentCategoryId: str = None,
        standardEquipmentCategoryGroupId: str = None,
        manufacturerId: str = None,
        equipmentModelId: str = None,
        _sourceObject: StandardEquipment = None,
    ) -> StandardEquipment:
        if _sourceObject is not None:
            return StandardEquipment.createFrom(
                id=id,
                name=name if name is not None else _sourceObject.name(),
                standardEquipmentCategoryId=standardEquipmentCategoryId
                if standardEquipmentCategoryId is not None
                else _sourceObject.standardEquipmentCategoryId(),
                standardEquipmentCategoryGroupId=standardEquipmentCategoryGroupId
                if standardEquipmentCategoryGroupId is not None
                else _sourceObject.standardEquipmentCategoryGroupId(),
                manufacturerId=manufacturerId
                if manufacturerId is not None
                else _sourceObject.manufacturerId(),
                equipmentModelId=equipmentModelId
                if equipmentModelId is not None
                else _sourceObject.equipmentModelId(),
            )
        else:
            return StandardEquipment.createFrom(
                id=id,
                name=name,
                standardEquipmentCategoryId=standardEquipmentCategoryId,
                standardEquipmentCategoryGroupId=standardEquipmentCategoryGroupId,
                manufacturerId=manufacturerId,
                equipmentModelId=equipmentModelId,
            )
