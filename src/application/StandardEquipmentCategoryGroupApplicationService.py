"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from src.domain_model.project.standard_equipment.standard_category.standard_group.StandardEquipmentCategoryGroup import StandardEquipmentCategoryGroup
from src.domain_model.project.standard_equipment.standard_category.standard_group.StandardEquipmentCategoryGroupRepository import StandardEquipmentCategoryGroupRepository
from src.domain_model.project.standard_equipment.standard_category.standard_group.StandardEquipmentCategoryGroupService import StandardEquipmentCategoryGroupService
from src.domain_model.resource.exception.UpdateStandardEquipmentCategoryGroupFailedException import UpdateStandardEquipmentCategoryGroupFailedException
from src.domain_model.token.TokenService import TokenService
from src.resource.logging.decorator import debugLogger

class StandardEquipmentCategoryGroupApplicationService:
    def __init__(self, repo: StandardEquipmentCategoryGroupRepository, standardEquipmentCategoryGroupService: StandardEquipmentCategoryGroupService,):
        self._repo = repo
        self._standardEquipmentCategoryGroupService = standardEquipmentCategoryGroupService

    @debugLogger
    def newId(self):
        return StandardEquipmentCategoryGroup.createFrom(skipValidation=True).id()

    @debugLogger
    def createStandardEquipmentCategoryGroup(self, id: str = None, name: str = None, standardEquipmentCategoryId: str = None, objectOnly: bool = False, token: str = ''):
        obj: StandardEquipmentCategoryGroup = self.constructObject(id=id, 
			name=name,
			standardEquipmentCategoryId=standardEquipmentCategoryId)
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._standardEquipmentCategoryGroupService.createStandardEquipmentCategoryGroup(obj=obj, objectOnly=objectOnly, tokenData=tokenData)

    @debugLogger
    def updateStandardEquipmentCategoryGroup(self, id: str, name: str = None, standardEquipmentCategoryId: str = None, token: str = None):
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: StandardEquipmentCategoryGroup = self._repo.standardEquipmentCategoryGroupById(id=id)
            obj: StandardEquipmentCategoryGroup = self.constructObject(id=id, 
			name=name,
			standardEquipmentCategoryId=standardEquipmentCategoryId, _sourceObject=oldObject)
            self._standardEquipmentCategoryGroupService.updateStandardEquipmentCategoryGroup(oldObject=oldObject, newObject=obj, tokenData=tokenData)
        except Exception as e:
            raise UpdateStandardEquipmentCategoryGroupFailedException(message=str(e))

    @debugLogger
    def deleteStandardEquipmentCategoryGroup(self, id: str, token: str = None):
        tokenData = TokenService.tokenDataFromToken(token=token)
        obj = self._repo.standardEquipmentCategoryGroupById(id=id)
        self._standardEquipmentCategoryGroupService.deleteStandardEquipmentCategoryGroup(obj=obj, tokenData=tokenData)

    @debugLogger
    def standardEquipmentCategoryGroupById(self, id: str, token: str = None) -> StandardEquipmentCategoryGroup:
        standardEquipmentCategoryGroup = self._repo.standardEquipmentCategoryGroupById(id=id)
        TokenService.tokenDataFromToken(token=token)
        return standardEquipmentCategoryGroup

    @debugLogger
    def standardEquipmentCategoryGroups(self, resultFrom: int = 0, resultSize: int = 100, order: List[dict] = None,
                        token: str = None) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._standardEquipmentCategoryGroupService.standardEquipmentCategoryGroups(tokenData=tokenData, resultFrom=resultFrom, resultSize=resultSize, order=order)

    @debugLogger
    def constructObject(self, id: str, name: str = None, standardEquipmentCategoryId: str = None, _sourceObject: StandardEquipmentCategoryGroup = None) -> StandardEquipmentCategoryGroup:
        if _sourceObject is not None:
            return StandardEquipmentCategoryGroup.createFrom(id=id, 
			name=name if name is not None else _sourceObject.name(),
			standardEquipmentCategoryId=standardEquipmentCategoryId if standardEquipmentCategoryId is not None else _sourceObject.standardEquipmentCategoryId())
        else:
            return StandardEquipmentCategoryGroup.createFrom(id=id, 
			name=name,
			standardEquipmentCategoryId=standardEquipmentCategoryId)
