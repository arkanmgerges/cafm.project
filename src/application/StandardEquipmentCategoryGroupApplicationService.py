"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from src.application.BaseApplicationService import BaseApplicationService
from src.application.model.BaseApplicationServiceBulkData import BaseApplicationServiceBulkData
from src.application.model.BaseApplicationServiceModelData import BaseApplicationServiceModelData
from src.domain_model.project.standard_equipment.standard_category.StandardEquipmentCategoryRepository import (
    StandardEquipmentCategoryRepository,
)
from src.domain_model.project.standard_equipment.standard_category.standard_group.StandardEquipmentCategoryGroup import (
    StandardEquipmentCategoryGroup,
)
from src.domain_model.project.standard_equipment.standard_category.standard_group.StandardEquipmentCategoryGroupRepository import (
    StandardEquipmentCategoryGroupRepository,
)
from src.domain_model.project.standard_equipment.standard_category.standard_group.StandardEquipmentCategoryGroupService import (
    StandardEquipmentCategoryGroupService,
)
from src.domain_model.resource.exception.UpdateStandardEquipmentCategoryGroupFailedException import (
    UpdateStandardEquipmentCategoryGroupFailedException,
)
from src.domain_model.token.TokenService import TokenService
from src.resource.logging.decorator import debugLogger


class StandardEquipmentCategoryGroupApplicationService(BaseApplicationService):
    def __init__(
        self,
        repo: StandardEquipmentCategoryGroupRepository,
        standardEquipmentCategoryGroupService: StandardEquipmentCategoryGroupService,
        standardEquipmentCategoryRepo: StandardEquipmentCategoryRepository,
    ):
        self._repo = repo
        self._standardEquipmentCategoryGroupService = standardEquipmentCategoryGroupService
        self._standardEquipmentCategoryRepo = standardEquipmentCategoryRepo

    @debugLogger
    def newId(self):
        return StandardEquipmentCategoryGroup.createFrom(skipValidation=True).id()

    @debugLogger
    def createStandardEquipmentCategoryGroup(self, token: str = None, objectOnly: bool = False, **kwargs):
        obj: StandardEquipmentCategoryGroup = self._constructObject(**kwargs)
        tokenData = TokenService.tokenDataFromToken(token=token)
        self._standardEquipmentCategoryRepo.standardEquipmentCategoryById(id=kwargs["standardEquipmentCategoryId"])
        return self._standardEquipmentCategoryGroupService.createStandardEquipmentCategoryGroup(
            obj=obj, objectOnly=objectOnly, tokenData=tokenData
        )

    @debugLogger
    def updateStandardEquipmentCategoryGroup(
        self,
        token: str = None,
        **kwargs,
    ):
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: StandardEquipmentCategoryGroup = self._repo.standardEquipmentCategoryGroupById(id=kwargs["id"])
            super().callFunction(
                modelData=BaseApplicationServiceModelData(
                    function=self._standardEquipmentCategoryGroupService.updateStandardEquipmentCategoryGroup,
                    kwargs={
                        "oldObject": oldObject,
                        "newObject": self._constructObject(_sourceObject=oldObject, **kwargs),
                        "tokenData": tokenData,
                    },
                )
            )

        except Exception as e:
            raise UpdateStandardEquipmentCategoryGroupFailedException(message=str(e))

    @debugLogger
    def deleteStandardEquipmentCategoryGroup(self, id: str, token: str = None, **_kwargs):
        super().callFunction(
            modelData=BaseApplicationServiceModelData(
                function=self._standardEquipmentCategoryGroupService.deleteStandardEquipmentCategoryGroup,
                kwargs={
                    "obj": self._repo.standardEquipmentCategoryGroupById(id=id),
                    "tokenData": TokenService.tokenDataFromToken(token=token),
                },
            )
        )

    @debugLogger
    def bulkCreate(self, objListParams: List[dict], token: str = ""):
        super()._bulkCreate(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="standard_equipment_category_group_id",
                domainService=self._standardEquipmentCategoryGroupService,
            )
        )

    @debugLogger
    def bulkDelete(self, objListParams: List[dict], token: str = ""):
        super()._bulkDelete(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="standard_equipment_category_group_id",
                domainService=self._standardEquipmentCategoryGroupService,
            )
        )

    @debugLogger
    def bulkUpdate(self, objListParams: List[dict], token: str = ""):
        super()._bulkUpdate(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="standard_equipment_category_group_id",
                domainService=self._standardEquipmentCategoryGroupService,
                repositoryCallbackFunction=self._repo.standardEquipmentCategoryGroupById,
            )
        )

    @debugLogger
    def standardEquipmentCategoryGroupById(self, id: str, token: str = None, **_kwargs) -> StandardEquipmentCategoryGroup:
        TokenService.tokenDataFromToken(token=token)
        return super().callGetterFunction(
            modelData=BaseApplicationServiceModelData(
                getterFunction=self._repo.standardEquipmentCategoryGroupById, kwargs={"id": id}
            )
        )

    @debugLogger
    def standardEquipmentCategoryGroups(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
        **_kwargs,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return super().callGetterFunction(
            modelData=BaseApplicationServiceModelData(
                getterFunction=self._standardEquipmentCategoryGroupService.standardEquipmentCategoryGroups,
                kwargs={"resultFrom": resultFrom, "resultSize": resultSize, "order": order, "tokenData": tokenData},
            )
        )

    @debugLogger
    def _constructObject(self, *args, **kwargs) -> StandardEquipmentCategoryGroup:
        kwargs[BaseApplicationService.DOMAIN_MODEL_CLASS] = StandardEquipmentCategoryGroup
        return super()._constructObject(*args, **kwargs)
