"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from src.domain_model.project.standard_equipment.standard_project.standard_category.StandardEquipmentProjectCategory import (
    StandardEquipmentProjectCategory,
)
from src.domain_model.project.standard_equipment.standard_project.standard_category.StandardEquipmentProjectCategoryRepository import (
    StandardEquipmentProjectCategoryRepository,
)
from src.domain_model.project.standard_equipment.standard_project.standard_category.StandardEquipmentProjectCategoryService import (
    StandardEquipmentProjectCategoryService,
)
from src.domain_model.resource.exception.UpdateStandardEquipmentProjectCategoryFailedException import (
    UpdateStandardEquipmentProjectCategoryFailedException,
)
from src.domain_model.token.TokenService import TokenService
from src.application.BaseApplicationService import BaseApplicationService
from src.application.lifecycle.decorator.readOnly import readOnly
from src.application.lifecycle.decorator.transactional import transactional
from src.application.model.BaseApplicationServiceBulkData import (
    BaseApplicationServiceBulkData,
)
from src.application.model.BaseApplicationServiceModelData import (
    BaseApplicationServiceModelData,
)
from src.resource.logging.decorator import debugLogger
from src.domain_model.organization.OrganizationRepository import OrganizationRepository


class StandardEquipmentProjectCategoryApplicationService(BaseApplicationService):
    def __init__(
        self,
        repo: StandardEquipmentProjectCategoryRepository,
        standardEquipmentProjectCategoryService: StandardEquipmentProjectCategoryService,
        organizationRepo: OrganizationRepository,
    ):
        self._repo = repo
        self._standardEquipmentProjectCategoryService = (
            standardEquipmentProjectCategoryService
        )
        self._organizationRepo = organizationRepo

    @debugLogger
    def newId(self, **_kwargs):
        return StandardEquipmentProjectCategory.createFrom(skipValidation=True).id()

    @transactional
    @debugLogger
    def createStandardEquipmentProjectCategory(
        self, token: str = None, objectOnly: bool = False, **kwargs
    ):
        obj: StandardEquipmentProjectCategory = self._constructObject(**kwargs)
        tokenData = TokenService.tokenDataFromToken(token=token)

        self._organizationRepo.organizationById(id=kwargs["organizationId"])
        return self._standardEquipmentProjectCategoryService.createStandardEquipmentProjectCategory(
            obj=obj, objectOnly=objectOnly, tokenData=tokenData
        )

    @transactional
    @debugLogger
    def updateStandardEquipmentProjectCategory(
        self,
        token: str = None,
        **kwargs,
    ):
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: StandardEquipmentProjectCategory = (
                self._repo.standardEquipmentProjectCategoryById(id=kwargs["id"])
            )
            super().callFunction(
                modelData=BaseApplicationServiceModelData(
                    function=self._standardEquipmentProjectCategoryService.updateStandardEquipmentProjectCategory,
                    kwargs={
                        "oldObject": oldObject,
                        "newObject": self._constructObject(
                            _sourceObject=oldObject, **kwargs
                        ),
                        "tokenData": tokenData,
                    },
                )
            )

        except Exception as e:
            raise UpdateStandardEquipmentProjectCategoryFailedException(message=str(e))

    @transactional
    @debugLogger
    def deleteStandardEquipmentProjectCategory(
        self, id: str, token: str = None, **_kwargs
    ):
        super().callFunction(
            modelData=BaseApplicationServiceModelData(
                function=self._standardEquipmentProjectCategoryService.deleteStandardEquipmentProjectCategory,
                kwargs={
                    "obj": self._repo.standardEquipmentProjectCategoryById(id=id),
                    "tokenData": TokenService.tokenDataFromToken(token=token),
                },
            )
        )

    @transactional
    @debugLogger
    def bulkCreate(self, objListParams: List[dict], token: str = "", **_kwargs):
        super()._bulkCreate(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="standardEquipmentProjectCategory_id",
                domainService=self._standardEquipmentProjectCategoryService,
            )
        )

    @transactional
    @debugLogger
    def bulkDelete(self, objListParams: List[dict], token: str = "", **_kwargs):
        super()._bulkDelete(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="standardEquipmentProjectCategory_id",
                domainService=self._standardEquipmentProjectCategoryService,
            )
        )

    @transactional
    @debugLogger
    def bulkUpdate(self, objListParams: List[dict], token: str = "", **_kwargs):
        super()._bulkUpdate(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="standardEquipmentProjectCategory_id",
                domainService=self._standardEquipmentProjectCategoryService,
                repositoryCallbackFunction=self._repo.standardEquipmentProjectCategoryById,
            )
        )

    @readOnly
    @debugLogger
    def standardEquipmentProjectCategoryById(
        self, id: str, token: str = None, **_kwargs
    ) -> StandardEquipmentProjectCategory:
        TokenService.tokenDataFromToken(token=token)
        return super().callGetterFunction(
            modelData=BaseApplicationServiceModelData(
                getterFunction=self._repo.standardEquipmentProjectCategoryById,
                kwargs={"id": id},
            )
        )

    @readOnly
    @debugLogger
    def standardEquipmentProjectCategories(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
        **_kwargs,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return super().callGetterFunction(
            modelData=BaseApplicationServiceModelData(
                getterFunction=self._standardEquipmentProjectCategoryService.standardEquipmentProjectCategories,
                kwargs={
                    "resultFrom": resultFrom,
                    "resultSize": resultSize,
                    "order": order,
                    "tokenData": tokenData,
                },
            )
        )

    @readOnly
    @debugLogger
    def standardEquipmentProjectCategoriesByOrganizationId(
        self,
        organizationId: str = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._standardEquipmentProjectCategoryService.standardEquipmentProjectCategoriesByOrganizationId(
            tokenData=tokenData,
            organizationId=organizationId,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def _constructObject(self, *args, **kwargs) -> StandardEquipmentProjectCategory:
        kwargs[
            BaseApplicationService.DOMAIN_MODEL_CLASS
        ] = StandardEquipmentProjectCategory
        return super()._constructObject(*args, **kwargs)
