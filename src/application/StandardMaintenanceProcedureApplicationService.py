"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from src.application.BaseApplicationService import BaseApplicationService
from src.application.lifecycle.decorator.readOnly import readOnly
from src.application.lifecycle.decorator.transactional import transactional
from src.application.model.BaseApplicationServiceBulkData import BaseApplicationServiceBulkData
from src.application.model.BaseApplicationServiceModelData import BaseApplicationServiceModelData
from src.domain_model.organization.OrganizationRepository import OrganizationRepository
from src.domain_model.project.standard_equipment.standard_category.standard_group.StandardEquipmentCategoryGroupRepository import (
    StandardEquipmentCategoryGroupRepository,
)
from src.domain_model.resource.exception.UpdateStandardMaintenanceProcedureFailedException import (
    UpdateStandardMaintenanceProcedureFailedException,
)
from src.domain_model.standard_maintenance.procedure.StandardMaintenanceProcedure import (
    StandardMaintenanceProcedure,
)
from src.domain_model.standard_maintenance.procedure.StandardMaintenanceProcedureRepository import (
    StandardMaintenanceProcedureRepository,
)
from src.domain_model.standard_maintenance.procedure.StandardMaintenanceProcedureService import (
    StandardMaintenanceProcedureService,
)
from src.domain_model.token.TokenService import TokenService
from src.resource.logging.decorator import debugLogger


class StandardMaintenanceProcedureApplicationService(BaseApplicationService):
    def __init__(
        self,
        repo: StandardMaintenanceProcedureRepository,
        standardMaintenanceProcedureService: StandardMaintenanceProcedureService,
        orgRepo: OrganizationRepository,
        standardEquipmentCategoryGroupRepo: StandardEquipmentCategoryGroupRepository,
    ):
        self._repo = repo
        self._standardMaintenanceProcedureService = standardMaintenanceProcedureService
        self._orgRepo = orgRepo
        self._standardEquipmentCategoryGroupRepo = standardEquipmentCategoryGroupRepo

    @debugLogger
    def newId(self):
        return StandardMaintenanceProcedure.createFrom(skipValidation=True).id()

    @transactional
    @debugLogger
    def createStandardMaintenanceProcedure(self, token: str = None, objectOnly: bool = False, **kwargs):
        obj: StandardMaintenanceProcedure = self._constructObject(**kwargs)
        tokenData = TokenService.tokenDataFromToken(token=token)
        self._orgRepo.organizationById(id=kwargs["organizationId"])
        self._standardEquipmentCategoryGroupRepo.standardEquipmentCategoryGroupById(
            id=kwargs["standardEquipmentCategoryGroupId"]
        )
        return self._standardMaintenanceProcedureService.createStandardMaintenanceProcedure(
            obj=obj, objectOnly=objectOnly, tokenData=tokenData
        )

    @transactional
    @debugLogger
    def updateStandardMaintenanceProcedure(
        self,
        token: str = None,
        **kwargs,
    ):
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: StandardMaintenanceProcedure = self._repo.standardMaintenanceProcedureById(id=kwargs["id"])
            super().callFunction(
                modelData=BaseApplicationServiceModelData(
                    function=self._standardMaintenanceProcedureService.updateStandardMaintenanceProcedure,
                    kwargs={
                        "oldObject": oldObject,
                        "newObject": self._constructObject(_sourceObject=oldObject, **kwargs),
                        "tokenData": tokenData,
                    },
                )
            )

        except Exception as e:
            raise UpdateStandardMaintenanceProcedureFailedException(message=str(e))

    @transactional
    @debugLogger
    def deleteStandardMaintenanceProcedure(self, id: str, token: str = None, **_kwargs):
        super().callFunction(
            modelData=BaseApplicationServiceModelData(
                function=self._standardMaintenanceProcedureService.deleteStandardMaintenanceProcedure,
                kwargs={
                    "obj": self._repo.standardMaintenanceProcedureById(id=id),
                    "tokenData": TokenService.tokenDataFromToken(token=token),
                },
            )
        )

    @transactional
    @debugLogger
    def bulkCreate(self, objListParams: List[dict], token: str = ""):
        super()._bulkCreate(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="standard_maintenance_procedure_id",
                domainService=self._standardMaintenanceProcedureService,
            )
        )

    @transactional
    @debugLogger
    def bulkDelete(self, objListParams: List[dict], token: str = ""):
        super()._bulkDelete(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="standard_maintenance_procedure_id",
                domainService=self._standardMaintenanceProcedureService,
            )
        )

    @transactional
    @debugLogger
    def bulkUpdate(self, objListParams: List[dict], token: str = ""):
        super()._bulkUpdate(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="standard_maintenance_procedure_id",
                domainService=self._standardMaintenanceProcedureService,
                repositoryCallbackFunction=self._repo.standardMaintenanceProcedureById,
            )
        )

    @readOnly
    @debugLogger
    def standardMaintenanceProcedureById(self, id: str, token: str = None, **_kwargs) -> StandardMaintenanceProcedure:
        TokenService.tokenDataFromToken(token=token)
        return super().callGetterFunction(
            modelData=BaseApplicationServiceModelData(
                getterFunction=self._repo.standardMaintenanceProcedureById, kwargs={"id": id}
            )
        )

    @readOnly
    @debugLogger
    def standardMaintenanceProcedures(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
        **_kwargs,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return super().callGetterFunction(
            modelData=BaseApplicationServiceModelData(
                getterFunction=self._standardMaintenanceProcedureService.standardMaintenanceProcedures,
                kwargs={"resultFrom": resultFrom, "resultSize": resultSize, "order": order, "tokenData": tokenData},
            )
        )

    @debugLogger
    def _constructObject(self, *args, **kwargs) -> StandardMaintenanceProcedure:
        kwargs[BaseApplicationService.DOMAIN_MODEL_CLASS] = StandardMaintenanceProcedure
        return super()._constructObject(*args, **kwargs)
