"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from src.domain_model.resource.exception.DomainModelException import DomainModelException
from src.domain_model.resource.exception.ProcessBulkDomainException import ProcessBulkDomainException
from src.domain_model.standard_maintenance_procedure.StandardMaintenanceProcedure import (
    StandardMaintenanceProcedure,
)
from src.domain_model.standard_maintenance_procedure.StandardMaintenanceProcedureRepository import (
    StandardMaintenanceProcedureRepository,
)
from src.domain_model.standard_maintenance_procedure.StandardMaintenanceProcedureService import (
    StandardMaintenanceProcedureService,
)
from src.domain_model.resource.exception.UpdateStandardMaintenanceProcedureFailedException import (
    UpdateStandardMaintenanceProcedureFailedException,
)
from src.domain_model.organization.OrganizationRepository import OrganizationRepository
from src.domain_model.project.standard_equipment.standard_category.standard_group.StandardEquipmentCategoryGroupRepository import (
    StandardEquipmentCategoryGroupRepository,
)
from src.domain_model.token.TokenService import TokenService
from src.resource.logging.decorator import debugLogger


class StandardMaintenanceProcedureApplicationService:
    def __init__(
        self,
        repo: StandardMaintenanceProcedureRepository,
        standardMaintenanceProcedureService: StandardMaintenanceProcedureService,
        orgRepo: OrganizationRepository,
        standardEquipmentCategoryGroupRepo: StandardEquipmentCategoryGroupRepository,
    ):
        self._repo = repo
        self._standardMaintenanceProcedureService = standardMaintenanceProcedureService
        self._orgRepo = orgRepo
        self._standardEquipmentCategoryGroupRepo = standardEquipmentCategoryGroupRepo

    @debugLogger
    def newId(self):
        return StandardMaintenanceProcedure.createFrom(skipValidation=True).id()

    @debugLogger
    def createStandardMaintenanceProcedure(
        self,
        id: str = None,
        name: str = None,
        type: str = None,
        subtype: str = None,
        frequency: str = None,
        startDate: str = None,
        organizationId: str = None,
        standardEquipmentCategoryGroupId: str = None,
        objectOnly: bool = False,
        token: str = "",
    ):
        obj: StandardMaintenanceProcedure = self.constructObject(
            id=id,
            name=name,
            type=type,
            subtype=subtype,
            frequency=frequency,
            startDate=startDate,
            organizationId=organizationId,
            standardEquipmentCategoryGroupId=standardEquipmentCategoryGroupId,
        )
        tokenData = TokenService.tokenDataFromToken(token=token)
        self._orgRepo.organizationById(id=organizationId)
        self._standardEquipmentCategoryGroupRepo.standardEquipmentCategoryGroupById(
            id=standardEquipmentCategoryGroupId
        )
        return self._standardMaintenanceProcedureService.createStandardMaintenanceProcedure(
            obj=obj, objectOnly=objectOnly, tokenData=tokenData
        )

    @debugLogger
    def updateStandardMaintenanceProcedure(
        self,
        id: str,
        name: str = None,
        type: str = None,
        subtype: str = None,
        frequency: str = None,
        startDate: str = None,
        organizationId: str = None,
        standardEquipmentCategoryGroupId: str = None,
        token: str = None,
    ):
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: StandardMaintenanceProcedure = (
                self._repo.standardMaintenanceProcedureById(id=id)
            )
            obj: StandardMaintenanceProcedure = self.constructObject(
                id=id,
                name=name,
                type=type,
                subtype=subtype,
                frequency=frequency,
                startDate=startDate,
                organizationId=organizationId,
                standardEquipmentCategoryGroupId=standardEquipmentCategoryGroupId,
                _sourceObject=oldObject,
            )
            self._standardMaintenanceProcedureService.updateStandardMaintenanceProcedure(
                oldObject=oldObject, newObject=obj, tokenData=tokenData
            )
        except Exception as e:
            raise UpdateStandardMaintenanceProcedureFailedException(message=str(e))

    @debugLogger
    def deleteStandardMaintenanceProcedure(self, id: str, token: str = None):
        tokenData = TokenService.tokenDataFromToken(token=token)
        obj = self._repo.standardMaintenanceProcedureById(id=id)
        self._standardMaintenanceProcedureService.deleteStandardMaintenanceProcedure(
            obj=obj, tokenData=tokenData
        )

    @debugLogger
    def bulkCreate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                objList.append(self.constructObject(id=objListParamsItem["standard_maintenance_procedure_id"],
                                                    name=objListParamsItem["name"],
                                                    type=objListParamsItem["type"],
                                                    subtype=objListParamsItem["subtype"],
                                                    frequency=objListParamsItem["frequency"],
                                                    startDate=objListParamsItem["start_date"],
                                                    organizationId=objListParamsItem["organization_id"],
                                                    standardEquipmentCategoryGroupId=objListParamsItem[
                                                        "standard_equipment_category_group_id"]))
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._standardMaintenanceProcedureService.bulkCreate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkDelete(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                objList.append(self.constructObject(id=objListParamsItem["standard_maintenance_procedure_id"],
                                                    skipValidation=True))
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._standardMaintenanceProcedureService.bulkDelete(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkUpdate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                oldObject: StandardMaintenanceProcedure = self._repo.standardMaintenanceProcedureById(
                    id=objListParamsItem["standard_maintenance_procedure_id"])
                newObject = self.constructObject(id=objListParamsItem["standard_maintenance_procedure_id"],
                                                 name=objListParamsItem[
                                                     "name"] if "name" in objListParamsItem else None,
                                                 type=objListParamsItem[
                                                     "type"] if "type" in objListParamsItem else None,
                                                 subtype=objListParamsItem[
                                                     "subtype"] if "subtype" in objListParamsItem else None,
                                                 frequency=objListParamsItem[
                                                     "frequency"] if "frequency" in objListParamsItem else None,
                                                 startDate=objListParamsItem[
                                                     "start_date"] if "start_date" in objListParamsItem else None,
                                                 organizationId=objListParamsItem[
                                                     "organization_id"] if "organization_id" in objListParamsItem else None,
                                                 standardEquipmentCategoryGroupId=objListParamsItem[
                                                     "standard_equipment_category_group_id"] if "standard_equipment_category_group_id" in objListParamsItem else None,
                                                 _sourceObject=oldObject)
                objList.append((newObject, oldObject), )
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._standardMaintenanceProcedureService.bulkUpdate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def standardMaintenanceProcedureById(
        self, id: str, token: str = None
    ) -> StandardMaintenanceProcedure:
        standardMaintenanceProcedure = self._repo.standardMaintenanceProcedureById(
            id=id
        )
        TokenService.tokenDataFromToken(token=token)
        return standardMaintenanceProcedure

    @debugLogger
    def standardMaintenanceProcedures(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._standardMaintenanceProcedureService.standardMaintenanceProcedures(
            tokenData=tokenData,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def constructObject(
        self,
        id: str,
        name: str = None,
        type: str = None,
        subtype: str = None,
        frequency: str = None,
        startDate: str = None,
        organizationId: str = None,
        standardEquipmentCategoryGroupId: str = None,
        _sourceObject: StandardMaintenanceProcedure = None,
    ) -> StandardMaintenanceProcedure:
        if _sourceObject is not None:
            return StandardMaintenanceProcedure.createFrom(
                id=id,
                name=name if name is not None else _sourceObject.name(),
                type=type if type is not None else _sourceObject.type(),
                subtype=subtype if subtype is not None else _sourceObject.subtype(),
                frequency=frequency
                if frequency is not None
                else _sourceObject.frequency(),
                startDate=startDate
                if startDate is not None
                else _sourceObject.startDate(),
                organizationId=organizationId
                if organizationId is not None
                else _sourceObject.organizationId(),
                standardEquipmentCategoryGroupId=standardEquipmentCategoryGroupId
                if standardEquipmentCategoryGroupId is not None
                else _sourceObject.standardEquipmentCategoryGroupId(),
            )
        else:
            return StandardMaintenanceProcedure.createFrom(
                id=id,
                name=name,
                type=type,
                subtype=subtype,
                frequency=frequency,
                startDate=startDate,
                organizationId=organizationId,
                standardEquipmentCategoryGroupId=standardEquipmentCategoryGroupId,
            )
