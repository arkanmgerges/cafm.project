"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from src.application.BaseApplicationService import BaseApplicationService
from src.application.lifecycle.decorator.readOnly import readOnly
from src.application.lifecycle.decorator.transactional import transactional
from src.application.model.BaseApplicationServiceBulkData import BaseApplicationServiceBulkData
from src.application.model.BaseApplicationServiceModelData import BaseApplicationServiceModelData
from src.domain_model.project.standard_maintenance.procedure.operation.StandardMaintenanceProcedureOperationRepository import (
    StandardMaintenanceProcedureOperationRepository,
)
from src.domain_model.project.standard_maintenance.procedure.operation.parameter.StandardMaintenanceProcedureOperationParameter import (
    StandardMaintenanceProcedureOperationParameter,
)
from src.domain_model.project.standard_maintenance.procedure.operation.parameter.StandardMaintenanceProcedureOperationParameterRepository import (
    StandardMaintenanceProcedureOperationParameterRepository,
)
from src.domain_model.project.standard_maintenance.procedure.operation.parameter.StandardMaintenanceProcedureOperationParameterService import (
    StandardMaintenanceProcedureOperationParameterService,
)
from src.domain_model.resource.exception.UpdateStandardMaintenanceProcedureOperationParameterFailedException import (
    UpdateStandardMaintenanceProcedureOperationParameterFailedException,
)
from src.domain_model.token.TokenService import TokenService
from src.resource.logging.decorator import debugLogger


class StandardMaintenanceProcedureOperationParameterApplicationService(BaseApplicationService):
    def __init__(
        self,
        repo: StandardMaintenanceProcedureOperationParameterRepository,
        standardMaintenanceProcedureOperationParameterService: StandardMaintenanceProcedureOperationParameterService,
        standardMaintenanceProcedureOperationRepo: StandardMaintenanceProcedureOperationRepository,
    ):
        self._repo = repo
        self._standardMaintenanceProcedureOperationParameterService = standardMaintenanceProcedureOperationParameterService
        self._standardMaintenanceProcedureOperationRepo = standardMaintenanceProcedureOperationRepo

    @debugLogger
    def newId(self):
        return StandardMaintenanceProcedureOperationParameter.createFrom(skipValidation=True).id()

    @transactional
    @debugLogger
    def createStandardMaintenanceProcedureOperationParameter(self, token: str = None, objectOnly: bool = False, **kwargs):
        obj: StandardMaintenanceProcedureOperationParameter = self._constructObject(**kwargs)
        tokenData = TokenService.tokenDataFromToken(token=token)
        self._standardMaintenanceProcedureOperationRepo.standardMaintenanceProcedureOperationById(
            id=kwargs["standardMaintenanceProcedureOperationId"]
        )
        return self._standardMaintenanceProcedureOperationParameterService.createStandardMaintenanceProcedureOperationParameter(
            obj=obj, objectOnly=objectOnly, tokenData=tokenData
        )

    @readOnly
    @debugLogger
    def standardMaintenanceProcedureOperationParametersByStandardMaintenanceProcedureOperationId(
        self,
        standardMaintenanceProcedureOperationId: str = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
        **_kwargs,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._standardMaintenanceProcedureOperationParameterService.standardMaintenanceProcedureOperationParametersByStandardMaintenanceProcedureOperationId(
            tokenData=tokenData,
            standardMaintenanceProcedureOperationId=standardMaintenanceProcedureOperationId,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @transactional
    @debugLogger
    def updateStandardMaintenanceProcedureOperationParameter(
        self,
        token: str = None,
        **kwargs,
    ):
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: StandardMaintenanceProcedureOperationParameter = self._repo.standardMaintenanceProcedureOperationParameterById(
                id=kwargs["id"]
            )
            super().callFunction(
                modelData=BaseApplicationServiceModelData(
                    function=self._standardMaintenanceProcedureOperationParameterService.updateStandardMaintenanceProcedureOperationParameter,
                    kwargs={
                        "oldObject": oldObject,
                        "newObject": self._constructObject(_sourceObject=oldObject, **kwargs),
                        "tokenData": tokenData,
                    },
                )
            )

        except Exception as e:
            raise UpdateStandardMaintenanceProcedureOperationParameterFailedException(message=str(e))

    @transactional
    @debugLogger
    def deleteStandardMaintenanceProcedureOperationParameter(self, id: str, token: str = None, **_kwargs):
        super().callFunction(
            modelData=BaseApplicationServiceModelData(
                function=self._standardMaintenanceProcedureOperationParameterService.deleteStandardMaintenanceProcedureOperationParameter,
                kwargs={
                    "obj": self._repo.standardMaintenanceProcedureOperationParameterById(id=id),
                    "tokenData": TokenService.tokenDataFromToken(token=token),
                },
            )
        )

    @transactional
    @debugLogger
    def bulkCreate(self, objListParams: List[dict], token: str = ""):
        super()._bulkCreate(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="standardMaintenance_procedure_operation_parameter_id",
                domainService=self._standardMaintenanceProcedureOperationParameterService,
            )
        )

    @transactional
    @debugLogger
    def bulkDelete(self, objListParams: List[dict], token: str = ""):
        super()._bulkDelete(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="standardMaintenance_procedure_operation_parameter_id",
                domainService=self._standardMaintenanceProcedureOperationParameterService,
            )
        )

    @transactional
    @debugLogger
    def bulkUpdate(self, objListParams: List[dict], token: str = ""):
        super()._bulkUpdate(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="standardMaintenance_procedure_operation_parameter_id",
                domainService=self._standardMaintenanceProcedureOperationParameterService,
                repositoryCallbackFunction=self._repo.standardMaintenanceProcedureOperationParameterById,
            )
        )

    @readOnly
    @debugLogger
    def standardMaintenanceProcedureOperationParameterById(
        self, id: str, token: str = None, **_kwargs
    ) -> StandardMaintenanceProcedureOperationParameter:
        TokenService.tokenDataFromToken(token=token)
        return super().callGetterFunction(
            modelData=BaseApplicationServiceModelData(
                getterFunction=self._repo.standardMaintenanceProcedureOperationParameterById, kwargs={"id": id}
            )
        )

    @readOnly
    @debugLogger
    def standardMaintenanceProcedureOperationParameters(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
        **_kwargs,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return super().callGetterFunction(
            modelData=BaseApplicationServiceModelData(
                getterFunction=self._standardMaintenanceProcedureOperationParameterService.standardMaintenanceProcedureOperationParameters,
                kwargs={"resultFrom": resultFrom, "resultSize": resultSize, "order": order, "tokenData": tokenData},
            )
        )

    @debugLogger
    def _constructObject(self, *args, **kwargs) -> StandardMaintenanceProcedureOperationParameter:
        kwargs[BaseApplicationService.DOMAIN_MODEL_CLASS] = StandardMaintenanceProcedureOperationParameter
        return super()._constructObject(*args, **kwargs)
