"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from src.domain_model.organization.OrganizationRepository import OrganizationRepository
from src.domain_model.resource.exception.DomainModelException import (
    DomainModelException,
)
from src.domain_model.resource.exception.ProcessBulkDomainException import (
    ProcessBulkDomainException,
)
from src.domain_model.resource.exception.SubcontractorCategoryDoesNotExistException import (
    SubcontractorCategoryDoesNotExistException,
)
from src.domain_model.subcontractor.Subcontractor import Subcontractor
from src.domain_model.subcontractor.category.SubcontractorCategory import (
    SubcontractorCategory,
)
from src.domain_model.subcontractor.SubcontractorRepository import (
    SubcontractorRepository,
)
from src.domain_model.subcontractor.SubcontractorService import SubcontractorService
from src.domain_model.resource.exception.UpdateSubcontractorFailedException import (
    UpdateSubcontractorFailedException,
)
from src.domain_model.token.TokenService import TokenService
from src.domain_model.util.DomainModelAttributeValidator import (
    DomainModelAttributeValidator,
)
from src.resource.logging.decorator import debugLogger
from src.domain_model.subcontractor.category.SubcontractorCategoryRepository import (
    SubcontractorCategoryRepository,
)


class SubcontractorApplicationService:
    def __init__(
        self,
        repo: SubcontractorRepository,
        orgRepo: OrganizationRepository,
        subcontractorService: SubcontractorService,
        subcontractorCategoryRepo: SubcontractorCategoryRepository,
    ):
        self._repo = repo
        self._orgRepo = orgRepo
        self._subcontractorService = subcontractorService
        self._subcontractorCategoryRepo = subcontractorCategoryRepo

    @debugLogger
    def newId(self):
        return Subcontractor.createFrom(skipValidation=True).id()

    @debugLogger
    def createSubcontractor(
        self,
        id: str = None,
        companyName: str = None,
        websiteUrl: str = None,
        contactPerson: str = None,
        email: str = None,
        phoneNumber: str = None,
        addressOne: str = None,
        addressTwo: str = None,
        subcontractorCategoryId: str = None,
        description: str = None,
        cityId: int = None,
        countryId: int = None,
        stateId: str = None,
        postalCode: str = None,
        objectOnly: bool = False,
        token: str = "",
    ):
        obj: Subcontractor = self.constructObject(
            id=id,
            companyName=companyName,
            websiteUrl=websiteUrl,
            contactPerson=contactPerson,
            email=email,
            phoneNumber=phoneNumber,
            addressOne=addressOne,
            addressTwo=addressTwo,
            subcontractorCategoryId=subcontractorCategoryId,
            description=description,
            cityId=cityId,
            countryId=countryId,
            stateId=stateId,
            postalCode=postalCode,
        )
        tokenData = TokenService.tokenDataFromToken(token=token)

        if subcontractorCategoryId is not None and subcontractorCategoryId != "":
            subcontractorCategory = (
                self._subcontractorCategoryRepo.subcontractorCategoryById(
                    id=subcontractorCategoryId
                )
            )
            if subcontractorCategory is None:
                raise SubcontractorCategoryDoesNotExistException(
                    f"id = {subcontractorCategoryId}"
                )

        return self._subcontractorService.createSubcontractor(
            obj=obj, objectOnly=objectOnly, tokenData=tokenData
        )

    @debugLogger
    def updateSubcontractor(
        self,
        id: str,
        companyName: str = None,
        websiteUrl: str = None,
        contactPerson: str = None,
        email: str = None,
        phoneNumber: str = None,
        addressOne: str = None,
        addressTwo: str = None,
        subcontractorCategoryId: str = None,
        description: str = None,
        cityId: int = None,
        countryId: int = None,
        stateId: str = None,
        postalCode: str = None,
        token: str = None,
    ):
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: Subcontractor = self._repo.subcontractorById(id=id)
            obj: Subcontractor = self.constructObject(
                id=id,
                companyName=companyName,
                websiteUrl=websiteUrl,
                contactPerson=contactPerson,
                email=email,
                phoneNumber=phoneNumber,
                addressOne=addressOne,
                addressTwo=addressTwo,
                subcontractorCategoryId=subcontractorCategoryId,
                description=description,
                cityId=cityId,
                countryId=countryId,
                stateId=stateId,
                postalCode=postalCode,
                _sourceObject=oldObject,
            )
            self._subcontractorService.updateSubcontractor(
                oldObject=oldObject, newObject=obj, tokenData=tokenData
            )
        except Exception as e:
            raise UpdateSubcontractorFailedException(message=str(e))

    @debugLogger
    def deleteSubcontractor(self, id: str, token: str = None):
        tokenData = TokenService.tokenDataFromToken(token=token)
        obj = self._repo.subcontractorById(id=id)
        self._subcontractorService.deleteSubcontractor(obj=obj, tokenData=tokenData)

    @debugLogger
    def assignSubcontractor(self, id: str, organizationId: str, token: str = ""):
        tokenData = TokenService.tokenDataFromToken(token=token)
        subcontractor = self._repo.subcontractorById(id=id)
        organization = self._orgRepo.organizationById(id=organizationId)
        self._subcontractorService.assignSubcontractor(
            subcontractor=subcontractor, organization=organization, tokenData=tokenData
        )

    @debugLogger
    def revokeSubcontractor(self, id: str, organizationId: str, token: str = ""):
        tokenData = TokenService.tokenDataFromToken(token=token)
        subcontractor = self._repo.subcontractorById(id=id)
        organization = self._orgRepo.organizationById(id=organizationId)
        self._subcontractorService.revokeSubcontractor(
            subcontractor=subcontractor, organization=organization, tokenData=tokenData
        )

    @debugLogger
    def bulkCreate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(
                    domainModelObject=self.constructObject(skipValidation=True),
                    attributeDictionary=objListParamsItem,
                )
                objList.append(
                    self.constructObject(
                        id=objListParamsItem["subcontractor_id"],
                        companyName=objListParamsItem["company_name"],
                        websiteUrl=objListParamsItem["website_url"],
                        contactPerson=objListParamsItem["contact_person"],
                        email=objListParamsItem["email"],
                        phoneNumber=objListParamsItem["phone_number"],
                        addressOne=objListParamsItem["address_one"],
                        addressTwo=objListParamsItem["address_two"],
                        subcontractorCategoryId=objListParamsItem[
                            "subcontractor_category_id"
                        ],
                        description=objListParamsItem["description"],
                        cityId=objListParamsItem["city_id"],
                        countryId=objListParamsItem["country_id"],
                        stateId=objListParamsItem["state_id"],
                        postalCode=objListParamsItem["postal_code"],
                    )
                )
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._subcontractorService.bulkCreate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkDelete(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(
                    domainModelObject=self.constructObject(skipValidation=True),
                    attributeDictionary=objListParamsItem,
                )
                objList.append(
                    self.constructObject(
                        id=objListParamsItem["subcontractor_id"], skipValidation=True
                    )
                )
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._subcontractorService.bulkDelete(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkUpdate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(
                    domainModelObject=self.constructObject(skipValidation=True),
                    attributeDictionary=objListParamsItem,
                )
                oldObject: Subcontractor = self._repo.subcontractorById(
                    id=objListParamsItem["subcontractor_id"]
                )
                newObject = self.constructObject(
                    id=objListParamsItem["subcontractor_id"],
                    companyName=objListParamsItem["company_name"]
                    if "company_name" in objListParamsItem
                    else None,
                    websiteUrl=objListParamsItem["website_url"]
                    if "website_url" in objListParamsItem
                    else None,
                    contactPerson=objListParamsItem["contact_person"]
                    if "contact_person" in objListParamsItem
                    else None,
                    email=objListParamsItem["email"]
                    if "email" in objListParamsItem
                    else None,
                    phoneNumber=objListParamsItem["phone_number"]
                    if "phone_number" in objListParamsItem
                    else None,
                    addressOne=objListParamsItem["address_one"]
                    if "address_one" in objListParamsItem
                    else None,
                    addressTwo=objListParamsItem["address_two"]
                    if "address_two" in objListParamsItem
                    else None,
                    subcontractorCategoryId=objListParamsItem[
                        "subcontractor_category_id"
                    ]
                    if "subcontractor_category_id" in objListParamsItem
                    else None,
                    description=objListParamsItem["description"]
                    if "description" in objListParamsItem
                    else None,
                    cityId=objListParamsItem["city_id"]
                    if "city_id" in objListParamsItem
                    else None,
                    countryId=objListParamsItem["country_id"]
                    if "country_id" in objListParamsItem
                    else None,
                    stateId=objListParamsItem["state_id"]
                    if "state_id" in objListParamsItem
                    else None,
                    postalCode=objListParamsItem["postal_code"]
                    if "postal_code" in objListParamsItem
                    else None,
                    _sourceObject=oldObject,
                )
                objList.append(
                    (newObject, oldObject),
                )
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._subcontractorService.bulkUpdate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def subcontractorById(self, id: str, token: str = None) -> Subcontractor:
        subcontractor = self._repo.subcontractorById(id=id)
        tokenData = TokenService.tokenDataFromToken(token=token)
        return subcontractor

    @debugLogger
    def subcontractors(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._subcontractorService.subcontractors(
            tokenData=tokenData,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def subcontractorsByOrganizationId(
        self,
        organizationId: str,
        resultFrom: int = 0,
        resultSize: int = 100,
        token: str = "",
        order: List[dict] = None,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._subcontractorService.subcontractorsByOrganizationId(
            organizationId=organizationId,
            tokenData=tokenData,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def subcontractorsBySubcontractorCategoryId(
        self,
        subcontractorCategoryId: str = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._subcontractorService.subcontractorsBySubcontractorCategoryId(
            tokenData=tokenData,
            subcontractorCategoryId=subcontractorCategoryId,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def constructObject(
        self,
        id: str = None,
        companyName: str = None,
        websiteUrl: str = None,
        contactPerson: str = None,
        email: str = None,
        phoneNumber: str = None,
        addressOne: str = None,
        addressTwo: str = None,
        subcontractorCategoryId: str = None,
        description: str = None,
        cityId: int = None,
        countryId: int = None,
        stateId: str = None,
        postalCode: str = None,
        skipValidation: bool = False,
        _sourceObject: Subcontractor = None,
    ) -> Subcontractor:
        if _sourceObject is not None:
            return Subcontractor.createFrom(
                id=id,
                skipValidation=skipValidation,
                companyName=companyName
                if companyName is not None
                else _sourceObject.companyName(),
                websiteUrl=websiteUrl
                if websiteUrl is not None
                else _sourceObject.websiteUrl(),
                contactPerson=contactPerson
                if contactPerson is not None
                else _sourceObject.contactPerson(),
                email=email if email is not None else _sourceObject.email(),
                phoneNumber=phoneNumber
                if phoneNumber is not None
                else _sourceObject.phoneNumber(),
                addressOne=addressOne
                if addressOne is not None
                else _sourceObject.addressOne(),
                addressTwo=addressTwo
                if addressTwo is not None
                else _sourceObject.addressTwo(),
                subcontractorCategoryId=subcontractorCategoryId
                if subcontractorCategoryId is not None
                else _sourceObject.subcontractorCategoryId(),
                description=description
                if description is not None
                else _sourceObject.description(),
                cityId=cityId if cityId is not None else _sourceObject.cityId(),
                countryId=countryId
                if countryId is not None
                else _sourceObject.countryId(),
                stateId=stateId if stateId is not None else _sourceObject.stateId(),
                postalCode=postalCode
                if postalCode is not None
                else _sourceObject.postalCode(),
            )
        else:
            return Subcontractor.createFrom(
                id=id,
                skipValidation=skipValidation,
                companyName=companyName,
                websiteUrl=websiteUrl,
                contactPerson=contactPerson,
                email=email,
                phoneNumber=phoneNumber,
                addressOne=addressOne,
                addressTwo=addressTwo,
                subcontractorCategoryId=subcontractorCategoryId,
                description=description,
                cityId=cityId,
                countryId=countryId,
                stateId=stateId,
                postalCode=postalCode,
            )
