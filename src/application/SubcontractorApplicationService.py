"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from src.application.BaseApplicationService import BaseApplicationService
from src.domain_model.organization.OrganizationRepository import OrganizationRepository
from src.domain_model.resource.exception.DomainModelException import (
    DomainModelException,
)
from src.domain_model.resource.exception.ProcessBulkDomainException import (
    ProcessBulkDomainException,
)
from src.domain_model.resource.exception.SubcontractorCategoryDoesNotExistException import (
    SubcontractorCategoryDoesNotExistException,
)
from src.domain_model.resource.exception.UpdateSubcontractorFailedException import (
    UpdateSubcontractorFailedException,
)
from src.domain_model.subcontractor.Subcontractor import Subcontractor
from src.domain_model.subcontractor.SubcontractorRepository import (
    SubcontractorRepository,
)
from src.domain_model.subcontractor.SubcontractorService import SubcontractorService
from src.domain_model.subcontractor.category.SubcontractorCategoryRepository import (
    SubcontractorCategoryRepository,
)
from src.domain_model.token.TokenService import TokenService
from src.domain_model.util.DomainModelAttributeValidator import (
    DomainModelAttributeValidator,
)
from src.resource.common.Util import Util
from src.resource.logging.decorator import debugLogger


class SubcontractorApplicationService(BaseApplicationService):
    def __init__(
        self,
        repo: SubcontractorRepository,
        orgRepo: OrganizationRepository,
        subcontractorService: SubcontractorService,
        subcontractorCategoryRepo: SubcontractorCategoryRepository,
    ):
        self._repo = repo
        self._orgRepo = orgRepo
        self._subcontractorService = subcontractorService
        self._subcontractorCategoryRepo = subcontractorCategoryRepo

    @debugLogger
    def newId(self):
        return Subcontractor.createFrom(skipValidation=True).id()

    @debugLogger
    def createSubcontractor(self, token: str = None, objectOnly: bool = False, **kwargs):
        obj: Subcontractor = self._constructObject(**kwargs)
        tokenData = TokenService.tokenDataFromToken(token=token)

        if kwargs['subcontractorCategoryId'] is None:
            raise SubcontractorCategoryDoesNotExistException(f"subcontractor category id = {kwargs['subcontractorCategoryId']}")

        if kwargs['subcontractorCategoryId'] is not None and kwargs['subcontractorCategoryId'] != "":
            subcontractorCategory = self._subcontractorCategoryRepo.subcontractorCategoryById(
                id=kwargs['subcontractorCategoryId']
            )
            if subcontractorCategory is None:
                raise SubcontractorCategoryDoesNotExistException(f"subcontractor category id = {kwargs['subcontractorCategoryId']}")

        return self._subcontractorService.createSubcontractor(obj=obj, objectOnly=objectOnly, tokenData=tokenData)

    @debugLogger
    def updateSubcontractor(self, token: str = None, **kwargs):
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: Subcontractor = self._repo.subcontractorById(id=kwargs["id"])
            obj: Subcontractor = self._constructObject(_sourceObject=oldObject, **kwargs)
            self._subcontractorService.updateSubcontractor(oldObject=oldObject, newObject=obj, tokenData=tokenData)
        except Exception as e:
            raise UpdateSubcontractorFailedException(message=str(e))

    @debugLogger
    def deleteSubcontractor(self, id: str, token: str = None):
        tokenData = TokenService.tokenDataFromToken(token=token)
        obj = self._repo.subcontractorById(id=id)
        self._subcontractorService.deleteSubcontractor(obj=obj, tokenData=tokenData)

    @debugLogger
    def assignSubcontractor(self, id: str, organizationId: str, token: str = ""):
        tokenData = TokenService.tokenDataFromToken(token=token)
        subcontractor = self._repo.subcontractorById(id=id)
        organization = self._orgRepo.organizationById(id=organizationId)
        self._subcontractorService.assignSubcontractor(
            subcontractor=subcontractor, organization=organization, tokenData=tokenData
        )

    @debugLogger
    def revokeSubcontractor(self, id: str, organizationId: str, token: str = ""):
        tokenData = TokenService.tokenDataFromToken(token=token)
        subcontractor = self._repo.subcontractorById(id=id)
        organization = self._orgRepo.organizationById(id=organizationId)
        self._subcontractorService.revokeSubcontractor(
            subcontractor=subcontractor, organization=organization, tokenData=tokenData
        )

    @debugLogger
    def bulkCreate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(
                    domainModelObject=self._constructObject(skipValidation=True),
                    attributeDictionary=objListParamsItem,
                )
                objList.append(
                    self._constructObject(
                        **Util.snakeCaseToLowerCameCaseDict(
                            objListParamsItem, keyReplacements=[{"source": "subcontractor_id", "target": "id"}]
                        )
                    )
                )
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        _tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._subcontractorService.bulkCreate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkDelete(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(
                    domainModelObject=self._constructObject(skipValidation=True),
                    attributeDictionary=objListParamsItem,
                )
                objList.append(self._constructObject(id=objListParamsItem["subcontractor_id"], skipValidation=True))
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        _tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._subcontractorService.bulkDelete(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkUpdate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(
                    domainModelObject=self._constructObject(skipValidation=True),
                    attributeDictionary=objListParamsItem,
                )
                oldObject: Subcontractor = self._repo.subcontractorById(id=objListParamsItem["subcontractor_id"])
                newObject = self._constructObject(
                    **Util.snakeCaseToLowerCameCaseDict(
                        objListParamsItem,
                        keyReplacements=[{"source": "subcontractor_id", "target": "id"}]
                    ),
                    _sourceObject=oldObject,
                )
                objList.append(
                    (newObject, oldObject),
                )
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        _tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._subcontractorService.bulkUpdate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def subcontractorById(self, id: str, token: str = None) -> Subcontractor:
        subcontractor = self._repo.subcontractorById(id=id)
        _tokenData = TokenService.tokenDataFromToken(token=token)
        return subcontractor

    @debugLogger
    def subcontractors(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._subcontractorService.subcontractors(
            tokenData=tokenData,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def subcontractorsByOrganizationId(
        self,
        organizationId: str,
        resultFrom: int = 0,
        resultSize: int = 100,
        token: str = "",
        order: List[dict] = None,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._subcontractorService.subcontractorsByOrganizationId(
            organizationId=organizationId,
            tokenData=tokenData,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def subcontractorsBySubcontractorCategoryId(
        self,
        subcontractorCategoryId: str = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._subcontractorService.subcontractorsBySubcontractorCategoryId(
            tokenData=tokenData,
            subcontractorCategoryId=subcontractorCategoryId,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def _constructObject(self, *args, **kwargs) -> Subcontractor:
        kwargs[BaseApplicationService.APPLICATION_SERVICE_CLASS] = Subcontractor
        return super()._constructObject(*args, **kwargs)
