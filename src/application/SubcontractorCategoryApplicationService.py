"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from src.application.BaseApplicationService import BaseApplicationService
from src.domain_model.resource.exception.DomainModelException import (
    DomainModelException,
)
from src.domain_model.resource.exception.ProcessBulkDomainException import (
    ProcessBulkDomainException,
)
from src.domain_model.resource.exception.UpdateSubcontractorCategoryFailedException import (
    UpdateSubcontractorCategoryFailedException,
)
from src.domain_model.subcontractor.category.SubcontractorCategory import (
    SubcontractorCategory,
)
from src.domain_model.subcontractor.category.SubcontractorCategoryRepository import (
    SubcontractorCategoryRepository,
)
from src.domain_model.subcontractor.category.SubcontractorCategoryService import (
    SubcontractorCategoryService,
)
from src.domain_model.token.TokenService import TokenService
from src.domain_model.util.DomainModelAttributeValidator import (
    DomainModelAttributeValidator,
)
from src.resource.common.Util import Util
from src.resource.logging.decorator import debugLogger


class SubcontractorCategoryApplicationService(BaseApplicationService):
    def __init__(
        self,
        repo: SubcontractorCategoryRepository,
        subcontractorCategoryService: SubcontractorCategoryService,
    ):
        self._repo = repo
        self._subcontractorCategoryService = subcontractorCategoryService

    @debugLogger
    def newId(self):
        return SubcontractorCategory.createFrom(skipValidation=True).id()

    @debugLogger
    def createSubcontractorCategory(self, token: str = None, objectOnly: bool = False, **kwargs):
        obj: SubcontractorCategory = self._constructObject(**kwargs)
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._subcontractorCategoryService.createSubcontractorCategory(
            obj=obj, objectOnly=objectOnly, tokenData=tokenData
        )

    @debugLogger
    def updateSubcontractorCategory(self, token: str = None, **kwargs):
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: SubcontractorCategory = self._repo.subcontractorCategoryById(id=kwargs["id"])
            obj: SubcontractorCategory = self._constructObject(_sourceObject=oldObject, **kwargs)
            self._subcontractorCategoryService.updateSubcontractorCategory(
                oldObject=oldObject, newObject=obj, tokenData=tokenData
            )
        except Exception as e:
            raise UpdateSubcontractorCategoryFailedException(message=str(e))

    @debugLogger
    def deleteSubcontractorCategory(self, id: str, token: str = None):
        tokenData = TokenService.tokenDataFromToken(token=token)
        obj = self._repo.subcontractorCategoryById(id=id)
        self._subcontractorCategoryService.deleteSubcontractorCategory(obj=obj, tokenData=tokenData)

    @debugLogger
    def bulkCreate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(
                    domainModelObject=self._constructObject(skipValidation=True),
                    attributeDictionary=objListParamsItem,
                )
                objList.append(
                    self._constructObject(
                        **Util.snakeCaseToLowerCameCaseDict(
                            objListParamsItem, keyReplacements=[{"source": "subcontractorCategory_id", "target": "id"}]
                        )
                    )
                )
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        _tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._subcontractorCategoryService.bulkCreate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkDelete(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(
                    domainModelObject=self._constructObject(skipValidation=True),
                    attributeDictionary=objListParamsItem,
                )
                objList.append(
                    self._constructObject(
                        id=objListParamsItem["subcontractorCategory_id"],
                        skipValidation=True,
                    )
                )
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        _tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._subcontractorCategoryService.bulkDelete(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkUpdate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(
                    domainModelObject=self._constructObject(skipValidation=True),
                    attributeDictionary=objListParamsItem,
                )
                oldObject: SubcontractorCategory = self._repo.subcontractorCategoryById(
                    id=objListParamsItem["subcontractorCategory_id"]
                )
                newObject = self._constructObject(
                    **Util.snakeCaseToLowerCameCaseDict(
                        objListParamsItem,
                        keyReplacements=[{"source": "subcontractorCategory_id", "target": "id"}]
                    ),
                    _sourceObject=oldObject,
                )
                objList.append(
                    (newObject, oldObject),
                )
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        _tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._subcontractorCategoryService.bulkUpdate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def subcontractorCategoryById(self, id: str, token: str = None) -> SubcontractorCategory:
        subcontractorCategory = self._repo.subcontractorCategoryById(id=id)
        TokenService.tokenDataFromToken(token=token)
        return subcontractorCategory

    @debugLogger
    def subcontractorCategories(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._subcontractorCategoryService.subcontractorCategories(
            tokenData=tokenData,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def _constructObject(self, *args, **kwargs) -> SubcontractorCategory:
        kwargs[BaseApplicationService.APPLICATION_SERVICE_CLASS] = SubcontractorCategory
        return super()._constructObject(*args, **kwargs)
