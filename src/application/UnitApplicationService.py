"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from src.domain_model.project.unit.Unit import Unit
from src.domain_model.project.unit.UnitRepository import UnitRepository
from src.domain_model.project.unit.UnitService import UnitService
from src.domain_model.resource.exception.UpdateUnitFailedException import UpdateUnitFailedException
from src.domain_model.token.TokenService import TokenService
from src.resource.logging.decorator import debugLogger


class UnitApplicationService:
    def __init__(self, repo: UnitRepository, unitService: UnitService):
        self._repo = repo
        self._unitService = unitService

    @debugLogger
    def newId(self):
        return Unit.createFrom(skipValidation=True).id()

    @debugLogger
    def createUnit(self, id: str = None, name: str = None, objectOnly: bool = False, token: str = ''):
        obj: Unit = self.constructObject(id=id, name=name)
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._unitService.createUnit(obj=obj, objectOnly=objectOnly, tokenData=tokenData)

    @debugLogger
    def updateUnit(self, id: str, name: str = None, token: str = None):
        obj: Unit = self.constructObject(id=id, name=name)
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: Unit = self._repo.unitById(id=id)
            self._unitService.updateUnit(oldObject=oldObject, newObject=obj, tokenData=tokenData)
        except Exception as e:
            raise UpdateUnitFailedException(message=str(e))

    @debugLogger
    def deleteUnit(self, id: str, token: str = None):
        tokenData = TokenService.tokenDataFromToken(token=token)
        obj = self._repo.unitById(id=id)
        self._unitService.deleteUnit(obj=obj, tokenData=tokenData)

    @debugLogger
    def unitById(self, id: str, token: str = None) -> Unit:
        unit = self._repo.unitById(id=id)
        TokenService.tokenDataFromToken(token=token)
        return unit

    @debugLogger
    def units(self, resultFrom: int = 0, resultSize: int = 100, order: List[dict] = None,
                        token: str = None) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._unitService.units(tokenData=tokenData, resultFrom=resultFrom, resultSize=resultSize, order=order)

    @debugLogger
    def constructObject(self, id: str, name: str = None) -> Unit:
        return Unit.createFrom(id=id, name=name)
