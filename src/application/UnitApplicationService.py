"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from src.application.BaseApplicationService import BaseApplicationService
from src.domain_model.project.unit.Unit import Unit
from src.domain_model.project.unit.UnitRepository import UnitRepository
from src.domain_model.project.unit.UnitService import UnitService
from src.domain_model.resource.exception.DomainModelException import DomainModelException
from src.domain_model.resource.exception.ProcessBulkDomainException import ProcessBulkDomainException
from src.domain_model.resource.exception.UpdateUnitFailedException import (
    UpdateUnitFailedException,
)
from src.domain_model.token.TokenService import TokenService
from src.domain_model.util.DomainModelAttributeValidator import DomainModelAttributeValidator
from src.resource.logging.decorator import debugLogger


class UnitApplicationService(BaseApplicationService):
    def __init__(self, repo: UnitRepository, unitService: UnitService):
        self._repo = repo
        self._unitService = unitService

    @debugLogger
    def newId(self):
        return Unit.createFrom(skipValidation=True).id()

    @debugLogger
    def createUnit(
        self,
        id: str = None,
        name: str = None,
        objectOnly: bool = False,
        token: str = "",
    ):
        obj: Unit = self._constructObject(id=id, name=name)
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._unitService.createUnit(obj=obj, objectOnly=objectOnly, tokenData=tokenData)

    @debugLogger
    def updateUnit(self, id: str, name: str = None, token: str = None):
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: Unit = self._repo.unitById(id=id)
            obj: Unit = self._constructObject(id=id, name=name, _sourceObject=oldObject)
            self._unitService.updateUnit(oldObject=oldObject, newObject=obj, tokenData=tokenData)
        except Exception as e:
            raise UpdateUnitFailedException(message=str(e))

    @debugLogger
    def deleteUnit(self, id: str, token: str = None):
        tokenData = TokenService.tokenDataFromToken(token=token)
        obj = self._repo.unitById(id=id)
        self._unitService.deleteUnit(obj=obj, tokenData=tokenData)

    @debugLogger
    def bulkCreate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(
                    domainModelObject=self._constructObject(skipValidation=True), attributeDictionary=objListParamsItem
                )
                objList.append(self._constructObject(id=objListParamsItem["unit_id"], name=objListParamsItem["name"]))
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        _tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._unitService.bulkCreate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkDelete(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(
                    domainModelObject=self._constructObject(skipValidation=True), attributeDictionary=objListParamsItem
                )
                objList.append(self._constructObject(id=objListParamsItem["unit_id"], skipValidation=True))
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        _tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._unitService.bulkDelete(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkUpdate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(
                    domainModelObject=self._constructObject(skipValidation=True), attributeDictionary=objListParamsItem
                )
                oldObject: Unit = self._repo.unitById(id=objListParamsItem["unit_id"])
                newObject = self._constructObject(
                    id=objListParamsItem["unit_id"],
                    name=objListParamsItem["name"] if "name" in objListParamsItem else None,
                    _sourceObject=oldObject,
                )
                objList.append(
                    (newObject, oldObject),
                )
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        _tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._unitService.bulkUpdate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def unitById(self, id: str, token: str = None) -> Unit:
        unit = self._repo.unitById(id=id)
        TokenService.tokenDataFromToken(token=token)
        return unit

    @debugLogger
    def units(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._unitService.units(
            tokenData=tokenData,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def _constructObject(self, *args, **kwargs) -> Unit:
        kwargs[BaseApplicationService.APPLICATION_SERVICE_CLASS] = Unit
        return super()._constructObject(*args, **kwargs)
