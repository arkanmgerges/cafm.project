"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List


from src.application.BaseApplicationService import BaseApplicationService
from src.application.lookup.daily_check_procedure.DailyCheckProcedureRepository import (
    DailyCheckProcedureRepository,
)
from src.domain_model.resource.exception.DomainModelException import (
    DomainModelException,
)
from src.domain_model.resource.exception.ProcessBulkDomainException import (
    ProcessBulkDomainException,
)
from src.domain_model.project.daily_check.procedure.DailyCheckProcedure import DailyCheckProcedure
from src.domain_model.token.TokenService import TokenService
from src.domain_model.util.DomainModelAttributeValidator import (
    DomainModelAttributeValidator,
)
from src.resource.common.Util import Util
from src.resource.logging.decorator import debugLogger

class DailyCheckProcedureApplicationService(BaseApplicationService):
    def __init__(self, repo: DailyCheckProcedureRepository):
        self._repo = repo

    @debugLogger
    def createDailyCheckProcedure(self, *args, **kwargs):
        _tokenData = TokenService.tokenDataFromToken(token=kwargs["token"])
        obj: DailyCheckProcedure = self._constructObject(*args, **kwargs)
        self._repo.save(obj=obj)

    @debugLogger
    def updateDailyCheckProcedure(self, *args, **kwargs):
        _tokenData = TokenService.tokenDataFromToken(token=kwargs["token"])
        kwargs["skipValidation"] = True
        obj: DailyCheckProcedure = self._constructObject(*args, **kwargs)
        self._repo.save(obj=obj)

    @debugLogger
    def deleteDailyCheckProcedure(self, *args, **kwargs):
        _tokenData = TokenService.tokenDataFromToken(token=kwargs["token"])
        kwargs["skipValidation"] = True
        obj: DailyCheckProcedure = self._constructObject(*args, **kwargs)
        self._repo.delete(obj=obj)
    @debugLogger
    def lookup(self, *_args,
               resultFrom: int,
               resultSize: int,
               orders: List[dict],
               filters: List[dict],
               **_kwargs):
        return self._repo.lookup(resultFrom=resultFrom, resultSize=resultSize, orders=orders, filters=filters)

    @debugLogger
    def bulkCreateDailyCheckProcedure(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(
                    domainModelObject=self._constructObject(skipValidation=True),
                    attributeDictionary=objListParamsItem,
                )
                objList.append(
                    self._constructObject(
                        **Util.snakeCaseToLowerCameCaseDict(
                            objListParamsItem,
                            keyReplacements=[
                                {"source": "_id", "target": "id"}
                            ],
                        )
                    )
                )
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        _tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            # todo add bulk create to repo
            # self._Service.bulkCreate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def _constructObject(self, *args, **kwargs) -> DailyCheckProcedure:
        kwargs[BaseApplicationService.DOMAIN_MODEL_CLASS] = DailyCheckProcedure
        return super()._constructObject(*args, **kwargs)
