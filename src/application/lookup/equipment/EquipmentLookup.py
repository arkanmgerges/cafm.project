"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""


from src.application.lookup.common.model_data.BaseLookupModel import BaseLookupModel
from src.application.lookup.common.model_data.LookupModelAttributeData import (
    LookupModelAttributeData,
)
from src.domain_model.common.HasToMap import HasToMap
from src.application.lookup.equipment.EquipmentProjectCategory import (
    EquipmentProjectCategory,
)
from src.application.lookup.equipment.EquipmentCategoryGroup import (
    EquipmentCategoryGroup,
)
from src.application.lookup.equipment.Building import Building
from src.application.lookup.equipment.BuildingLevel import BuildingLevel
from src.application.lookup.equipment.BuildingLevelRoom import BuildingLevelRoom
from src.application.lookup.equipment.Manufacturer import Manufacturer
from src.application.lookup.equipment.EquipmentModel import EquipmentModel
from src.application.lookup.equipment.MaintenanceProcedure import MaintenanceProcedure


class EquipmentLookup(HasToMap, BaseLookupModel):
    __slots__ = [
        "id",
        "name",
        "quantity",
        "projectId",
        "equipmentProjectCategory",
        "equipmentCategoryGroup",
        "building",
        "buildingLevel",
        "buildingLevelRoom",
        "manufacturer",
        "equipmentModel",
        "maintenanceProcedures",
    ]

    def __init__(self, **kwargs):
        for k, v in kwargs.items():
            setattr(self, k, v)

    def toMap(self) -> dict:
        return super()._toMap(EquipmentLookup.attributes())

    def _attributeValue(self, classAttribute):
        return super()._attributeValue(classAttribute)

    @classmethod
    def attributes(cls):
        return {
            "id": LookupModelAttributeData(),
            "name": LookupModelAttributeData(),
            "quantity": LookupModelAttributeData(dataType=int, protoDataType=int),
            "projectId": LookupModelAttributeData(),
            "equipmentProjectCategory": LookupModelAttributeData(
                dataType=EquipmentProjectCategory, isClass=True
            ),
            "equipmentCategoryGroup": LookupModelAttributeData(
                dataType=EquipmentCategoryGroup, isClass=True
            ),
            "building": LookupModelAttributeData(dataType=Building, isClass=True),
            "buildingLevel": LookupModelAttributeData(
                dataType=BuildingLevel, isClass=True
            ),
            "buildingLevelRoom": LookupModelAttributeData(
                dataType=BuildingLevelRoom, isClass=True
            ),
            "manufacturer": LookupModelAttributeData(
                dataType=Manufacturer, isClass=True
            ),
            "equipmentModel": LookupModelAttributeData(
                dataType=EquipmentModel, isClass=True
            ),
            "maintenanceProcedures": LookupModelAttributeData(
                dataType=MaintenanceProcedure, isClass=True, isArray=True
            ),
        }

    def __repr__(self):
        return f"<{self.__module__} object at {hex(id(self))}> {self.toMap()}"

    def __str__(self) -> str:
        return f"<{self.__module__} object at {hex(id(self))}> {self.toMap()}"
