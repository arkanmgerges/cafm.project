"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""



from src.application.lookup.model_data.BaseLookupModel import BaseLookupModel
from src.application.lookup.model_data.LookupModelAttributeData import LookupModelAttributeData
from src.domain_model.common.HasToMap import HasToMap
from src.application.lookup.equipment.EquipmentProjectCategoryLookup import EquipmentProjectCategoryLookup
from src.application.lookup.equipment.EquipmentCategoryLookup import EquipmentCategoryLookup
from src.application.lookup.equipment.EquipmentCategoryGroupLookup import EquipmentCategoryGroupLookup
from src.application.lookup.equipment.BuildingLookup import BuildingLookup
from src.application.lookup.equipment.BuildingLevelLookup import BuildingLevelLookup
from src.application.lookup.equipment.BuildingLevelRoomLookup import BuildingLevelRoomLookup
from src.application.lookup.equipment.ManufacturerLookup import ManufacturerLookup
from src.application.lookup.equipment.EquipmentModelLookup import EquipmentModelLookup
from src.application.lookup.equipment.EquipmentMaintenanceProcedureLookup import MaintenanceProcedureLookup

class EquipmentLookup(HasToMap, BaseLookupModel):
    __slots__ = [
        "id",
        "name",
        "quantity",
        "projectId",
        "equipmentProjectCategory",
        "equipmentCategory",
        "equipmentCategoryGroup",
        "building",
        "buildingLevel",
        "buildingLevelRoom",
        "manufacturer",
        "equipmentModel",
        "maintenanceProcedures",
    ]

    def __init__(self, **kwargs):
        for k, v in kwargs.items():
            setattr(self, k, v)

    def toMap(self) -> dict:
        return super()._toMap(EquipmentLookup.attributes())

    def _attributeValue(self, classAttribute):
        return super()._attributeValue(classAttribute)

    @classmethod
    def attributes(cls):
        return {
            "id":LookupModelAttributeData(),
            "name":LookupModelAttributeData(),
            "quantity":LookupModelAttributeData(),
            "projectId":LookupModelAttributeData(),
            "equipmentProjectCategory":LookupModelAttributeData(
                    dataType=EquipmentProjectCategoryLookup, isLookupClass=True
                ),
            "equipmentCategory":LookupModelAttributeData(
                    dataType=EquipmentCategoryLookup, isLookupClass=True
                ),
            "equipmentCategoryGroup":LookupModelAttributeData(
                    dataType=EquipmentCategoryGroupLookup, isLookupClass=True
                ),
            "building":LookupModelAttributeData(
                    dataType=BuildingLookup, isLookupClass=True
                ),
            "buildingLevel":LookupModelAttributeData(
                    dataType=BuildingLevelLookup, isLookupClass=True
                ),
            "buildingLevelRoom":LookupModelAttributeData(
                    dataType=BuildingLevelRoomLookup, isLookupClass=True
                ),
            "manufacturer":LookupModelAttributeData(
                    dataType=ManufacturerLookup, isLookupClass=True
                ),
            "equipmentModel":LookupModelAttributeData(
                    dataType=EquipmentModelLookup, isLookupClass=True
                ),
            "maintenanceProcedures":LookupModelAttributeData(
                    dataType=MaintenanceProcedureLookup, isLookupClass=True
                ),
        }

    def __repr__(self):
        return f"<{self.__module__} object at {hex(id(self))}> {self.toMap()}"

    def __str__(self) -> str:
        return f"<{self.__module__} object at {hex(id(self))}> {self.toMap()}"
