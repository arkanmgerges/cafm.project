"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
from abc import ABC, abstractmethod
from typing import List
from src.domain_model.project.daily_check.procedure.DailyCheckProcedure import DailyCheckProcedure
from src.domain_model.token.TokenData import TokenData


class DailyCheckProcedureRepository(ABC):
    @abstractmethod
    def save(self, obj: DailyCheckProcedure, tokenData: TokenData):
        """Save daily check procedure

        Args:
            obj (DailyCheckProcedure): The daily check procedure that needs to be saved
            tokenData (TokenData): Token data that has info about the token

        """

    @abstractmethod
    def createDailyCheckProcedure(self, obj: DailyCheckProcedure, tokenData: TokenData):
        """Create daily check procedure

        Args:
            obj (DailyCheckProcedure): The daily check procedure that needs to be created
            tokenData (TokenData): Token data that has info about the token

        """

    @abstractmethod
    def deleteDailyCheckProcedure(self, obj: DailyCheckProcedure, tokenData: TokenData) -> None:
        """Delete a daily check procedure

        Args:
            obj (DailyCheckProcedure): The daily check procedure that needs to be deleted
            tokenData (TokenData): Token data used for deleting the daily check procedure

        :raises:
            `ObjectCouldNotNotBeDeletedException
            <src.domain_model.resource.exception.ObjectCouldNotNotBeDeletedException>`
            Raise an exception if the daily check procedure could not be deleted
        """

    @abstractmethod
    def updateDailyCheckProcedure(self, obj: DailyCheckProcedure, tokenData: TokenData) -> None:
        """Update a daily check procedure

        Args:
            obj (DailyCheckProcedure): The daily check procedure that needs to be updated
            tokenData (TokenData): Token data used for updating the daily check procedure

        :raises:
            `ObjectCouldNotNotBeUpdatedException
            <src.domain_model.resource.exception.ObjectCouldNotNotBeUpdatedException>`
            Raise an exception if the daily check procedure could not be updated
        """


    @abstractmethod
    def dailyCheckProcedureById(self, id: str) -> DailyCheckProcedure:
        """Get daily check procedure by id

        Args:
            id (str): The id of the daily check procedure

        Returns:
            DailyCheckProcedure: daily check procedure object

        :raises:
            `DailyCheckProcedureDoesNotExistException <src.domain_model.resource.exception.DailyCheckProcedureDoesNotExistException>`
            Raise an exception if the daily check procedure does not exist
        """

    @abstractmethod
    def dailyCheckProcedures(self, tokenData: TokenData, resultFrom: int = 0, resultSize: int = 100,
                 order: List[dict] = None) -> dict:
        """Get list of daily check procedures based on the owned roles that the user has

        Args:
            tokenData (TokenData): A token data object
            resultFrom (int): The start offset of the result item
            resultSize (int): The size of the items in the result
            order (List[dict]): A list of order e.g. [{'orderBy': 'name', 'direction': 'asc'},
                                {'orderBy': 'quantity', 'direction': 'desc'}]

        Returns:
            dict: A dict that has {"items": [], "itemCount": 0}
        """
      
    @abstractmethod
    def dailyCheckProceduresByEquipmentOrGroupId(self, tokenData: TokenData,
                 equipmentOrGroupId: str = None,
                 resultFrom: int = 0, 
                 resultSize: int = 100,
                 order: List[dict] = None) -> dict:
        """Get list of daily check procedures by daily check procedure id based on the owned roles that the user has

        Args:
            tokenData (TokenData): A token data object
            equipmentOrGroupId: A daily check procedure id
            resultFrom (int): The start offset of the result item
            resultSize (int): The size of the items in the result
            order (List[dict]): A list of order e.g. [{'orderBy': 'name', 'direction': 'asc'},
                                {'orderBy': 'quantity', 'direction': 'desc'}]

        Returns:
            dict: A dict that has {"items": [], "itemCount": 0}
        """
