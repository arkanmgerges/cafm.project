"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
from typing import List, Tuple
from src.domain_model.project.daily_check.procedure.DailyCheckProcedure import (
    DailyCheckProcedure,
)
from src.domain_model.project.daily_check.procedure.DailyCheckProcedureRepository import (
    DailyCheckProcedureRepository,
)
from src.domain_model.resource.exception.DailyCheckProcedureAlreadyExistException import (
    DailyCheckProcedureAlreadyExistException,
)
from src.domain_model.resource.exception.DailyCheckProcedureDoesNotExistException import (
    DailyCheckProcedureDoesNotExistException,
)
from src.domain_model.token.TokenData import TokenData
from src.resource.logging.decorator import debugLogger


class DailyCheckProcedureService:
    def __init__(self, repository: DailyCheckProcedureRepository):
        self._repo = repository

    @debugLogger
    def createDailyCheckProcedure(
        self,
        obj: DailyCheckProcedure,
        objectOnly: bool = False,
        tokenData: TokenData = None,
    ):
        if objectOnly:
            return (
                DailyCheckProcedure.createFromObject(obj=obj, generateNewId=True)
                if obj.id() == ""
                else obj
            )
        else:
            obj = DailyCheckProcedure.createFromObject(obj=obj, publishEvent=True)
            self._repo.save(obj=obj)
            return obj

    @debugLogger
    def deleteDailyCheckProcedure(
        self, obj: DailyCheckProcedure, tokenData: TokenData = None
    ):
        obj.publishDelete()
        self._repo.deleteDailyCheckProcedure(obj=obj)

    @debugLogger
    def updateDailyCheckProcedure(
        self,
        oldObject: DailyCheckProcedure,
        newObject: DailyCheckProcedure,
        tokenData: TokenData = None,
    ):
        newObject.publishUpdate(oldObject)
        self._repo.save(obj=newObject)

    @debugLogger
    def bulkCreate(self, objList: List[DailyCheckProcedure]):
        self._repo.bulkSave(objList=objList)
        for obj in objList:
            DailyCheckProcedure.createFromObject(obj=obj, publishEvent=True)

    @debugLogger
    def bulkDelete(self, objList: List[DailyCheckProcedure]):
        self._repo.bulkDelete(objList=objList)
        for obj in objList:
            obj.publishDelete()

    @debugLogger
    def bulkUpdate(self, objList: List[Tuple]):
        newObjList = list(map(lambda x: x[0], objList))
        self._repo.bulkSave(objList=newObjList)
        for obj in objList:
            newObj = obj[0]
            oldObj = obj[1]
            newObj.publishUpdate(oldObj)

    @debugLogger
    def dailyCheckProcedures(
        self,
        tokenData: TokenData = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
    ):
        return self._repo.dailyCheckProcedures(
            tokenData=tokenData,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def dailyCheckProceduresByEquipmentOrGroupId(
        self,
        equipmentOrGroupId: str = None,
        tokenData: TokenData = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
    ):
        return self._repo.dailyCheckProceduresByEquipmentOrGroupId(
            tokenData=tokenData,
            equipmentOrGroupId=equipmentOrGroupId,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def dailyCheckProceduresByProjectId(
        self,
        projectId: str = None,
        tokenData: TokenData = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
    ):
        return self._repo.dailyCheckProceduresByProjectId(
            tokenData=tokenData,
            projectId=projectId,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )
