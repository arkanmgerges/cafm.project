"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
from typing import List
from src.domain_model.project.daily_check.procedure.DailyCheckProcedure import DailyCheckProcedure
from src.domain_model.project.daily_check.procedure.DailyCheckProcedureRepository import DailyCheckProcedureRepository
from src.domain_model.resource.exception.DailyCheckProcedureAlreadyExistException import DailyCheckProcedureAlreadyExistException
from src.domain_model.resource.exception.DailyCheckProcedureDoesNotExistException import DailyCheckProcedureDoesNotExistException
from src.domain_model.token.TokenData import TokenData
from src.resource.logging.decorator import debugLogger


class DailyCheckProcedureService:
    def __init__(self, repository: DailyCheckProcedureRepository):
        self._repo = repository

    @debugLogger
    def createDailyCheckProcedure(self, obj: DailyCheckProcedure, objectOnly: bool = False, tokenData: TokenData = None):
        try:
            if obj.id() == '':
                raise DailyCheckProcedureDoesNotExistException()
            self._repo.dailyCheckProcedureById(id=obj.id())
            raise DailyCheckProcedureAlreadyExistException(obj.id())
        except DailyCheckProcedureDoesNotExistException:
            if objectOnly:
                return DailyCheckProcedure.createFromObject(obj=obj, generateNewId=True) if obj.id() == '' else obj
            else:
                obj = DailyCheckProcedure.createFromObject(obj=obj, publishEvent=True)
                return obj

    @debugLogger
    def deleteDailyCheckProcedure(self, obj: DailyCheckProcedure, tokenData: TokenData = None):
        obj.publishDelete()

    @debugLogger
    def updateDailyCheckProcedure(self, oldObject: DailyCheckProcedure, newObject: DailyCheckProcedure, tokenData: TokenData = None):
        newObject.publishUpdate(oldObject)

    @debugLogger
    def dailyCheckProcedures(self, tokenData: TokenData = None, resultFrom: int = 0, resultSize: int = 100,
                      order: List[dict] = None):
        return self._repo.dailyCheckProcedures(tokenData=tokenData, resultFrom=resultFrom, resultSize=resultSize, order=order)

    @debugLogger
    def dailyCheckProceduresByEquipmentOrGroupId(self, equipmentOrGroupId: str = None, tokenData: TokenData = None, resultFrom: int = 0, resultSize: int = 100,
                      order: List[dict] = None):
        return self._repo.dailyCheckProceduresByEquipmentOrGroupId(tokenData=tokenData, equipmentOrGroupId=equipmentOrGroupId, resultFrom=resultFrom, resultSize=resultSize, order=order)
