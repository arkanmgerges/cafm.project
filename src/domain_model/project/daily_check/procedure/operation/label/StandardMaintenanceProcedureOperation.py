"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
from src.domain_model.event.DomainPublishedEvents import DomainPublishedEvents
from src.resource.logging.logger import logger
from src.domain_model.common.HasToMap import HasToMap

from uuid import uuid4

class StandardMaintenanceProcedureOperation(HasToMap):
    def __init__(self, id: str = None, key: str = None, name: str = None, standardMaintenanceProcedureOperationId: str = None, skipValidation: bool = False):
        if not skipValidation:
            if key is None or key == '':
                from src.domain_model.resource.exception.InvalidArgumentException import InvalidArgumentException
                raise InvalidArgumentException(
                    f'Invalid standard maintenance procedure operation key: {key}, for standard maintenance procedure operation id: {id}')
            if name is None or name == '':
                from src.domain_model.resource.exception.InvalidArgumentException import InvalidArgumentException
                raise InvalidArgumentException(
                    f'Invalid standard maintenance procedure operation name: {name}, for standard maintenance procedure operation id: {id}')
            if standardMaintenanceProcedureOperationId is None or standardMaintenanceProcedureOperationId == '':
                from src.domain_model.resource.exception.InvalidArgumentException import InvalidArgumentException
                raise InvalidArgumentException(
                    f'Invalid standard maintenance procedure operation standard_maintenance_procedure_operation_id: {standardMaintenanceProcedureOperationId}, for standard maintenance procedure operation id: {id}')

        self._id = str(uuid4()) if id is None else id
        self._key = key
        self._name = name
        self._standardMaintenanceProcedureOperationId = standardMaintenanceProcedureOperationId



    @classmethod
    def createFrom(cls, id: str = None, key: str = None, name: str = None, standardMaintenanceProcedureOperationId: str = None, publishEvent: bool = False, skipValidation: bool = False, **_kwargs,):
        from src.domain_model.project.daily_check.procedure.operation.label.StandardMaintenanceProcedureOperationCreated import StandardMaintenanceProcedureOperationCreated
        obj = StandardMaintenanceProcedureOperation(id=id, 
			key=key,
			name=name,
			standardMaintenanceProcedureOperationId=standardMaintenanceProcedureOperationId, skipValidation=skipValidation)
        logger.debug(
            f'[{StandardMaintenanceProcedureOperation.createFrom.__qualname__}] - data: {obj.toMap()} event: {publishEvent}'
        )
        if publishEvent:
            logger.debug(
                f'[{StandardMaintenanceProcedureOperation.createFrom.__qualname__}] - Create standard maintenance procedure operation with id: {id}'
            )
            DomainPublishedEvents.addEventForPublishing(StandardMaintenanceProcedureOperationCreated(obj))
        return obj

    @classmethod
    def createFromObject(cls, obj: 'StandardMaintenanceProcedureOperation', publishEvent: bool = False, generateNewId: bool = False,
                         skipValidation: bool = False):
        logger.debug(f'[{StandardMaintenanceProcedureOperation.createFromObject.__qualname__}]')
        id = None if generateNewId else obj.id()
        return cls.createFrom(id=id, 
			key=obj.key(),
			name=obj.name(),
			standardMaintenanceProcedureOperationId=obj.standardMaintenanceProcedureOperationId(),
                              skipValidation=skipValidation,
                              publishEvent=publishEvent)


    def id(self) -> str:
        return self._id    
    
    def key(self) -> str:
        return self._key
    
    def name(self) -> str:
        return self._name
    
    def standardMaintenanceProcedureOperationId(self) -> str:
        return self._standardMaintenanceProcedureOperationId
    

    def publishDelete(self):
        from src.domain_model.project.daily_check.procedure.operation.label.StandardMaintenanceProcedureOperationDeleted import StandardMaintenanceProcedureOperationDeleted
        DomainPublishedEvents.addEventForPublishing(StandardMaintenanceProcedureOperationDeleted(self))

    def publishUpdate(self, old):
        from src.domain_model.project.daily_check.procedure.operation.label.StandardMaintenanceProcedureOperationUpdated import StandardMaintenanceProcedureOperationUpdated
        DomainPublishedEvents.addEventForPublishing(StandardMaintenanceProcedureOperationUpdated(old, self))


    def toMap(self) -> dict:
        return {'standard_maintenance_procedure_operation_id': self.id(), 'key': self.key(), 'name': self.name(), 'standard_maintenance_procedure_operation_id': self.standardMaintenanceProcedureOperationId()}

    def __repr__(self):
        return f'<{self.__module__} object at {hex(id(self))}> {self.toMap()}'

    def __str__(self) -> str:
        return f'<{self.__module__} object at {hex(id(self))}> {self.toMap()}'

    def __eq__(self, other):
        if not isinstance(other, StandardMaintenanceProcedureOperation):
            raise NotImplementedError(f'other: {other} can not be compared with StandardMaintenanceProcedureOperation class')
        return self.id() == other.id() and self.key() == other.key() and self.name() == other.name() and self.standardMaintenanceProcedureOperationId() == other.standardMaintenanceProcedureOperationId()
