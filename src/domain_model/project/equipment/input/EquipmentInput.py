"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
from src.domain_model.common.HasToMap import HasToMap
from src.domain_model.event.DomainPublishedEvents import DomainPublishedEvents
from src.resource.logging.logger import logger

from uuid import uuid4


class EquipmentInput(HasToMap):
    def __init__(
        self,
        id: str = None,
        name: str = None,
        value: str = None,
        unitId: str = None,
        equipmentId: str = None,
        skipValidation: bool = False,
    ):
        self._id = str(uuid4()) if id is None else id
        self._name = name
        self._value = value
        self._unitId = unitId
        self._equipmentId = equipmentId

        if not skipValidation:
            if name is None or name == "":
                from src.domain_model.resource.exception.InvalidArgumentException import (
                    InvalidArgumentException,
                )

                raise InvalidArgumentException(
                    f"Invalid equipment input name: {name}, for equipment input id: {id}"
                )
            if value is None or value == "":
                from src.domain_model.resource.exception.InvalidArgumentException import (
                    InvalidArgumentException,
                )

                raise InvalidArgumentException(
                    f"Invalid equipment input value: {value}, for equipment input id: {id}"
                )
            if unitId is None or unitId == "":
                from src.domain_model.resource.exception.InvalidArgumentException import (
                    InvalidArgumentException,
                )

                raise InvalidArgumentException(
                    f"Invalid equipment input unit_id: {unitId}, for equipment input id: {id}"
                )
            if equipmentId is None or equipmentId == "":
                from src.domain_model.resource.exception.InvalidArgumentException import (
                    InvalidArgumentException,
                )

                raise InvalidArgumentException(
                    f"Invalid equipment input equipment_id: {equipmentId}, for equipment input id: {id}"
                )

    @classmethod
    def createFrom(
        cls,
        id: str = None,
        name: str = None,
        value: str = None,
        unitId: str = None,
        equipmentId: str = None,
        publishEvent: bool = False,
        skipValidation: bool = False,
        **_kwargs,
    ):
        from src.domain_model.project.equipment.input.EquipmentInputCreated import (
            EquipmentInputCreated,
        )

        obj = EquipmentInput(
            id=id,
            name=name,
            value=value,
            unitId=unitId,
            equipmentId=equipmentId,
            skipValidation=skipValidation,
        )

        if publishEvent:
            logger.debug(
                f"[{EquipmentInput.createFrom.__qualname__}] - Create equipment input with id: {id}"
            )
            DomainPublishedEvents.addEventForPublishing(EquipmentInputCreated(obj))
        return obj

    @classmethod
    def createFromObject(
        cls,
        obj: "EquipmentInput",
        publishEvent: bool = False,
        generateNewId: bool = False,
        skipValidation: bool = False,
    ):
        logger.debug(f"[{EquipmentInput.createFromObject.__qualname__}]")
        id = None if generateNewId else obj.id()
        return cls.createFrom(
            id=id,
            name=obj.name(),
            value=obj.value(),
            unitId=obj.unitId(),
            equipmentId=obj.equipmentId(),
            skipValidation=skipValidation,
            publishEvent=publishEvent,
        )

    def id(self) -> str:
        return self._id

    def name(self) -> str:
        return self._name

    def value(self) -> str:
        return self._value

    def unitId(self) -> str:
        return self._unitId

    def equipmentId(self) -> str:
        return self._equipmentId

    def publishDelete(self):
        from src.domain_model.project.equipment.input.EquipmentInputDeleted import (
            EquipmentInputDeleted,
        )

        DomainPublishedEvents.addEventForPublishing(EquipmentInputDeleted(self))

    def publishUpdate(self, old):
        from src.domain_model.project.equipment.input.EquipmentInputUpdated import (
            EquipmentInputUpdated,
        )

        DomainPublishedEvents.addEventForPublishing(EquipmentInputUpdated(old, self))

    def toMap(self) -> dict:
        return {
            "equipment_input_id": self.id(),
            "name": self.name(),
            "value": self.value(),
            "unit_id": self.unitId(),
            "equipment_id": self.equipmentId(),
        }

    def __repr__(self):
        return f"<{self.__module__} object at {hex(id(self))}> {self.toMap()}"

    def __str__(self) -> str:
        return f"<{self.__module__} object at {hex(id(self))}> {self.toMap()}"

    def __eq__(self, other):
        if not isinstance(other, EquipmentInput):
            raise NotImplementedError(
                f"other: {other} can not be compared with EquipmentInput class"
            )
        return (
            self.id() == other.id()
            and self.name() == other.name()
            and self.value() == other.value()
            and self.unitId() == other.unitId()
            and self.equipmentId() == other.equipmentId()
        )
