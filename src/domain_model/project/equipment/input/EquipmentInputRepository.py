"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
from abc import ABC, abstractmethod
from typing import List
from src.domain_model.project.equipment.input.EquipmentInput import EquipmentInput
from src.domain_model.token.TokenData import TokenData


class EquipmentInputRepository(ABC):
    @abstractmethod
    def bulkSave(self, objList: List[EquipmentInput], tokenData: TokenData = None):
        """Bulk save equipment input list

        Args:
            objList (List[EquipmentInput]): The equipment input list that needs to be saved
            tokenData (TokenData): Token data that has info about the token

        """

    @abstractmethod
    def bulkDelete(self, objList: List[EquipmentInput], tokenData: TokenData = None):
        """Bulk delete equipment input list

        Args:
            objList (List[EquipmentInput]): The equipment input list that needs to be deleted
            tokenData (TokenData): Token data that has info about the token

        """

    @abstractmethod
    def save(self, obj: EquipmentInput, tokenData: TokenData = None):
        """Save equipment input

        Args:
            obj (EquipmentInput): The equipment input that needs to be saved
            tokenData (TokenData): Token data that has info about the token

        """

    @abstractmethod
    def deleteEquipmentInput(self, obj: EquipmentInput, tokenData: TokenData) -> None:
        """Delete a equipment input

        Args:
            obj (EquipmentInput): The equipment input that needs to be deleted
            tokenData (TokenData): Token data used for deleting the equipment input

        :raises:
            `ObjectCouldNotNotBeDeletedException
            <src.domain_model.resource.exception.ObjectCouldNotNotBeDeletedException>`
            Raise an exception if the equipment input could not be deleted
        """

    @abstractmethod
    def equipmentInputById(self, id: str) -> EquipmentInput:
        """Get equipment input by id

        Args:
            id (str): The id of the equipment input

        Returns:
            EquipmentInput: equipment input object

        :raises:
            `EquipmentInputDoesNotExistException <src.domain_model.resource.exception.EquipmentInputDoesNotExistException>`
            Raise an exception if the equipment input does not exist
        """

    @abstractmethod
    def equipmentInputs(
        self,
        tokenData: TokenData,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
    ) -> dict:
        """Get list of equipment inputs based on the owned roles that the user has

        Args:
            tokenData (TokenData): A token data object
            resultFrom (int): The start offset of the result item
            resultSize (int): The size of the items in the result
            order (List[dict]): A list of order e.g. [{'orderBy': 'name', 'direction': 'asc'},
                                {'orderBy': 'quantity', 'direction': 'desc'}]

        Returns:
            dict: A dict that has {"items": [], "totalItemCount": 0}
        """

    @abstractmethod
    def equipmentInputsByEquipmentId(
        self,
        tokenData: TokenData,
        equipmentId: str = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
    ) -> dict:
        """Get list of equipment inputs based on equipmentId

        Args:
            tokenData (TokenData): A token data object
            equipmentId (str): The equipment id for filtering the equipment inputs
            resultFrom (int): The start offset of the result item
            resultSize (int): The size of the items in the result
            order (List[dict]): A list of order e.g. [{'orderBy': 'name', 'direction': 'asc'},
                                {'orderBy': 'quantity', 'direction': 'desc'}]

        Returns:
            dict: A dict that has {"items": [], "totalItemCount": 0}
        """
