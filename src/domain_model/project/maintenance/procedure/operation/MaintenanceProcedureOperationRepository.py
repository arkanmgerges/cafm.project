"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
from abc import ABC, abstractmethod
from typing import List
from src.domain_model.project.maintenance.procedure.operation.MaintenanceProcedureOperation import MaintenanceProcedureOperation
from src.domain_model.token.TokenData import TokenData


class MaintenanceProcedureOperationRepository(ABC):
    @abstractmethod
    def save(self, obj: MaintenanceProcedureOperation, tokenData: TokenData):
        """Save maintenance procedure operation

        Args:
            obj (MaintenanceProcedureOperation): The maintenance procedure operation that needs to be saved
            tokenData (TokenData): Token data that has info about the token

        """

    @abstractmethod
    def createMaintenanceProcedureOperation(self, obj: MaintenanceProcedureOperation, tokenData: TokenData):
        """Create maintenance procedure operation

        Args:
            obj (MaintenanceProcedureOperation): The maintenance procedure operation that needs to be created
            tokenData (TokenData): Token data that has info about the token

        """

    @abstractmethod
    def deleteMaintenanceProcedureOperation(self, obj: MaintenanceProcedureOperation, tokenData: TokenData) -> None:
        """Delete a maintenance procedure operation

        Args:
            obj (MaintenanceProcedureOperation): The maintenance procedure operation that needs to be deleted
            tokenData (TokenData): Token data used for deleting the maintenance procedure operation

        :raises:
            `ObjectCouldNotNotBeDeletedException
            <src.domain_model.resource.exception.ObjectCouldNotNotBeDeletedException>`
            Raise an exception if the maintenance procedure operation could not be deleted
        """

    @abstractmethod
    def updateMaintenanceProcedureOperation(self, obj: MaintenanceProcedureOperation, tokenData: TokenData) -> None:
        """Update a maintenance procedure operation

        Args:
            obj (MaintenanceProcedureOperation): The maintenance procedure operation that needs to be updated
            tokenData (TokenData): Token data used for updating the maintenance procedure operation

        :raises:
            `ObjectCouldNotNotBeUpdatedException
            <src.domain_model.resource.exception.ObjectCouldNotNotBeUpdatedException>`
            Raise an exception if the maintenance procedure operation could not be updated
        """


    @abstractmethod
    def maintenanceProcedureOperationById(self, id: str) -> MaintenanceProcedureOperation:
        """Get maintenance procedure operation by id

        Args:
            id (str): The id of the maintenance procedure operation

        Returns:
            MaintenanceProcedureOperation: maintenance procedure operation object

        :raises:
            `MaintenanceProcedureOperationDoesNotExistException <src.domain_model.resource.exception.MaintenanceProcedureOperationDoesNotExistException>`
            Raise an exception if the maintenance procedure operation does not exist
        """

    @abstractmethod
    def maintenanceProcedureOperations(self, tokenData: TokenData, resultFrom: int = 0, resultSize: int = 100,
                 order: List[dict] = None) -> dict:
        """Get list of maintenance procedure operations based on the owned roles that the user has

        Args:
            tokenData (TokenData): A token data object
            resultFrom (int): The start offset of the result item
            resultSize (int): The size of the items in the result
            order (List[dict]): A list of order e.g. [{'orderBy': 'name', 'direction': 'asc'},
                                {'orderBy': 'quantity', 'direction': 'desc'}]

        Returns:
            dict: A dict that has {"items": [], "itemCount": 0}
        """
