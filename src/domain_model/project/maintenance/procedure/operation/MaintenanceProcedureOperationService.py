"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
from src.domain_model.project.maintenance.procedure.operation.label.MaintenanceProcedureOperationLabelService import MaintenanceProcedureOperationLabelService
from src.domain_model.project.maintenance.procedure.operation.parameter.MaintenanceProcedureOperationParameterService import MaintenanceProcedureOperationParameterService
from typing import List, Tuple
from src.domain_model.project.maintenance.procedure.operation.MaintenanceProcedureOperation import (
    MaintenanceProcedureOperation,
)
from src.domain_model.project.maintenance.procedure.operation.MaintenanceProcedureOperationRepository import (
    MaintenanceProcedureOperationRepository,
)
from src.domain_model.resource.exception.MaintenanceProcedureOperationAlreadyExistException import (
    MaintenanceProcedureOperationAlreadyExistException,
)
from src.domain_model.resource.exception.MaintenanceProcedureOperationDoesNotExistException import (
    MaintenanceProcedureOperationDoesNotExistException,
)
from src.domain_model.token.TokenData import TokenData
from src.resource.logging.decorator import debugLogger


class MaintenanceProcedureOperationService:
    def __init__(self, repository: MaintenanceProcedureOperationRepository,
        maintenanceProcedureOperationParameterService: MaintenanceProcedureOperationParameterService,
        maintenanceProcedureOperationLabelService: MaintenanceProcedureOperationLabelService):
        self._repo = repository
        self._maintenanceProcedureOperationParameterService = maintenanceProcedureOperationParameterService
        self._maintenanceProcedureOperationLabelService = maintenanceProcedureOperationLabelService

    @debugLogger
    def createMaintenanceProcedureOperation(
        self,
        obj: MaintenanceProcedureOperation,
        objectOnly: bool = False,
        tokenData: TokenData = None,
    ):
        if objectOnly:
            return (
                MaintenanceProcedureOperation.createFromObject(
                    obj=obj, generateNewId=True
                )
                if obj.id() == ""
                else obj
            )
        else:
            obj = MaintenanceProcedureOperation.createFromObject(
                obj=obj, publishEvent=True
            )
            self._repo.save(obj=obj)
            return obj

    @debugLogger
    def deleteMaintenanceProcedureOperation(
        self, obj: MaintenanceProcedureOperation, tokenData: TokenData = None
    ):
        obj.publishDelete()
        self._repo.deleteMaintenanceProcedureOperation(obj=obj)

    @debugLogger
    def updateMaintenanceProcedureOperation(
        self,
        oldObject: MaintenanceProcedureOperation,
        newObject: MaintenanceProcedureOperation,
        tokenData: TokenData = None,
    ):
        if newObject.type() != oldObject.type():
            if oldObject.type() == 'visual':
                crtLabels = self._maintenanceProcedureOperationLabelService.maintenanceProcedureOperationLabelsByMaintenanceProcedureOperationId(maintenanceProcedureOperationId=oldObject.id(),tokenData=tokenData, resultSize=200)
                for label in crtLabels["items"]:
                    self._maintenanceProcedureOperationLabelService.deleteMaintenanceProcedureOperationLabel(obj=label, tokenData=tokenData)
            if oldObject.type() == 'parameter':
                crtParameters = self._maintenanceProcedureOperationParameterService.maintenanceProcedureOperationParametersByMaintenanceProcedureOperationId(maintenanceProcedureOperationId=oldObject.id(),tokenData=tokenData, resultSize=200)
                for parameter in crtParameters["items"]:
                    self._maintenanceProcedureOperationParameterService.deleteMaintenanceProcedureOperationParameter(obj=parameter, tokenData=tokenData)

        newObject.publishUpdate(oldObject)
        self._repo.save(obj=newObject)

    @debugLogger
    def bulkCreate(self, objList: List[MaintenanceProcedureOperation]):
        self._repo.bulkSave(objList=objList)
        for obj in objList:
            MaintenanceProcedureOperation.createFromObject(obj=obj, publishEvent=True)

    @debugLogger
    def bulkDelete(self, objList: List[MaintenanceProcedureOperation]):
        self._repo.bulkDelete(objList=objList)
        for obj in objList:
            obj.publishDelete()

    @debugLogger
    def bulkUpdate(self, objList: List[Tuple]):
        newObjList = list(map(lambda x: x[0], objList))
        self._repo.bulkSave(objList=newObjList)
        for obj in objList:
            newObj = obj[0]
            oldObj = obj[1]

            if newObj.type() != oldObj.type():
                if oldObj.type() == 'visual':
                    crtLabels = self._maintenanceProcedureOperationLabelService.maintenanceProcedureOperationLabelsByMaintenanceProcedureOperationId(maintenanceProcedureOperationId=oldObj.id(), resultSize=200)
                    for label in crtLabels["items"]:
                        self._maintenanceProcedureOperationLabelService.deleteMaintenanceProcedureOperationLabel(obj=label)
                if oldObj.type() == 'parameter':
                    crtParameters = self._maintenanceProcedureOperationParameterService.maintenanceProcedureOperationParametersByMaintenanceProcedureOperationId(maintenanceProcedureOperationId=oldObj.id(), resultSize=200)
                    for parameter in crtParameters["items"]:
                        self._maintenanceProcedureOperationParameterService.deleteMaintenanceProcedureOperationParameter(obj=parameter)

            newObj.publishUpdate(oldObj)

    @debugLogger
    def maintenanceProcedureOperations(
        self,
        tokenData: TokenData = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
    ):
        return self._repo.maintenanceProcedureOperations(
            tokenData=tokenData,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def maintenanceProcedureOperationsByMaintenanceProcedureId(
        self,
        maintenanceProcedureId: str = None,
        tokenData: TokenData = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
    ):
        return self._repo.maintenanceProcedureOperationsByMaintenanceProcedureId(
            tokenData=tokenData,
            maintenanceProcedureId=maintenanceProcedureId,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )
