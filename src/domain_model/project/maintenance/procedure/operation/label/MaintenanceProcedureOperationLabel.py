"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
from src.domain_model.event.DomainPublishedEvents import DomainPublishedEvents
from src.resource.logging.logger import logger
from src.domain_model.common.HasToMap import HasToMap

from uuid import uuid4

class MaintenanceProcedureOperationLabel(HasToMap):
    def __init__(self, id: str = None, label: str = None, generateAlert: int = 0, maintenanceProcedureOperationId: str = None, skipValidation: bool = False):
        if not skipValidation:
            if label is None or label == '':
                from src.domain_model.resource.exception.InvalidArgumentException import InvalidArgumentException
                raise InvalidArgumentException(
                    f'Invalid maintenance procedure operation label label: {label}, for maintenance procedure operation label id: {id}')
            if generateAlert is None or generateAlert == '':
                from src.domain_model.resource.exception.InvalidArgumentException import InvalidArgumentException
                raise InvalidArgumentException(
                    f'Invalid maintenance procedure operation label generate_alert: {generateAlert}, for maintenance procedure operation label id: {id}')
            if maintenanceProcedureOperationId is None or maintenanceProcedureOperationId == '':
                from src.domain_model.resource.exception.InvalidArgumentException import InvalidArgumentException
                raise InvalidArgumentException(
                    f'Invalid maintenance procedure operation label maintenance_procedure_operation_id: {maintenanceProcedureOperationId}, for maintenance procedure operation label id: {id}')

        self._id = str(uuid4()) if id is None else id
        self._label = label
        self._generateAlert = generateAlert
        self._maintenanceProcedureOperationId = maintenanceProcedureOperationId



    @classmethod
    def createFrom(cls, id: str = None, label: str = None, generateAlert: int = 0, maintenanceProcedureOperationId: str = None, publishEvent: bool = False, skipValidation: bool = False, **_kwargs,):
        from src.domain_model.project.maintenance.procedure.operation.label.MaintenanceProcedureOperationLabelCreated import MaintenanceProcedureOperationLabelCreated
        obj = MaintenanceProcedureOperationLabel(id=id, 
			label=label,
			generateAlert=generateAlert,
			maintenanceProcedureOperationId=maintenanceProcedureOperationId, skipValidation=skipValidation)
        logger.debug(
            f'[{MaintenanceProcedureOperationLabel.createFrom.__qualname__}] - data: {obj.toMap()} event: {publishEvent}'
        )
        if publishEvent:
            logger.debug(
                f'[{MaintenanceProcedureOperationLabel.createFrom.__qualname__}] - Create maintenance procedure operation label with id: {id}'
            )
            DomainPublishedEvents.addEventForPublishing(MaintenanceProcedureOperationLabelCreated(obj))
        return obj

    @classmethod
    def createFromObject(cls, obj: 'MaintenanceProcedureOperationLabel', publishEvent: bool = False, generateNewId: bool = False,
                         skipValidation: bool = False):
        logger.debug(f'[{MaintenanceProcedureOperationLabel.createFromObject.__qualname__}]')
        id = None if generateNewId else obj.id()
        return cls.createFrom(id=id, 
			label=obj.label(),
			generateAlert=obj.generateAlert(),
			maintenanceProcedureOperationId=obj.maintenanceProcedureOperationId(),
                              skipValidation=skipValidation,
                              publishEvent=publishEvent)


    def id(self) -> str:
        return self._id    
    
    def label(self) -> str:
        return self._label
    
    def generateAlert(self) -> int:
        return self._generateAlert
    
    def maintenanceProcedureOperationId(self) -> str:
        return self._maintenanceProcedureOperationId
    

    def publishDelete(self):
        from src.domain_model.project.maintenance.procedure.operation.label.MaintenanceProcedureOperationLabelDeleted import MaintenanceProcedureOperationLabelDeleted
        DomainPublishedEvents.addEventForPublishing(MaintenanceProcedureOperationLabelDeleted(self))

    def publishUpdate(self, old):
        from src.domain_model.project.maintenance.procedure.operation.label.MaintenanceProcedureOperationLabelUpdated import MaintenanceProcedureOperationLabelUpdated
        DomainPublishedEvents.addEventForPublishing(MaintenanceProcedureOperationLabelUpdated(old, self))


    def toMap(self) -> dict:
        return {'maintenance_procedure_operation_label_id': self.id(), 'label': self.label(), 'generate_alert': self.generateAlert(), 'maintenance_procedure_operation_id': self.maintenanceProcedureOperationId()}

    def __repr__(self):
        return f'<{self.__module__} object at {hex(id(self))}> {self.toMap()}'

    def __str__(self) -> str:
        return f'<{self.__module__} object at {hex(id(self))}> {self.toMap()}'

    def __eq__(self, other):
        if not isinstance(other, MaintenanceProcedureOperationLabel):
            raise NotImplementedError(f'other: {other} can not be compared with MaintenanceProcedureOperationLabel class')
        return self.id() == other.id() and self.label() == other.label() and self.generateAlert() == other.generateAlert() and self.maintenanceProcedureOperationId() == other.maintenanceProcedureOperationId()
