"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
from abc import ABC, abstractmethod
from typing import List
from src.domain_model.project.maintenance.procedure.operation.label.MaintenanceProcedureOperationLabel import MaintenanceProcedureOperationLabel
from src.domain_model.token.TokenData import TokenData


class MaintenanceProcedureOperationLabelRepository(ABC):
    @abstractmethod
    def save(self, obj: MaintenanceProcedureOperationLabel, tokenData: TokenData = None):
        """Save maintenance procedure operation label

        Args:
            obj (MaintenanceProcedureOperationLabel): The maintenance procedure operation label that needs to be saved
            tokenData (TokenData): Token data that has info about the token

        """

    @abstractmethod
    def deleteMaintenanceProcedureOperationLabel(self, obj: MaintenanceProcedureOperationLabel, tokenData: TokenData = None) -> None:
        """Delete a maintenance procedure operation label

        Args:
            obj (MaintenanceProcedureOperationLabel): The maintenance procedure operation label that needs to be deleted
            tokenData (TokenData): Token data used for deleting the maintenance procedure operation label

        :raises:
            `ObjectCouldNotNotBeDeletedException
            <src.domain_model.resource.exception.ObjectCouldNotNotBeDeletedException>`
            Raise an exception if the maintenance procedure operation label could not be deleted
        """

    @abstractmethod
    def bulkSave(self, objList: List[MaintenanceProcedureOperationLabel], tokenData: TokenData = None):
        """Bulk save maintenance procedure operation label list

        Args:
            objList (List[MaintenanceProcedureOperationLabel]): The maintenance procedure operation label list that needs to be saved
            tokenData (TokenData): Token data that has info about the token

        """

    @abstractmethod
    def bulkDelete(self, objList: List[MaintenanceProcedureOperationLabel], tokenData: TokenData = None):
        """Bulk delete maintenance procedure operation label list

        Args:
            objList (List[MaintenanceProcedureOperationLabel]): The maintenance procedure operation label list that needs to be deleted
            tokenData (TokenData): Token data that has info about the token

        """

    @abstractmethod
    def maintenanceProcedureOperationLabelById(self, id: str) -> MaintenanceProcedureOperationLabel:
        """Get maintenance procedure operation label by id

        Args:
            id (str): The id of the maintenance procedure operation label

        Returns:
            MaintenanceProcedureOperationLabel: maintenance procedure operation label object

        :raises:
            `MaintenanceProcedureOperationLabelDoesNotExistException <src.domain_model.resource.exception.MaintenanceProcedureOperationLabelDoesNotExistException>`
            Raise an exception if the maintenance procedure operation label does not exist
        """

    @abstractmethod
    def maintenanceProcedureOperationLabels(self, tokenData: TokenData = None, resultFrom: int = 0, resultSize: int = 100,
                 order: List[dict] = None) -> dict:
        """Get list of maintenance procedure operation labels based on the owned roles that the user has

        Args:
            tokenData (TokenData): A token data object
            resultFrom (int): The start offset of the result item
            resultSize (int): The size of the items in the result
            order (List[dict]): A list of order e.g. [{'orderBy': 'name', 'direction': 'asc'},
                                {'orderBy': 'quantity', 'direction': 'desc'}]

        Returns:
            dict: A dict that has {"items": [], "totalItemCount": 0}
        """

    @abstractmethod
    def maintenanceProcedureOperationLabelsByMaintenanceProcedureOperationId(
        self,
        tokenData: TokenData,
        maintenanceProcedureOperationId: str = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
    ) -> dict:
        """Get list of maintenance procedure operation labels by maintenance_procedure_operation_id based on the owned roles that the user has

        Args:
            tokenData (TokenData): A token data object
            MaintenanceProcedureOperationId: A maintenance_procedure_operation_id
            resultFrom (int): The start offset of the result item
            resultSize (int): The size of the items in the result
            order (List[dict]): A list of order e.g. [{'orderBy': 'name', 'direction': 'asc'},
                                {'orderBy': 'quantity', 'direction': 'desc'}]

        Returns:
            dict: A dict that has {"items": [], "totalItemCount": 0}
        """
