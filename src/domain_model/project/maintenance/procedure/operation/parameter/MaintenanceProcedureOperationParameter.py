"""
The file is generated by a scaffold script then modified manually
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
from src.domain_model.event.DomainPublishedEvents import DomainPublishedEvents
from src.resource.logging.logger import logger

from uuid import uuid4

class MaintenanceProcedureOperationParameter:
    def __init__(self, id: str = None, name: str = None, unitId: str = None, maintenanceProcedureOperationId: str = None, minValue: float = None, maxValue: float = None, skipValidation: bool = False):
        self._id = str(uuid4()) if id is None else id
        self._name = name
        self._unitId = unitId
        self._maintenanceProcedureOperationId = maintenanceProcedureOperationId
        self._minValue = minValue if not None else 0.0
        self._maxValue = maxValue if not None else 0.0

        if not skipValidation:
            if name is None or name == '':
                from src.domain_model.resource.exception.InvalidArgumentException import InvalidArgumentException
                raise InvalidArgumentException(
                    f'Invalid maintenance procedure operation parameter name: {name}, for maintenance procedure operation parameter id: {id}')
            if unitId is None or unitId == '':
                from src.domain_model.resource.exception.InvalidArgumentException import InvalidArgumentException
                raise InvalidArgumentException(
                    f'Invalid maintenance procedure operation parameter unit_id: {unitId}, for maintenance procedure operation parameter id: {id}')
            if maintenanceProcedureOperationId is None or maintenanceProcedureOperationId == '':
                from src.domain_model.resource.exception.InvalidArgumentException import InvalidArgumentException
                raise InvalidArgumentException(
                    f'Invalid maintenance procedure operation parameter maintenance_procedure_operation_id: {maintenanceProcedureOperationId}, for maintenance procedure operation parameter id: {id}')

    @classmethod
    def createFrom(cls, id: str = None, name: str = None, unitId: str = None, maintenanceProcedureOperationId: str = None, minValue: float = None, maxValue: float = None, publishEvent: bool = False, skipValidation: bool = False):
        from src.domain_model.project.maintenance.procedure.operation.parameter.MaintenanceProcedureOperationParameterCreated import MaintenanceProcedureOperationParameterCreated
        obj = MaintenanceProcedureOperationParameter(id=id, name=name, unitId=unitId, maintenanceProcedureOperationId=maintenanceProcedureOperationId, minValue=minValue, maxValue=maxValue, skipValidation=skipValidation)

        if publishEvent:
            logger.debug(
                f'[{MaintenanceProcedureOperationParameter.createFrom.__qualname__}] - Create maintenance procedure operation parameter with id: {id}')
            DomainPublishedEvents.addEventForPublishing(MaintenanceProcedureOperationParameterCreated(obj))
        return obj

    @classmethod
    def createFromObject(cls, obj: 'MaintenanceProcedureOperationParameter', publishEvent: bool = False, generateNewId: bool = False,
                         skipValidation: bool = False):
        logger.debug(f'[{MaintenanceProcedureOperationParameter.createFromObject.__qualname__}]')
        id = None if generateNewId else obj.id()
        return cls.createFrom(id=id, name=obj.name(), unitId=obj.unitId(), maintenanceProcedureOperationId=obj.maintenanceProcedureOperationId(), minValue=obj.minValue(), maxValue=obj.maxValue(),
                              skipValidation=skipValidation,
                              publishEvent=publishEvent)


    def id(self) -> str:
        return self._id    
    
    def name(self) -> str:
        return self._name
    
    def unitId(self) -> str:
        return self._unitId
    
    def maintenanceProcedureOperationId(self) -> str:
        return self._maintenanceProcedureOperationId
    
    def minValue(self) -> float:
        return self._minValue
    
    def maxValue(self) -> float:
        return self._maxValue
    

    def publishDelete(self):
        from src.domain_model.project.maintenance.procedure.operation.parameter.MaintenanceProcedureOperationParameterDeleted import MaintenanceProcedureOperationParameterDeleted
        DomainPublishedEvents.addEventForPublishing(MaintenanceProcedureOperationParameterDeleted(self))

    def publishUpdate(self, old):
        from src.domain_model.project.maintenance.procedure.operation.parameter.MaintenanceProcedureOperationParameterUpdated import MaintenanceProcedureOperationParameterUpdated
        DomainPublishedEvents.addEventForPublishing(MaintenanceProcedureOperationParameterUpdated(old, self))


    def toMap(self) -> dict:
        return {'id': self.id(), 'name': self.name(), 'unit_id': self.unitId(), 'maintenance_procedure_operation_id': self.maintenanceProcedureOperationId(), 'min_value': self.minValue(), 'max_value': self.maxValue()}

    def __repr__(self):
        return f'<{self.__module__} object at {hex(id(self))}> {self.toMap()}'

    def __str__(self) -> str:
        return f'<{self.__module__} object at {hex(id(self))}> {self.toMap()}'

    def __eq__(self, other):
        if not isinstance(other, MaintenanceProcedureOperationParameter):
            raise NotImplementedError(f'other: {other} can not be compared with MaintenanceProcedureOperationParameter class')
        return self.id() == other.id() and self.name() == other.name() and self.unitId() == other.unitId() and self.maintenanceProcedureOperationId() == other.maintenanceProcedureOperationId() and self.minValue() == other.minValue() and self.maxValue() == other.maxValue()
