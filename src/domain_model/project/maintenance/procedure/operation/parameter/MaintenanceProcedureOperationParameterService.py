"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
from typing import List
from src.domain_model.project.maintenance.procedure.operation.parameter.MaintenanceProcedureOperationParameter import (
    MaintenanceProcedureOperationParameter,
)
from src.domain_model.project.maintenance.procedure.operation.parameter.MaintenanceProcedureOperationParameterRepository import (
    MaintenanceProcedureOperationParameterRepository,
)
from src.domain_model.resource.exception.MaintenanceProcedureOperationParameterAlreadyExistException import (
    MaintenanceProcedureOperationParameterAlreadyExistException,
)
from src.domain_model.resource.exception.MaintenanceProcedureOperationParameterDoesNotExistException import (
    MaintenanceProcedureOperationParameterDoesNotExistException,
)
from src.domain_model.token.TokenData import TokenData
from src.resource.logging.decorator import debugLogger


class MaintenanceProcedureOperationParameterService:
    def __init__(self, repository: MaintenanceProcedureOperationParameterRepository):
        self._repo = repository

    @debugLogger
    def createMaintenanceProcedureOperationParameter(
        self,
        obj: MaintenanceProcedureOperationParameter,
        objectOnly: bool = False,
        tokenData: TokenData = None,
    ):
        if objectOnly:
            return (
                MaintenanceProcedureOperationParameter.createFromObject(
                    obj=obj, generateNewId=True
                )
                if obj.id() == ""
                else obj
            )
        else:
            obj = MaintenanceProcedureOperationParameter.createFromObject(
                obj=obj, publishEvent=True
            )
            self._repo.save(obj=obj)
            return obj

    @debugLogger
    def deleteMaintenanceProcedureOperationParameter(
        self, obj: MaintenanceProcedureOperationParameter, tokenData: TokenData = None
    ):
        obj.publishDelete()
        self._repo.deleteMaintenanceProcedureOperationParameter(obj=obj)

    @debugLogger
    def updateMaintenanceProcedureOperationParameter(
        self,
        oldObject: MaintenanceProcedureOperationParameter,
        newObject: MaintenanceProcedureOperationParameter,
        tokenData: TokenData = None,
    ):
        newObject.publishUpdate(oldObject)
        self._repo.save(obj=newObject)

    @debugLogger
    def maintenanceProcedureOperationParameters(
        self,
        tokenData: TokenData = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
    ):
        return self._repo.maintenanceProcedureOperationParameters(
            tokenData=tokenData,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )

    @debugLogger
    def maintenanceProcedureOperationParametersByMaintenanceProcedureOperationId(
        self,
        maintenanceProcedureOperationId: str = None,
        tokenData: TokenData = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
    ):
        return self._repo.maintenanceProcedureOperationParametersByMaintenanceProcedureOperationId(
            tokenData=tokenData,
            maintenanceProcedureOperationId=maintenanceProcedureOperationId,
            resultFrom=resultFrom,
            resultSize=resultSize,
            order=order,
        )
