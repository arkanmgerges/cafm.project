"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
from abc import ABC, abstractmethod
from typing import List
from src.domain_model.project.standard_equipment.standard_category.StandardEquipmentCategory import StandardEquipmentCategory
from src.domain_model.token.TokenData import TokenData


class StandardEquipmentCategoryRepository(ABC):
    @abstractmethod
    def save(self, obj: StandardEquipmentCategory, tokenData: TokenData):
        """Save standard equipment category

        Args:
            obj (StandardEquipmentCategory): The standard equipment category that needs to be saved
            tokenData (TokenData): Token data that has info about the token

        """

    @abstractmethod
    def deleteStandardEquipmentCategory(self, obj: StandardEquipmentCategory, tokenData: TokenData) -> None:
        """Delete a standard equipment category

        Args:
            obj (StandardEquipmentCategory): The standard equipment category that needs to be deleted
            tokenData (TokenData): Token data used for deleting the standard equipment category

        :raises:
            `ObjectCouldNotNotBeDeletedException
            <src.domain_model.resource.exception.ObjectCouldNotNotBeDeletedException>`
            Raise an exception if the standard equipment category could not be deleted
        """

    @abstractmethod
    def standardEquipmentCategoryById(self, id: str) -> StandardEquipmentCategory:
        """Get standard equipment category by id

        Args:
            id (str): The id of the standard equipment category

        Returns:
            StandardEquipmentCategory: standard equipment category object

        :raises:
            `StandardEquipmentCategoryDoesNotExistException <src.domain_model.resource.exception.StandardEquipmentCategoryDoesNotExistException>`
            Raise an exception if the standard equipment category does not exist
        """

    @abstractmethod
    def standardEquipmentCategories(self, tokenData: TokenData, resultFrom: int = 0, resultSize: int = 100,
                 order: List[dict] = None) -> dict:
        """Get list of standard equipment categories based on the owned roles that the user has

        Args:
            tokenData (TokenData): A token data object
            resultFrom (int): The start offset of the result item
            resultSize (int): The size of the items in the result
            order (List[dict]): A list of order e.g. [{'orderBy': 'name', 'direction': 'asc'},
                                {'orderBy': 'quantity', 'direction': 'desc'}]

        Returns:
            dict: A dict that has {"items": [], "itemCount": 0}
        """
