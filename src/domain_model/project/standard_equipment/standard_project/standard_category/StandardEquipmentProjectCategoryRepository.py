"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
from abc import ABC, abstractmethod
from typing import List
from src.domain_model.project.standard_equipment.standard_project.standard_category.StandardEquipmentProjectCategory import (
    StandardEquipmentProjectCategory,
)
from src.domain_model.token.TokenData import TokenData


class StandardEquipmentProjectCategoryRepository(ABC):
    @abstractmethod
    def save(self, obj: StandardEquipmentProjectCategory, tokenData: TokenData = None):
        """Save standard equipment project category

        Args:
            obj (StandardEquipmentProjectCategory): The standard equipment project category that needs to be saved
            tokenData (TokenData): Token data that has info about the token

        """

    @abstractmethod
    def deleteStandardEquipmentProjectCategory(
        self, obj: StandardEquipmentProjectCategory, tokenData: TokenData = None
    ) -> None:
        """Delete a standard equipment project category

        Args:
            obj (StandardEquipmentProjectCategory): The standard equipment project category that needs to be deleted
            tokenData (TokenData): Token data used for deleting the standard equipment project category

        :raises:
            `ObjectCouldNotNotBeDeletedException
            <src.domain_model.resource.exception.ObjectCouldNotNotBeDeletedException>`
            Raise an exception if the standard equipment project category could not be deleted
        """

    @abstractmethod
    def bulkSave(
        self,
        objList: List[StandardEquipmentProjectCategory],
        tokenData: TokenData = None,
    ):
        """Bulk save standard equipment project category list

        Args:
            objList (List[StandardEquipmentProjectCategory]): The standard equipment project category list that needs to be saved
            tokenData (TokenData): Token data that has info about the token

        """

    @abstractmethod
    def bulkDelete(
        self,
        objList: List[StandardEquipmentProjectCategory],
        tokenData: TokenData = None,
    ):
        """Bulk delete standard equipment project category list

        Args:
            objList (List[StandardEquipmentProjectCategory]): The standard equipment project category list that needs to be deleted
            tokenData (TokenData): Token data that has info about the token

        """

    @abstractmethod
    def standardEquipmentProjectCategoryById(
        self, id: str
    ) -> StandardEquipmentProjectCategory:
        """Get standard equipment project category by id

        Args:
            id (str): The id of the standard equipment project category

        Returns:
            StandardEquipmentProjectCategory: standard equipment project category object

        :raises:
            `StandardEquipmentProjectCategoryDoesNotExistException <src.domain_model.resource.exception.StandardEquipmentProjectCategoryDoesNotExistException>`
            Raise an exception if the standard equipment project category does not exist
        """

    @abstractmethod
    def standardEquipmentProjectCategories(
        self,
        tokenData: TokenData = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
    ) -> dict:
        """Get list of standard equipment project categories based on the owned roles that the user has

        Args:
            tokenData (TokenData): A token data object
            resultFrom (int): The start offset of the result item
            resultSize (int): The size of the items in the result
            order (List[dict]): A list of order e.g. [{'orderBy': 'name', 'direction': 'asc'},
                                {'orderBy': 'quantity', 'direction': 'desc'}]

        Returns:
            dict: A dict that has {"items": [], "totalItemCount": 0}
        """

    @abstractmethod
    def standardEquipmentProjectCategoriesByOrganizationId(
        self,
        tokenData: TokenData,
        organizationId,
        resultFrom: int,
        resultSize: int,
        order: List[dict],
    ) -> dict:
        """Get list of standard equipment project categories by standard equipment project category id based on the owned roles that the user has

        Args:
            tokenData (TokenData): A token data object
            organizationId: A standard equipment project category id
            resultFrom (int): The start offset of the result item
            resultSize (int): The size of the items in the result
            order (List[dict]): A list of order e.g. [{'orderBy': 'name', 'direction': 'asc'},
                                {'orderBy': 'quantity', 'direction': 'desc'}]

        Returns:
            dict: A dict that has {"items": [], "totalItemCount": 0}
        """
