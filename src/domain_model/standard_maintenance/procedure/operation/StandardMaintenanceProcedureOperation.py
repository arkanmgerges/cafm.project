"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
from src.domain_model.common.HasToMap import HasToMap
from src.domain_model.event.DomainPublishedEvents import DomainPublishedEvents
from src.domain_model.standard_maintenance.procedure.operation.StandardMaintenanceProcedureOperationType import (
    StandardMaintenanceProcedureOperationType,
)
from src.resource.logging.logger import logger

from uuid import uuid4


class StandardMaintenanceProcedureOperation(HasToMap):
    def __init__(
        self,
        id: str = None,
        name: str = None,
        description: str = None,
        type: str = None,
        standardMaintenanceProcedureId: str = None,
        skipValidation: bool = False,
    ):
        self._id = str(uuid4()) if id is None else id
        self._name = name
        self._description = description
        self._type = type
        self._standardMaintenanceProcedureId = standardMaintenanceProcedureId

        if not skipValidation:
            if name is None or name == "":
                from src.domain_model.resource.exception.InvalidArgumentException import (
                    InvalidArgumentException,
                )

                raise InvalidArgumentException(
                    f"Invalid standard maintenance procedure operation name: {name}, for standard maintenance procedure operation id: {id}"
                )
            if description is None or description == "":
                from src.domain_model.resource.exception.InvalidArgumentException import (
                    InvalidArgumentException,
                )

                raise InvalidArgumentException(
                    f"Invalid standard maintenance procedure operation description: {description}, for standard maintenance procedure operation id: {id}"
                )
            if type is None or type == "" or not self._isType(type):
                from src.domain_model.resource.exception.InvalidArgumentException import (
                    InvalidArgumentException,
                )

                raise InvalidArgumentException(
                    f"Invalid standard maintenance procedure operation type: {type}, for standard maintenance procedure operation id: {id}"
                )
            if standardMaintenanceProcedureId is None or standardMaintenanceProcedureId == "":
                from src.domain_model.resource.exception.InvalidArgumentException import (
                    InvalidArgumentException,
                )

                raise InvalidArgumentException(
                    f"Invalid standard maintenance procedure operation standard_maintenance_procedure_id: {standardMaintenanceProcedureId}, for standard maintenance procedure operation id: {id}"
                )

    @classmethod
    def createFrom(
        cls,
        id: str = None,
        name: str = None,
        description: str = None,
        type: str = None,
        standardMaintenanceProcedureId: str = None,
        publishEvent: bool = False,
        skipValidation: bool = False,
        **_kwargs,
    ):
        from src.domain_model.standard_maintenance.procedure.operation.StandardMaintenanceProcedureOperationCreated import (
            StandardMaintenanceProcedureOperationCreated,
        )

        obj = StandardMaintenanceProcedureOperation(
            id=id,
            name=name,
            description=description,
            type=type,
            standardMaintenanceProcedureId=standardMaintenanceProcedureId,
            skipValidation=skipValidation,
        )

        if publishEvent:
            logger.debug(
                f"[{StandardMaintenanceProcedureOperation.createFrom.__qualname__}] - Create standard maintenance procedure operation with id: {id}"
            )
            DomainPublishedEvents.addEventForPublishing(
                StandardMaintenanceProcedureOperationCreated(obj)
            )
        return obj

    @classmethod
    def createFromObject(
        cls,
        obj: "StandardMaintenanceProcedureOperation",
        publishEvent: bool = False,
        generateNewId: bool = False,
        skipValidation: bool = False,
    ):
        logger.debug(f"[{StandardMaintenanceProcedureOperation.createFromObject.__qualname__}]")
        id = None if generateNewId else obj.id()
        return cls.createFrom(
            id=id,
            name=obj.name(),
            description=obj.description(),
            type=obj.type(),
            standardMaintenanceProcedureId=obj.standardMaintenanceProcedureId(),
            skipValidation=skipValidation,
            publishEvent=publishEvent,
        )

    def id(self) -> str:
        return self._id

    def name(self) -> str:
        return self._name

    def description(self) -> str:
        return self._description

    def type(self) -> str:
        return self._type

    def standardMaintenanceProcedureId(self) -> str:
        return self._standardMaintenanceProcedureId

    def publishDelete(self):
        from src.domain_model.standard_maintenance.procedure.operation.StandardMaintenanceProcedureOperationDeleted import (
            StandardMaintenanceProcedureOperationDeleted,
        )

        DomainPublishedEvents.addEventForPublishing(
            StandardMaintenanceProcedureOperationDeleted(self)
        )

    def publishUpdate(self, old):
        from src.domain_model.standard_maintenance.procedure.operation.StandardMaintenanceProcedureOperationUpdated import (
            StandardMaintenanceProcedureOperationUpdated,
        )

        DomainPublishedEvents.addEventForPublishing(
            StandardMaintenanceProcedureOperationUpdated(old, self)
        )

    def _isType(self, type) -> bool:
        return type in StandardMaintenanceProcedureOperationType._value2member_map_

    def toMap(self) -> dict:
        return {
            "standard_maintenance_procedure_operation_id": self.id(),
            "name": self.name(),
            "description": self.description(),
            "type": self.type(),
            "standard_maintenance_procedure_id": self.standardMaintenanceProcedureId(),
        }

    def __repr__(self):
        return f"<{self.__module__} object at {hex(id(self))}> {self.toMap()}"

    def __str__(self) -> str:
        return f"<{self.__module__} object at {hex(id(self))}> {self.toMap()}"

    def __eq__(self, other):
        if not isinstance(other, StandardMaintenanceProcedureOperation):
            raise NotImplementedError(
                f"other: {other} can not be compared with StandardMaintenanceProcedureOperation class"
            )
        return (
            self.id() == other.id()
            and self.name() == other.name()
            and self.description() == other.description()
            and self.type() == other.type()
            and self.standardMaintenanceProcedureId() == other.standardMaintenanceProcedureId()
        )
