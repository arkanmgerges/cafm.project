"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
from src.domain_model.event.DomainPublishedEvents import DomainPublishedEvents
from src.resource.logging.logger import logger
from src.domain_model.common.HasToMap import HasToMap

from uuid import uuid4

class StandardMaintenanceProcedureOperationLabel(HasToMap):
    def __init__(self, id: str = None, label: str = None, generateAlert: int = 0, standardMaintenanceProcedureOperationId: str = None, skipValidation: bool = False):
        if not skipValidation:
            if label is None or label == '':
                from src.domain_model.resource.exception.InvalidArgumentException import InvalidArgumentException
                raise InvalidArgumentException(
                    f'Invalid standard maintenance procedure operation label label: {label}, for standard maintenance procedure operation label id: {id}')
            if generateAlert is None or generateAlert == '':
                from src.domain_model.resource.exception.InvalidArgumentException import InvalidArgumentException
                raise InvalidArgumentException(
                    f'Invalid standard maintenance procedure operation label generate_alert: {generateAlert}, for standard maintenance procedure operation label id: {id}')
            if standardMaintenanceProcedureOperationId is None or standardMaintenanceProcedureOperationId == '':
                from src.domain_model.resource.exception.InvalidArgumentException import InvalidArgumentException
                raise InvalidArgumentException(
                    f'Invalid standard maintenance procedure operation label standard_maintenance_procedure_operation_id: {standardMaintenanceProcedureOperationId}, for standard maintenance procedure operation label id: {id}')

        self._id = str(uuid4()) if id is None else id
        self._label = label
        self._generateAlert = generateAlert
        self._standardMaintenanceProcedureOperationId = standardMaintenanceProcedureOperationId



    @classmethod
    def createFrom(cls, id: str = None, label: str = None, generateAlert: int = 0, standardMaintenanceProcedureOperationId: str = None, publishEvent: bool = False, skipValidation: bool = False, **_kwargs,):
        from src.domain_model.standard_maintenance.procedure.operation.label.StandardMaintenanceProcedureOperationLabelCreated import StandardMaintenanceProcedureOperationLabelCreated
        obj = StandardMaintenanceProcedureOperationLabel(id=id, 
			label=label,
			generateAlert=generateAlert,
			standardMaintenanceProcedureOperationId=standardMaintenanceProcedureOperationId, skipValidation=skipValidation)
        logger.debug(
            f'[{StandardMaintenanceProcedureOperationLabel.createFrom.__qualname__}] - data: {obj.toMap()} event: {publishEvent}'
        )
        if publishEvent:
            logger.debug(
                f'[{StandardMaintenanceProcedureOperationLabel.createFrom.__qualname__}] - Create standard maintenance procedure operation label with id: {id}'
            )
            DomainPublishedEvents.addEventForPublishing(StandardMaintenanceProcedureOperationLabelCreated(obj))
        return obj

    @classmethod
    def createFromObject(cls, obj: 'StandardMaintenanceProcedureOperationLabel', publishEvent: bool = False, generateNewId: bool = False,
                         skipValidation: bool = False):
        logger.debug(f'[{StandardMaintenanceProcedureOperationLabel.createFromObject.__qualname__}]')
        id = None if generateNewId else obj.id()
        return cls.createFrom(id=id, 
			label=obj.label(),
			generateAlert=obj.generateAlert(),
			standardMaintenanceProcedureOperationId=obj.standardMaintenanceProcedureOperationId(),
                              skipValidation=skipValidation,
                              publishEvent=publishEvent)


    def id(self) -> str:
        return self._id    
    
    def label(self) -> str:
        return self._label
    
    def generateAlert(self) -> int:
        return self._generateAlert
    
    def standardMaintenanceProcedureOperationId(self) -> str:
        return self._standardMaintenanceProcedureOperationId
    

    def publishDelete(self):
        from src.domain_model.standard_maintenance.procedure.operation.label.StandardMaintenanceProcedureOperationLabelDeleted import StandardMaintenanceProcedureOperationLabelDeleted
        DomainPublishedEvents.addEventForPublishing(StandardMaintenanceProcedureOperationLabelDeleted(self))

    def publishUpdate(self, old):
        from src.domain_model.standard_maintenance.procedure.operation.label.StandardMaintenanceProcedureOperationLabelUpdated import StandardMaintenanceProcedureOperationLabelUpdated
        DomainPublishedEvents.addEventForPublishing(StandardMaintenanceProcedureOperationLabelUpdated(old, self))


    def toMap(self) -> dict:
        return {'standard_maintenance_procedure_operation_label_id': self.id(), 'label': self.label(), 'generate_alert': self.generateAlert(), 'standard_maintenance_procedure_operation_id': self.standardMaintenanceProcedureOperationId()}

    def __repr__(self):
        return f'<{self.__module__} object at {hex(id(self))}> {self.toMap()}'

    def __str__(self) -> str:
        return f'<{self.__module__} object at {hex(id(self))}> {self.toMap()}'

    def __eq__(self, other):
        if not isinstance(other, StandardMaintenanceProcedureOperationLabel):
            raise NotImplementedError(f'other: {other} can not be compared with StandardMaintenanceProcedureOperationLabel class')
        return self.id() == other.id() and self.label() == other.label() and self.generateAlert() == other.generateAlert() and self.standardMaintenanceProcedureOperationId() == other.standardMaintenanceProcedureOperationId()
