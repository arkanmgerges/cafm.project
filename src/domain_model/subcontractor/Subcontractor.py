"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
from src.domain_model.event.DomainPublishedEvents import DomainPublishedEvents
from src.resource.logging.logger import logger
from src.domain_model.common.HasToMap import HasToMap

from uuid import uuid4


class Subcontractor(HasToMap):
    def __init__(
        self,
        id: str = None,
        companyName: str = None,
        websiteUrl: str = None,
        contactPerson: str = None,
        email: str = None,
        phoneNumber: str = None,
        addressOne: str = None,
        addressTwo: str = None,
        subcontractorCategoryId: str = None,
        description: str = None,
        cityId: int = None,
        countryId: int = None,
        stateId: str = None,
        postalCode: str = None,
        skipValidation: bool = False,
    ):
        if not skipValidation:
            if companyName is None or companyName == "":
                from src.domain_model.resource.exception.InvalidArgumentException import (
                    InvalidArgumentException,
                )

                raise InvalidArgumentException(
                    f"Invalid subcontractor company_name: {companyName}, for subcontractor id: {id}"
                )
            if websiteUrl is None or websiteUrl == "":
                from src.domain_model.resource.exception.InvalidArgumentException import (
                    InvalidArgumentException,
                )

                raise InvalidArgumentException(
                    f"Invalid subcontractor website_url: {websiteUrl}, for subcontractor id: {id}"
                )
            if contactPerson is None or contactPerson == "":
                from src.domain_model.resource.exception.InvalidArgumentException import (
                    InvalidArgumentException,
                )

                raise InvalidArgumentException(
                    f"Invalid subcontractor contact_person: {contactPerson}, for subcontractor id: {id}"
                )
            if email is None or email == "":
                from src.domain_model.resource.exception.InvalidArgumentException import (
                    InvalidArgumentException,
                )

                raise InvalidArgumentException(
                    f"Invalid subcontractor email: {email}, for subcontractor id: {id}"
                )
            if phoneNumber is None or phoneNumber == "":
                from src.domain_model.resource.exception.InvalidArgumentException import (
                    InvalidArgumentException,
                )

                raise InvalidArgumentException(
                    f"Invalid subcontractor phone_number: {phoneNumber}, for subcontractor id: {id}"
                )
            if addressOne is None or addressOne == "":
                from src.domain_model.resource.exception.InvalidArgumentException import (
                    InvalidArgumentException,
                )

                raise InvalidArgumentException(
                    f"Invalid subcontractor address_one: {addressOne}, for subcontractor id: {id}"
                )
            if addressTwo is None or addressTwo == "":
                from src.domain_model.resource.exception.InvalidArgumentException import (
                    InvalidArgumentException,
                )

                raise InvalidArgumentException(
                    f"Invalid subcontractor address_two: {addressTwo}, for subcontractor id: {id}"
                )
            if subcontractorCategoryId is None or subcontractorCategoryId == "":
                from src.domain_model.resource.exception.InvalidArgumentException import (
                    InvalidArgumentException,
                )

                raise InvalidArgumentException(
                    f"Invalid subcontractor subcontractor_category_id: {subcontractorCategoryId}, for subcontractor id: {id}"
                )
            # if description is None or description == "":
            #     from src.domain_model.resource.exception.InvalidArgumentException import (
            #         InvalidArgumentException,
            #     )
            #
            #     raise InvalidArgumentException(
            #         f"Invalid subcontractor description: {description}, for subcontractor id: {id}"
            #     )
            if cityId is None or cityId == "":
                from src.domain_model.resource.exception.InvalidArgumentException import (
                    InvalidArgumentException,
                )

                raise InvalidArgumentException(
                    f"Invalid subcontractor city_id: {cityId}, for subcontractor id: {id}"
                )
            if countryId is None or countryId == "":
                from src.domain_model.resource.exception.InvalidArgumentException import (
                    InvalidArgumentException,
                )

                raise InvalidArgumentException(
                    f"Invalid subcontractor country_id: {countryId}, for subcontractor id: {id}"
                )
            if stateId is None or stateId == "":
                from src.domain_model.resource.exception.InvalidArgumentException import (
                    InvalidArgumentException,
                )

                raise InvalidArgumentException(
                    f"Invalid subcontractor state_id: {stateId}, for subcontractor id: {id}"
                )
            # if postalCode is None or postalCode == "":
            #     from src.domain_model.resource.exception.InvalidArgumentException import (
            #         InvalidArgumentException,
            #     )
            #
            #     raise InvalidArgumentException(
            #         f"Invalid subcontractor postal_code: {postalCode}, for subcontractor id: {id}"
            #     )

        self._id = str(uuid4()) if id is None else id
        self._companyName = companyName
        self._websiteUrl = websiteUrl
        self._contactPerson = contactPerson
        self._email = email
        self._phoneNumber = phoneNumber
        self._addressOne = addressOne
        self._addressTwo = addressTwo
        self._subcontractorCategoryId = subcontractorCategoryId
        self._description = description
        self._cityId = cityId
        self._countryId = countryId
        self._stateId = stateId
        self._postalCode = postalCode

    @classmethod
    def createFrom(
        cls,
        id: str = None,
        companyName: str = None,
        websiteUrl: str = None,
        contactPerson: str = None,
        email: str = None,
        phoneNumber: str = None,
        addressOne: str = None,
        addressTwo: str = None,
        subcontractorCategoryId: str = None,
        description: str = None,
        cityId: int = None,
        countryId: int = None,
        stateId: str = None,
        postalCode: str = None,
        publishEvent: bool = False,
        skipValidation: bool = False,
        **_kwargs,
    ):
        from src.domain_model.subcontractor.SubcontractorCreated import (
            SubcontractorCreated,
        )

        obj = Subcontractor(
            id=id,
            companyName=companyName,
            websiteUrl=websiteUrl,
            contactPerson=contactPerson,
            email=email,
            phoneNumber=phoneNumber,
            addressOne=addressOne,
            addressTwo=addressTwo,
            subcontractorCategoryId=subcontractorCategoryId,
            description=description,
            cityId=cityId,
            countryId=countryId,
            stateId=stateId,
            postalCode=postalCode,
            skipValidation=skipValidation,
        )
        logger.debug(
            f"[{Subcontractor.createFrom.__qualname__}] - data: {obj.toMap()} event: {publishEvent}"
        )
        if publishEvent:
            logger.debug(
                f"[{Subcontractor.createFrom.__qualname__}] - Create subcontractor with id: {id}"
            )
            DomainPublishedEvents.addEventForPublishing(SubcontractorCreated(obj))
        return obj

    @classmethod
    def createFromObject(
        cls,
        obj: "Subcontractor",
        publishEvent: bool = False,
        generateNewId: bool = False,
        skipValidation: bool = False,
    ):
        logger.debug(f"[{Subcontractor.createFromObject.__qualname__}]")
        id = None if generateNewId else obj.id()
        return cls.createFrom(
            id=id,
            companyName=obj.companyName(),
            websiteUrl=obj.websiteUrl(),
            contactPerson=obj.contactPerson(),
            email=obj.email(),
            phoneNumber=obj.phoneNumber(),
            addressOne=obj.addressOne(),
            addressTwo=obj.addressTwo(),
            subcontractorCategoryId=obj.subcontractorCategoryId(),
            description=obj.description(),
            cityId=obj.cityId(),
            countryId=obj.countryId(),
            stateId=obj.stateId(),
            postalCode=obj.postalCode(),
            skipValidation=skipValidation,
            publishEvent=publishEvent,
        )

    def id(self) -> str:
        return self._id

    def companyName(self) -> str:
        return self._companyName

    def websiteUrl(self) -> str:
        return self._websiteUrl

    def contactPerson(self) -> str:
        return self._contactPerson

    def email(self) -> str:
        return self._email

    def phoneNumber(self) -> str:
        return self._phoneNumber

    def addressOne(self) -> str:
        return self._addressOne

    def addressTwo(self) -> str:
        return self._addressTwo

    def subcontractorCategoryId(self) -> str:
        return self._subcontractorCategoryId

    def description(self) -> str:
        return self._description

    def cityId(self) -> int:
        return self._cityId

    def countryId(self) -> int:
        return self._countryId

    def stateId(self) -> str:
        return self._stateId

    def postalCode(self) -> str:
        return self._postalCode

    def publishDelete(self):
        from src.domain_model.subcontractor.SubcontractorDeleted import (
            SubcontractorDeleted,
        )

        DomainPublishedEvents.addEventForPublishing(SubcontractorDeleted(self))

    def publishUpdate(self, old):
        from src.domain_model.subcontractor.SubcontractorUpdated import (
            SubcontractorUpdated,
        )

        DomainPublishedEvents.addEventForPublishing(SubcontractorUpdated(old, self))

    def toMap(self) -> dict:
        return {
            "subcontractor_id": self.id(),
            "company_name": self.companyName(),
            "website_url": self.websiteUrl(),
            "contact_person": self.contactPerson(),
            "email": self.email(),
            "phone_number": self.phoneNumber(),
            "address_one": self.addressOne(),
            "address_two": self.addressTwo(),
            "subcontractor_category_id": self.subcontractorCategoryId(),
            "description": self.description(),
            "city_id": self.cityId(),
            "country_id": self.countryId(),
            "state_id": self.stateId(),
            "postal_code": self.postalCode(),
        }

    def __repr__(self):
        return f"<{self.__module__} object at {hex(id(self))}> {self.toMap()}"

    def __str__(self) -> str:
        return f"<{self.__module__} object at {hex(id(self))}> {self.toMap()}"

    def __eq__(self, other):
        if not isinstance(other, Subcontractor):
            raise NotImplementedError(
                f"other: {other} can not be compared with Subcontractor class"
            )
        return (
            self.id() == other.id()
            and self.companyName() == other.companyName()
            and self.websiteUrl() == other.websiteUrl()
            and self.contactPerson() == other.contactPerson()
            and self.email() == other.email()
            and self.phoneNumber() == other.phoneNumber()
            and self.addressOne() == other.addressOne()
            and self.addressTwo() == other.addressTwo()
            and self.subcontractorCategoryId() == other.subcontractorCategoryId()
            and self.description() == other.description()
            and self.cityId() == other.cityId()
            and self.countryId() == other.countryId()
            and self.stateId() == other.stateId()
            and self.postalCode() == other.postalCode()
        )
