"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
from typing import List
from src.domain_model.subcontractor.category.SubcontractorCategory import SubcontractorCategory
from src.domain_model.subcontractor.category.SubcontractorCategoryRepository import SubcontractorCategoryRepository
from src.domain_model.token.TokenData import TokenData
from src.resource.logging.decorator import debugLogger


class SubcontractorCategoryService:
    def __init__(self, repository: SubcontractorCategoryRepository):
        self._repo = repository

    @debugLogger
    def createSubcontractorCategory(self, obj: SubcontractorCategory, objectOnly: bool = False, tokenData: TokenData = None):
        if objectOnly:
            return SubcontractorCategory.createFromObject(obj=obj, generateNewId=True) if obj.id() == '' else obj
        else:
            obj = SubcontractorCategory.createFromObject(obj=obj, publishEvent=True)
            self._repo.save(obj=obj)
            return obj

    @debugLogger
    def deleteSubcontractorCategory(self, obj: SubcontractorCategory, tokenData: TokenData = None):
        obj.publishDelete()
        self._repo.deleteSubcontractorCategory(obj=obj)

    @debugLogger
    def updateSubcontractorCategory(self, oldObject: SubcontractorCategory, newObject: SubcontractorCategory, tokenData: TokenData = None):
        newObject.publishUpdate(oldObject)
        self._repo.save(obj=newObject)

    @debugLogger
    def subcontractorCategories(self, tokenData: TokenData = None, resultFrom: int = 0, resultSize: int = 100,
                      order: List[dict] = None):
        return self._repo.subcontractorCategories(tokenData=tokenData, resultFrom=resultFrom, resultSize=resultSize, order=order)
