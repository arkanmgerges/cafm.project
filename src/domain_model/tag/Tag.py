"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
from src.domain_model.event.DomainPublishedEvents import DomainPublishedEvents
from src.resource.logging.logger import logger
from src.domain_model.common.HasToMap import HasToMap

from uuid import uuid4

class Tag(HasToMap):
    def __init__(self, id: str = None, name: str = None, skipValidation: bool = False):
        if not skipValidation:
            if name is None or name == '':
                from src.domain_model.resource.exception.InvalidArgumentException import InvalidArgumentException
                raise InvalidArgumentException(
                    f'Invalid tag name: {name}, for tag id: {id}')

        self._id = str(uuid4()) if id is None else id
        self._name = name



    @classmethod
    def createFrom(cls, id: str = None, name: str = None, publishEvent: bool = False, skipValidation: bool = False, **_kwargs,):
        from src.domain_model.tag.TagCreated import TagCreated
        obj = Tag(id=id, 
			name=name, skipValidation=skipValidation)
        logger.debug(
            f'[{Tag.createFrom.__qualname__}] - data: {obj.toMap()} event: {publishEvent}'
        )
        if publishEvent:
            logger.debug(
                f'[{Tag.createFrom.__qualname__}] - Create tag with id: {id}'
            )
            DomainPublishedEvents.addEventForPublishing(TagCreated(obj))
        return obj

    @classmethod
    def createFromObject(cls, obj: 'Tag', publishEvent: bool = False, generateNewId: bool = False,
                         skipValidation: bool = False):
        logger.debug(f'[{Tag.createFromObject.__qualname__}]')
        id = None if generateNewId else obj.id()
        return cls.createFrom(id=id, 
			name=obj.name(),
                              skipValidation=skipValidation,
                              publishEvent=publishEvent)


    def id(self) -> str:
        return self._id    
    
    def name(self) -> str:
        return self._name
    

    def publishDelete(self):
        from src.domain_model.tag.TagDeleted import TagDeleted
        DomainPublishedEvents.addEventForPublishing(TagDeleted(self))

    def publishUpdate(self, old):
        from src.domain_model.tag.TagUpdated import TagUpdated
        DomainPublishedEvents.addEventForPublishing(TagUpdated(old, self))


    def toMap(self) -> dict:
        return {'tag_id': self.id(), 'name': self.name()}

    def __repr__(self):
        return f'<{self.__module__} object at {hex(id(self))}> {self.toMap()}'

    def __str__(self) -> str:
        return f'<{self.__module__} object at {hex(id(self))}> {self.toMap()}'

    def __eq__(self, other):
        if not isinstance(other, Tag):
            raise NotImplementedError(f'other: {other} can not be compared with Tag class')
        return self.id() == other.id() and self.name() == other.name()
