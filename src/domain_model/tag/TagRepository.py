"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
from abc import ABC, abstractmethod
from src.domain_model.role.Role import Role
from typing import List
from src.domain_model.tag.Tag import Tag
from src.domain_model.token.TokenData import TokenData


class TagRepository(ABC):
    @abstractmethod
    def save(self, obj: Tag, tokenData: TokenData = None):
        """Save tag

        Args:
            obj (Tag): The tag that needs to be saved
            tokenData (TokenData): Token data that has info about the token

        """

    @abstractmethod
    def deleteTag(self, obj: Tag, tokenData: TokenData = None) -> None:
        """Delete a tag

        Args:
            obj (Tag): The tag that needs to be deleted
            tokenData (TokenData): Token data used for deleting the tag

        :raises:
            `ObjectCouldNotNotBeDeletedException
            <src.domain_model.resource.exception.ObjectCouldNotNotBeDeletedException>`
            Raise an exception if the tag could not be deleted
        """

    @abstractmethod
    def bulkSave(self, objList: List[Tag], tokenData: TokenData = None):
        """Bulk save tag list

        Args:
            objList (List[Tag]): The tag list that needs to be saved
            tokenData (TokenData): Token data that has info about the token

        """

    @abstractmethod
    def bulkDelete(self, objList: List[Tag], tokenData: TokenData = None):
        """Bulk delete tag list

        Args:
            objList (List[Tag]): The tag list that needs to be deleted
            tokenData (TokenData): Token data that has info about the token

        """

    @abstractmethod
    def tagById(self, id: str) -> Tag:
        """Get tag by id

        Args:
            id (str): The id of the tag

        Returns:
            Tag: tag object

        :raises:
            `TagDoesNotExistException <src.domain_model.resource.exception.TagDoesNotExistException>`
            Raise an exception if the tag does not exist
        """

    @abstractmethod
    def tagByName(self, name: str) -> Tag:
        """Get tag by id

        Args:
            name (str): The name of the tag

        Returns:
            Tag: tag object

        :raises:
            `TagDoesNotExistException <src.domain_model.resource.exception.TagDoesNotExistException>`
            Raise an exception if the tag does not exist
        """

    @abstractmethod
    def tags(self, tokenData: TokenData = None, resultFrom: int = 0, resultSize: int = 100,
                 order: List[dict] = None) -> dict:
        """Get list of tags based on the owned roles that the user has

        Args:
            tokenData (TokenData): A token data object
            resultFrom (int): The start offset of the result item
            resultSize (int): The size of the items in the result
            order (List[dict]): A list of order e.g. [{'orderBy': 'name', 'direction': 'asc'},
                                {'orderBy': 'quantity', 'direction': 'desc'}]

        Returns:
            dict: A dict that has {"items": [], "totalItemCount": 0}
        """

    @abstractmethod
    def assignTagToRole(self, role: Role, tag: Tag, tokenData: TokenData):
        """Assign tag to role

        Args:
            tag (Tag): The tag to be assigned to role
            role (Role): The role that will have the tag assigned to
            tokenData (TokenData): Token data that has info about the token
        """