"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

import grpc

from src.application.DailyCheckProcedureApplicationService import (
    DailyCheckProcedureApplicationService,
)
from src.domain_model.project.daily_check.procedure.DailyCheckProcedure import (
    DailyCheckProcedure,
)
from src.domain_model.resource.exception.DailyCheckProcedureDoesNotExistException import (
    DailyCheckProcedureDoesNotExistException,
)
from src.domain_model.resource.exception.UnAuthorizedException import (
    UnAuthorizedException,
)
from src.port_adapter.api.grpc.listener.CommonBaseListener import CommonBaseListener
from src.resource.logging.decorator import debugLogger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry
from src.resource.proto._generated.project.daily_check_procedure_app_service_pb2 import \
    DailyCheckProcedureAppService_dailyCheckProceduresResponse, DailyCheckProcedureAppService_newIdResponse, \
    DailyCheckProcedureAppService_dailyCheckProcedureByIdResponse, \
    DailyCheckProcedureAppService_dailyCheckProceduresByEquipmentOrGroupIdResponse, \
    DailyCheckProcedureAppService_dailyCheckProceduresByProjectIdResponse
from src.resource.proto._generated.project.daily_check_procedure_app_service_pb2_grpc import \
    DailyCheckProcedureAppServiceServicer


class DailyCheckProcedureAppServiceListener(
    CommonBaseListener, DailyCheckProcedureAppServiceServicer
):
    """The listener function implements the rpc call as described in the .proto file"""
    def __init__(self):
        super().__init__()
        import src.port_adapter.AppDi as AppDi
        self._appService: DailyCheckProcedureApplicationService = AppDi.instance.get(
            DailyCheckProcedureApplicationService
        )


    def __str__(self):
        return self.__class__.__name__

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def new_id(self, request, context):
        return super().newId(request=request, context=context, response=DailyCheckProcedureAppService_newIdResponse)


    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def daily_check_procedures(self, request, context):
        try:
            import src.port_adapter.AppDi as AppDi
            dailyCheckProcedureAppService: DailyCheckProcedureApplicationService = (
                AppDi.instance.get(DailyCheckProcedureApplicationService)
            )
            return super().models(request=request, context=context, response= DailyCheckProcedureAppService_dailyCheckProceduresResponse,
                                  appServiceMethod=dailyCheckProcedureAppService.dailyCheckProcedures,
                                  responseAttribute='daily_check_procedures'
                                  )

        except DailyCheckProcedureDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("No dailyCheckProcedures found")
            return DailyCheckProcedureAppService_dailyCheckProceduresResponse()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return DailyCheckProcedureAppService_dailyCheckProceduresResponse()

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def daily_check_procedure_by_id(self, request, context):
        try:
            import src.port_adapter.AppDi as AppDi
            dailyCheckProcedureAppService: DailyCheckProcedureApplicationService = (
                AppDi.instance.get(DailyCheckProcedureApplicationService)
            )
            return super().oneModel(request=request, context=context,
                                     response=DailyCheckProcedureAppService_dailyCheckProcedureByIdResponse,
                                     appServiceMethod=dailyCheckProcedureAppService.dailyCheckProcedureById,
                                     responseAttribute='daily_check_procedure',
                                     appServiceParams={'id': request.id}
                                     )
        except DailyCheckProcedureDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("daily check procedure does not exist")
            return DailyCheckProcedureAppService_dailyCheckProcedureByIdResponse()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return DailyCheckProcedureAppService_dailyCheckProcedureByIdResponse()

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def daily_check_procedures_by_equipment_or_group_id(self, request, context):
        try:
            import src.port_adapter.AppDi as AppDi
            dailyCheckProcedureAppService: DailyCheckProcedureApplicationService = (
                AppDi.instance.get(DailyCheckProcedureApplicationService)
            )
            return super().models(request=request, context=context,
                                  response=DailyCheckProcedureAppService_dailyCheckProceduresByEquipmentOrGroupIdResponse,
                                  appServiceMethod=dailyCheckProcedureAppService.dailyCheckProceduresByEquipmentOrGroupId,
                                  responseAttribute='daily_check_procedures',
                                  appServiceParams={'equipmentOrGroupId': request.equipment_or_group_id}
                                  )
        except DailyCheckProcedureDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("daily check procedure does not exist")
            return DailyCheckProcedureAppService_dailyCheckProceduresByEquipmentOrGroupIdResponse()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return DailyCheckProcedureAppService_dailyCheckProceduresByEquipmentOrGroupIdResponse()

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def daily_check_procedures_by_project_id(self, request, context):
        response = DailyCheckProcedureAppService_dailyCheckProceduresByProjectIdResponse
        try:
            import src.port_adapter.AppDi as AppDi
            dailyCheckProcedureAppService: DailyCheckProcedureApplicationService = (
                AppDi.instance.get(DailyCheckProcedureApplicationService)
            )
            return super().models(request=request, context=context,
                                  response=response,
                                  appServiceMethod=dailyCheckProcedureAppService.dailyCheckProceduresByProjectId,
                                  responseAttribute='daily_check_procedures',
                                  appServiceParams={'projectId': request.project_id}
                                  )
        except DailyCheckProcedureDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("daily check procedure does not exist")
            return response()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return response()

    def _addObjectToGrpcResponse(self, obj: DailyCheckProcedure, grpcResponseObject):
        kwargs = {"id": obj.id(),
                  "name": obj.name() if obj.name() is not None else '',
                  "description": obj.description() if obj.description() is not None else '',
                  "project_id": obj.projectId() if obj.projectId() is not None else '',
                  "equipment_id": obj.equipmentId() if obj.equipmentId() is not None else '',
                  "equipment_category_group_id": obj.equipmentCategoryGroupId() if obj.equipmentCategoryGroupId() is not None else ''
                  }
        for k, v in kwargs.items():
            setattr(grpcResponseObject, k, v)
