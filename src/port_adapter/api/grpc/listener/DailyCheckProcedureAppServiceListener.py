"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""


import time
from typing import Any

import grpc

import src.port_adapter.AppDi as AppDi
from src.application.DailyCheckProcedureApplicationService import (
    DailyCheckProcedureApplicationService,
)
from src.domain_model.project.daily_check.procedure.DailyCheckProcedure import (
    DailyCheckProcedure,
)
from src.domain_model.resource.exception.UnAuthorizedException import (
    UnAuthorizedException,
)
from src.domain_model.resource.exception.DailyCheckProcedureDoesNotExistException import (
    DailyCheckProcedureDoesNotExistException,
)
from src.domain_model.token.TokenService import TokenService
from src.resource.logging.decorator import debugLogger
from src.resource.logging.logger import logger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry
from src.resource.proto._generated.daily_check_procedure_app_service_pb2 import (
    DailyCheckProcedureAppService_dailyCheckProceduresResponse,
    DailyCheckProcedureAppService_dailyCheckProcedureByIdResponse,
    DailyCheckProcedureAppService_dailyCheckProceduresByEquipmentOrGroupIdResponse,
    DailyCheckProcedureAppService_newIdResponse,
)
from src.resource.proto._generated.daily_check_procedure_app_service_pb2_grpc import (
    DailyCheckProcedureAppServiceServicer,
)


class DailyCheckProcedureAppServiceListener(DailyCheckProcedureAppServiceServicer):
    """The listener function implements the rpc call as described in the .proto file"""

    def __init__(self):
        self.counter = 0
        self.last_print_time = time.time()
        self._tokenService = TokenService()

    def __str__(self):
        return self.__class__.__name__

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def newId(self, request, context):
        try:
            token = self._token(context)
            metadata = context.invocation_metadata()
            claims = (
                self._tokenService.claimsFromToken(token=metadata[0].value)
                if "token" in metadata[0]
                else None
            )
            logger.debug(
                f"[{DailyCheckProcedureAppServiceListener.newId.__qualname__}] - metadata: {metadata}\n\t claims: {claims}\n\t \
                    token: {token}"
            )
            appService: DailyCheckProcedureApplicationService = AppDi.instance.get(
                DailyCheckProcedureApplicationService
            )
            return DailyCheckProcedureAppService_newIdResponse(id=appService.newId())
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return DailyCheckProcedureAppService_newIdResponse()

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def dailyCheckProcedures(self, request, context):
        try:
            token = self._token(context)
            metadata = context.invocation_metadata()
            resultSize = request.resultSize if request.resultSize >= 0 else 10
            claims = (
                self._tokenService.claimsFromToken(token=metadata[0].value)
                if "token" in metadata[0]
                else None
            )
            logger.debug(
                f"[{DailyCheckProcedureAppServiceListener.dailyCheckProcedures.__qualname__}] - metadata: {metadata}\n\t claims: {claims}\n\t \
resultFrom: {request.resultFrom}, resultSize: {resultSize}, token: {token}"
            )
            dailyCheckProcedureAppService: DailyCheckProcedureApplicationService = (
                AppDi.instance.get(DailyCheckProcedureApplicationService)
            )

            orderData = [
                {"orderBy": o.orderBy, "direction": o.direction} for o in request.order
            ]
            result: dict = dailyCheckProcedureAppService.dailyCheckProcedures(
                resultFrom=request.resultFrom,
                resultSize=resultSize,
                token=token,
                order=orderData,
            )
            response = DailyCheckProcedureAppService_dailyCheckProceduresResponse()
            for item in result["items"]:
                response.dailyCheckProcedures.add(
                    id=item.id(),
                    name=item.name(),
                    description=item.description(),
                    equipmentId=item.equipmentId(),
                    equipmentCategoryGroupId=item.equipmentCategoryGroupId(),
                )
            response.totalItemCount = result["totalItemCount"]
            logger.debug(
                f"[{DailyCheckProcedureAppServiceListener.dailyCheckProcedures.__qualname__}] - response: {response}"
            )
            return DailyCheckProcedureAppService_dailyCheckProceduresResponse(
                dailyCheckProcedures=response.dailyCheckProcedures,
                totalItemCount=response.totalItemCount,
            )
        except DailyCheckProcedureDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("No dailyCheckProcedures found")
            return DailyCheckProcedureAppService_dailyCheckProceduresResponse()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return DailyCheckProcedureAppService_dailyCheckProceduresResponse()

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def dailyCheckProcedureById(self, request, context):
        try:
            token = self._token(context)
            appService: DailyCheckProcedureApplicationService = AppDi.instance.get(
                DailyCheckProcedureApplicationService
            )
            obj: DailyCheckProcedure = appService.dailyCheckProcedureById(
                id=request.id, token=token
            )
            logger.debug(
                f"[{DailyCheckProcedureAppServiceListener.dailyCheckProcedureById.__qualname__}] - response: {obj}"
            )
            response = DailyCheckProcedureAppService_dailyCheckProcedureByIdResponse()
            self._addObjectToResponse(obj=obj, response=response)
            return response
        except DailyCheckProcedureDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("daily check procedure does not exist")
            return DailyCheckProcedureAppService_dailyCheckProcedureByIdResponse()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return DailyCheckProcedureAppService_dailyCheckProcedureByIdResponse()

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def dailyCheckProceduresByEquipmentOrGroupId(self, request, context):
        try:
            token = self._token(context)
            metadata = context.invocation_metadata()
            resultSize = request.resultSize if request.resultSize >= 0 else 10
            claims = (
                self._tokenService.claimsFromToken(token=metadata[0].value)
                if "token" in metadata[0]
                else None
            )
            logger.debug(
                f"[{DailyCheckProcedureAppServiceListener.dailyCheckProceduresByEquipmentOrGroupId.__qualname__}] - metadata: {metadata}\n\t claims: {claims}\n\t \
resultFrom: {request.resultFrom}, resultSize: {resultSize}, token: {token}"
            )
            dailyCheckProcedureAppService: DailyCheckProcedureApplicationService = (
                AppDi.instance.get(DailyCheckProcedureApplicationService)
            )

            orderData = [
                {"orderBy": o.orderBy, "direction": o.direction} for o in request.order
            ]
            result: dict = (
                dailyCheckProcedureAppService.dailyCheckProceduresByEquipmentOrGroupId(
                    equipmentOrGroupId=request.equipmentOrGroupId,
                    resultFrom=request.resultFrom,
                    resultSize=resultSize,
                    token=token,
                    order=orderData,
                )
            )
            response = (
                DailyCheckProcedureAppService_dailyCheckProceduresByEquipmentOrGroupIdResponse()
            )
            for item in result["items"]:
                response.dailyCheckProcedures.add(
                    id=item.id(),
                    name=item.name(),
                    description=item.description(),
                    equipmentId=item.equipmentId(),
                    equipmentCategoryGroupId=item.equipmentCategoryGroupId(),
                )
            response.totalItemCount = result["totalItemCount"]
            logger.debug(
                f"[{DailyCheckProcedureAppServiceListener.dailyCheckProceduresByEquipmentOrGroupId.__qualname__}] - response: {response}"
            )
            return DailyCheckProcedureAppService_dailyCheckProceduresByEquipmentOrGroupIdResponse(
                dailyCheckProcedures=response.dailyCheckProcedures,
                totalItemCount=response.totalItemCount,
            )
        except DailyCheckProcedureDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("No dailyCheckProcedures found")
            return (
                DailyCheckProcedureAppService_dailyCheckProceduresByEquipmentOrGroupIdResponse()
            )
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return (
                DailyCheckProcedureAppService_dailyCheckProceduresByEquipmentOrGroupIdResponse()
            )

    @debugLogger
    def _addObjectToResponse(self, obj: DailyCheckProcedure, response: Any):
        response.dailyCheckProcedure.id = obj.id()
        response.dailyCheckProcedure.name = obj.name()
        response.dailyCheckProcedure.description = obj.description()
        response.dailyCheckProcedure.equipmentId = obj.equipmentId()
        response.dailyCheckProcedure.equipmentCategoryGroupId = (
            obj.equipmentCategoryGroupId()
        )

    @debugLogger
    def _token(self, context) -> str:
        metadata = context.invocation_metadata()
        if "token" in metadata[0]:
            return metadata[0].value
        return ""
