"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""



import grpc

from src.application.DailyCheckProcedureOperationLabelApplicationService import DailyCheckProcedureOperationLabelApplicationService
from src.domain_model.project.daily_check.procedure.operation.label.DailyCheckProcedureOperationLabel import DailyCheckProcedureOperationLabel
from src.domain_model.resource.exception.DailyCheckProcedureOperationLabelDoesNotExistException import DailyCheckProcedureOperationLabelDoesNotExistException
from src.domain_model.resource.exception.UnAuthorizedException import UnAuthorizedException
from src.port_adapter.api.grpc.listener.CommonBaseListener import CommonBaseListener
from src.resource.logging.decorator import debugLogger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry
from src.resource.proto._generated.project.daily_check_procedure_operation_label_app_service_pb2 import (
    DailyCheckProcedureOperationLabelAppService_dailyCheckProcedureOperationLabelsResponse,
    DailyCheckProcedureOperationLabelAppService_dailyCheckProcedureOperationLabelByIdResponse,
    DailyCheckProcedureOperationLabelAppService_newIdResponse,
)
from src.resource.proto._generated.project.daily_check_procedure_operation_label_app_service_pb2_grpc import (
    DailyCheckProcedureOperationLabelAppServiceServicer,
)

class DailyCheckProcedureOperationLabelAppServiceListener(
    CommonBaseListener, DailyCheckProcedureOperationLabelAppServiceServicer
):
    """The listener function implements the rpc call as described in the .proto file"""
    def __init__(self):
        super().__init__()
        import src.port_adapter.AppDi as AppDi
        self._appService: DailyCheckProcedureOperationLabelApplicationService = AppDi.instance.get(
            DailyCheckProcedureOperationLabelApplicationService
        )



    def __str__(self):
        return self.__class__.__name__

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def new_id(self, request, context):
        return super().newId(request=request, context=context, response=DailyCheckProcedureOperationLabelAppService_newIdResponse)


    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def daily_check_procedure_operation_labels(self, request, context):
        response = DailyCheckProcedureOperationLabelAppService_dailyCheckProcedureOperationLabelsResponse
        try:
            import src.port_adapter.AppDi as AppDi
            dailyCheckProcedureOperationLabelAppService: DailyCheckProcedureOperationLabelApplicationService = (
                AppDi.instance.get(DailyCheckProcedureOperationLabelApplicationService)
            )
            return super().models(request=request, context=context, response=response,
                                     appServiceMethod=dailyCheckProcedureOperationLabelAppService.dailyCheckProcedureOperationLabels,
                                     responseAttribute='daily_check_procedure_operation_labels'
                                     )

        except DailyCheckProcedureOperationLabelDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("No dailyCheckProcedureOperationLabels found")
            return response()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return response()

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def daily_check_procedure_operation_label_by_id(self, request, context):
        response = DailyCheckProcedureOperationLabelAppService_dailyCheckProcedureOperationLabelByIdResponse
        try:
            import src.port_adapter.AppDi as AppDi
            dailyCheckProcedureOperationLabelAppService: DailyCheckProcedureOperationLabelApplicationService = (
                AppDi.instance.get(DailyCheckProcedureOperationLabelApplicationService)
            )
            return super().oneModel(request=request, context=context,
                                     response=response,
                                     appServiceMethod=dailyCheckProcedureOperationLabelAppService.dailyCheckProcedureOperationLabelById,
                                     responseAttribute='daily_check_procedure_operation_label',
                                     appServiceParams={'id': request.id}
                                     )
        except DailyCheckProcedureOperationLabelDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("daily check procedure does not exist")
            return response()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return response()

    def _addObjectToGrpcResponse(self, obj: DailyCheckProcedureOperationLabel, grpcResponseObject):
        kwargs = {
            "id": obj.id(),
            "label": obj.label() if obj.label() is not None else '',
            "generate_alert": obj.generateAlert() if obj.generateAlert() is not None else 0,
            "daily_check_procedure_operation_id": obj.dailyCheckProcedureOperationId() if obj.dailyCheckProcedureOperationId() is not None else '',
        }
        for k, v in kwargs.items():
            setattr(grpcResponseObject, k, v)
