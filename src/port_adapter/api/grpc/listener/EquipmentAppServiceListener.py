"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""


import time
from typing import Any

import grpc

from src.application.EquipmentApplicationService import EquipmentApplicationService
from src.domain_model.project.equipment.Equipment import Equipment
from src.domain_model.resource.exception.EquipmentDoesNotExistException import EquipmentDoesNotExistException
from src.domain_model.resource.exception.UnAuthorizedException import UnAuthorizedException
from src.port_adapter.api.grpc.listener.CommonBaseListener import CommonBaseListener
from src.resource.logging.decorator import debugLogger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry
from src.resource.proto._generated.equipment_app_service_pb2 import (
    EquipmentAppService_equipmentsResponse,
    EquipmentAppService_equipmentByIdResponse,
    EquipmentAppService_newIdResponse,
)
from src.resource.proto._generated.equipment_app_service_pb2_grpc import (
    EquipmentAppServiceServicer,
)

class EquipmentAppServiceListener(
    CommonBaseListener, EquipmentAppServiceServicer
):
    """The listener function implements the rpc call as described in the .proto file"""
    def __init__(self):
        super().__init__()
        import src.port_adapter.AppDi as AppDi
        self._appService: EquipmentApplicationService = AppDi.instance.get(
            EquipmentApplicationService
        )


    def __str__(self):
        return self.__class__.__name__

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def new_id(self, request, context):
        return super().newId(request=request, context=context, response=EquipmentAppService_newIdResponse)


    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def equipments(self, request, context):
        response = EquipmentAppService_equipmentsResponse
        try:
            import src.port_adapter.AppDi as AppDi
            equipmentAppService: EquipmentApplicationService = (
                AppDi.instance.get(EquipmentApplicationService)
            )
            return super().models(request=request, context=context, response=response,
                                     appServiceMethod=equipmentAppService.equipments,
                                     responseAttribute='equipments'
                                     )

        except EquipmentDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("No equipments found")
            return response()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return response()

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def equipment_by_id(self, request, context):
        response = EquipmentAppService_equipmentByIdResponse
        try:
            import src.port_adapter.AppDi as AppDi
            equipmentAppService: EquipmentApplicationService = (
                AppDi.instance.get(EquipmentApplicationService)
            )
            return super().oneModel(request=request, context=context,
                                     response=response,
                                     appServiceMethod=equipmentAppService.equipmentById,
                                     responseAttribute='equipment',
                                     appServiceParams={'id': request.id}
                                     )
        except EquipmentDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("daily check procedure does not exist")
            return response()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return response()

    def _addObjectToGrpcResponse(self, obj: Equipment, grpcResponseObject):
        kwargs = {
            "id": obj.id(),
            "name": obj.name() if obj.name() is not None else '',
            "project_id": obj.projectId() if obj.projectId() is not None else '',
            "equipment_project_category_id": obj.equipmentProjectCategoryId() if obj.equipmentCategoryGroupId() is not None else '',
            "equipment_category_group_id": obj.equipmentCategoryGroupId() if obj.equipmentCategoryGroupId() is not None else '',
            "building_id": obj.buildingId() if obj.buildingId() is not None else '',
            "building_level_id": obj.buildingLevelId() if obj.buildingLevelId() is not None else '',
            "building_level_room_id": obj.buildingLevelRoomId() if obj.buildingLevelRoomId() is not None else '',
            "manufacturer_id": obj.manufacturerId() if obj.manufacturerId() is not None else '',
            "equipment_model_id": obj.equipmentModelId() if obj.equipmentModelId() is not None else '',
            "quantity": obj.quantity() if obj.quantity() is not None else 0,
        }
        for k, v in kwargs.items():
            setattr(grpcResponseObject, k, v)
