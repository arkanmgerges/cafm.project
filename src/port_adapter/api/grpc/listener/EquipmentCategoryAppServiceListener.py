"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

import grpc

from src.application.EquipmentCategoryApplicationService import EquipmentCategoryApplicationService
from src.domain_model.project.equipment.category.EquipmentCategory import EquipmentCategory
from src.domain_model.resource.exception.EquipmentCategoryDoesNotExistException import EquipmentCategoryDoesNotExistException
from src.domain_model.resource.exception.UnAuthorizedException import UnAuthorizedException
from src.port_adapter.api.grpc.listener.CommonBaseListener import CommonBaseListener
from src.resource.logging.decorator import debugLogger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry
from src.resource.proto._generated.equipment_category_app_service_pb2 import (
    EquipmentCategoryAppService_equipmentCategoriesResponse,
    EquipmentCategoryAppService_equipmentCategoryByIdResponse,
    EquipmentCategoryAppService_newIdResponse,
    EquipmentCategoryAppService_equipmentCategoryGroupsByEquipmentCategoryIdResponse,
)
from src.resource.proto._generated.equipment_category_app_service_pb2_grpc import (
    EquipmentCategoryAppServiceServicer,
)

class EquipmentCategoryAppServiceListener(
    CommonBaseListener, EquipmentCategoryAppServiceServicer
):
    """The listener function implements the rpc call as described in the .proto file"""
    def __init__(self):
        super().__init__()
        import src.port_adapter.AppDi as AppDi
        self._appService: EquipmentCategoryApplicationService = AppDi.instance.get(
            EquipmentCategoryApplicationService
        )


    def __str__(self):
        return self.__class__.__name__

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def new_id(self, request, context):
        return super().newId(request=request, context=context, response=EquipmentCategoryAppService_newIdResponse)


    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def equipment_categories(self, request, context):
        response = EquipmentCategoryAppService_equipmentCategoriesResponse
        try:
            import src.port_adapter.AppDi as AppDi
            equipmentCategoryAppService: EquipmentCategoryApplicationService = (
                AppDi.instance.get(EquipmentCategoryApplicationService)
            )
            return super().models(request=request, context=context, response=response,
                                     appServiceMethod=equipmentCategoryAppService.equipmentCategories,
                                     responseAttribute='equipment_categories'
                                     )

        except EquipmentCategoryDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("No equipmentCategories found")
            return response()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return response()

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def equipment_category_groups_by_equipment_category_id(self, request, context):
        response = EquipmentCategoryAppService_equipmentCategoryGroupsByEquipmentCategoryIdResponse
        try:
            import src.port_adapter.AppDi as AppDi
            equipmentCategoryAppService: EquipmentCategoryApplicationService = (
                AppDi.instance.get(EquipmentCategoryApplicationService)
            )
            return super().models(request=request, context=context, response=response,
                                  appServiceMethod=equipmentCategoryAppService.equipmentCategoryGroupsByEquipmentCategoryId,
                                  responseAttribute='equipment_category_groups',
                                  appServiceParams={'id': request.id}
                                  )

        except EquipmentCategoryDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("No equipmentCategories found")
            return response()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return response()

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def equipment_category_by_id(self, request, context):
        response = EquipmentCategoryAppService_equipmentCategoryByIdResponse
        try:
            import src.port_adapter.AppDi as AppDi
            equipmentCategoryAppService: EquipmentCategoryApplicationService = (
                AppDi.instance.get(EquipmentCategoryApplicationService)
            )
            return super().oneModel(request=request, context=context,
                                     response=response,
                                     appServiceMethod=equipmentCategoryAppService.equipmentCategoryById,
                                     responseAttribute='equipment_category',
                                     appServiceParams={'id': request.id}
                                     )
        except EquipmentCategoryDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("daily check procedure does not exist")
            return response()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return response()

    def _addObjectToGrpcResponse(self, obj: EquipmentCategory, grpcResponseObject):
        kwargs = {
            "id": obj.id(),
            "name": obj.name() if obj.name() is not None else '',
        }
        for k, v in kwargs.items():
            setattr(grpcResponseObject, k, v)
