"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

import grpc

from src.application.EquipmentInputApplicationService import EquipmentInputApplicationService
from src.domain_model.project.equipment.input.EquipmentInput import EquipmentInput
from src.domain_model.resource.exception.EquipmentInputDoesNotExistException import EquipmentInputDoesNotExistException
from src.domain_model.resource.exception.UnAuthorizedException import UnAuthorizedException
from src.port_adapter.api.grpc.listener.CommonBaseListener import CommonBaseListener
from src.resource.logging.decorator import debugLogger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry
from src.resource.proto._generated.equipment_input_app_service_pb2 import (
    EquipmentInputAppService_equipmentInputsResponse,
    EquipmentInputAppService_equipmentInputByIdResponse,
    EquipmentInputAppService_newIdResponse, EquipmentInputAppService_equipmentInputsByEquipmentIdResponse,
)
from src.resource.proto._generated.equipment_input_app_service_pb2_grpc import (
    EquipmentInputAppServiceServicer,
)


class EquipmentInputAppServiceListener(
    CommonBaseListener, EquipmentInputAppServiceServicer
):
    """The listener function implements the rpc call as described in the .proto file"""
    def __init__(self):
        import src.port_adapter.AppDi as AppDi
        self._appService: EquipmentInputApplicationService = AppDi.instance.get(
            EquipmentInputApplicationService
        )
        super().__init__()


    def __str__(self):
        return self.__class__.__name__

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def new_id(self, request, context):
        return super().newId(request=request, context=context, response=EquipmentInputAppService_newIdResponse)


    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def equipment_inputs(self, request, context):
        response = EquipmentInputAppService_equipmentInputsResponse
        try:
            import src.port_adapter.AppDi as AppDi
            equipmentInputAppService: EquipmentInputApplicationService = (
                AppDi.instance.get(EquipmentInputApplicationService)
            )
            return super().models(request=request, context=context, response=response,
                                     appServiceMethod=equipmentInputAppService.equipmentInputs,
                                     responseAttribute='equipment_inputs'
                                     )

        except EquipmentInputDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("No equipmentInputs found")
            return response()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return response()

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def equipment_inputs_by_equipment_id(self, request, context):
        response = EquipmentInputAppService_equipmentInputsByEquipmentIdResponse
        try:
            import src.port_adapter.AppDi as AppDi
            equipmentInputAppService: EquipmentInputApplicationService = (
                AppDi.instance.get(EquipmentInputApplicationService)
            )
            return super().models(request=request, context=context, response=response,
                                     appServiceMethod=equipmentInputAppService.equipmentInputsByEquipmentId,
                                     responseAttribute='equipment_inputs',
                                     appServiceParams={'equipmentId': request.equipment_id}
                                     )

        except EquipmentInputDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("No equipmentInputs found")
            return response()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return response()


    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def equipment_input_by_id(self, request, context):
        response = EquipmentInputAppService_equipmentInputByIdResponse
        try:
            import src.port_adapter.AppDi as AppDi
            equipmentInputAppService: EquipmentInputApplicationService = (
                AppDi.instance.get(EquipmentInputApplicationService)
            )
            return super().oneModel(request=request, context=context,
                                     response=response,
                                     appServiceMethod=equipmentInputAppService.equipmentInputById,
                                     responseAttribute='equipment_input',
                                     appServiceParams={'id': request.id}
                                     )
        except EquipmentInputDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("daily check procedure does not exist")
            return response()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return response()

    def _addObjectToGrpcResponse(self, obj: EquipmentInput, grpcResponseObject):
        kwargs = {
            "id": obj.id(),
            "name": obj.name(),
            "value": obj.value(),
            "unit_id": obj.unitId(),
            "equipment_id": obj.equipmentId(),
        }
        for k, v in kwargs.items():
            setattr(grpcResponseObject, k, v)
