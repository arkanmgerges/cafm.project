"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""



import grpc

from src.application.ManufacturerApplicationService import ManufacturerApplicationService
from src.domain_model.manufacturer.Manufacturer import Manufacturer
from src.domain_model.resource.exception.ManufacturerDoesNotExistException import ManufacturerDoesNotExistException
from src.domain_model.resource.exception.UnAuthorizedException import UnAuthorizedException
from src.port_adapter.api.grpc.listener.CommonBaseListener import CommonBaseListener
from src.resource.logging.decorator import debugLogger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry
from src.resource.proto._generated.project.manufacturer_app_service_pb2 import (
    ManufacturerAppService_manufacturersResponse,
    ManufacturerAppService_manufacturerByIdResponse,
    ManufacturerAppService_newIdResponse,
)
from src.resource.proto._generated.project.manufacturer_app_service_pb2_grpc import ManufacturerAppServiceServicer


class ManufacturerAppServiceListener(
    CommonBaseListener, ManufacturerAppServiceServicer
):
    """The listener function implements the rpc call as described in the .proto file"""
    def __init__(self):
        super().__init__()
        import src.port_adapter.AppDi as AppDi
        self._appService: ManufacturerApplicationService = AppDi.instance.get(
            ManufacturerApplicationService
        )


    def __str__(self):
        return self.__class__.__name__

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def new_id(self, request, context):
        return super().newId(request=request, context=context, response=ManufacturerAppService_newIdResponse)


    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def manufacturers(self, request, context):
        response = ManufacturerAppService_manufacturersResponse
        try:
            import src.port_adapter.AppDi as AppDi
            manufacturerAppService: ManufacturerApplicationService = (
                AppDi.instance.get(ManufacturerApplicationService)
            )
            return super().models(request=request, context=context, response=response,
                                     appServiceMethod=manufacturerAppService.manufacturers,
                                     responseAttribute='manufacturers'
                                     )

        except ManufacturerDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("No manufacturers found")
            return response()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return response()

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def manufacturer_by_id(self, request, context):
        response = ManufacturerAppService_manufacturerByIdResponse
        try:
            import src.port_adapter.AppDi as AppDi
            manufacturerAppService: ManufacturerApplicationService = (
                AppDi.instance.get(ManufacturerApplicationService)
            )
            return super().oneModel(request=request, context=context,
                                     response=response,
                                     appServiceMethod=manufacturerAppService.manufacturerById,
                                     responseAttribute='manufacturer',
                                     appServiceParams={'id': request.id}
                                     )
        except ManufacturerDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("daily check procedure does not exist")
            return response()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return response()

    def _addObjectToGrpcResponse(self, obj: Manufacturer, grpcResponseObject):
        kwargs = {
            "id": obj.id(),
            "name": obj.name() if obj.name() is not None else'',
        }
        for k, v in kwargs.items():
            setattr(grpcResponseObject, k, v)
