"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""



import grpc

from src.application.StandardEquipmentCategoryGroupApplicationService import StandardEquipmentCategoryGroupApplicationService
from src.domain_model.project.standard_equipment.standard_category.standard_group.StandardEquipmentCategoryGroup import StandardEquipmentCategoryGroup
from src.domain_model.resource.exception.StandardEquipmentCategoryGroupDoesNotExistException import StandardEquipmentCategoryGroupDoesNotExistException
from src.domain_model.resource.exception.UnAuthorizedException import UnAuthorizedException
from src.port_adapter.api.grpc.listener.CommonBaseListener import CommonBaseListener
from src.resource.logging.decorator import debugLogger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry
from src.resource.proto._generated.standard_equipment_category_group_app_service_pb2 import (
    StandardEquipmentCategoryGroupAppService_standardEquipmentCategoryGroupsResponse,
    StandardEquipmentCategoryGroupAppService_standardEquipmentCategoryGroupByIdResponse,
    StandardEquipmentCategoryGroupAppService_newIdResponse,
    StandardEquipmentCategoryGroupAppService_standardEquipmentCategoryGroupsByStandardEquipmentCategoryIdResponse,
)
from src.resource.proto._generated.standard_equipment_category_group_app_service_pb2_grpc import (
    StandardEquipmentCategoryGroupAppServiceServicer,
)

class StandardEquipmentCategoryGroupAppServiceListener(
    CommonBaseListener, StandardEquipmentCategoryGroupAppServiceServicer
):
    """The listener function implements the rpc call as described in the .proto file"""
    def __init__(self):
        super().__init__()
        import src.port_adapter.AppDi as AppDi
        self._appService: StandardEquipmentCategoryGroupApplicationService = AppDi.instance.get(
            StandardEquipmentCategoryGroupApplicationService
        )


    def __str__(self):
        return self.__class__.__name__

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def new_id(self, request, context):
        return super().newId(request=request, context=context, response=StandardEquipmentCategoryGroupAppService_newIdResponse)


    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def standard_equipment_category_groups(self, request, context):
        response = StandardEquipmentCategoryGroupAppService_standardEquipmentCategoryGroupsResponse
        try:
            import src.port_adapter.AppDi as AppDi
            standardEquipmentCategoryGroupAppService: StandardEquipmentCategoryGroupApplicationService = (
                AppDi.instance.get(StandardEquipmentCategoryGroupApplicationService)
            )
            return super().models(request=request, context=context, response=response,
                                     appServiceMethod=standardEquipmentCategoryGroupAppService.standardEquipmentCategoryGroups,
                                     responseAttribute='standard_equipment_category_groups'
                                     )

        except StandardEquipmentCategoryGroupDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("No standardEquipmentCategoryGroups found")
            return response()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return response()

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def standard_equipment_category_groups_by_standard_equipment_category_id(self, request, context):
        response = StandardEquipmentCategoryGroupAppService_standardEquipmentCategoryGroupsByStandardEquipmentCategoryIdResponse
        try:
            import src.port_adapter.AppDi as AppDi
            standardEquipmentCategoryGroupAppService: StandardEquipmentCategoryGroupApplicationService = (
                AppDi.instance.get(StandardEquipmentCategoryGroupApplicationService)
            )
            return super().models(request=request, context=context, response=response,
                                  appServiceMethod=standardEquipmentCategoryGroupAppService.standardEquipmentCategoryGroupsByStandardEquipmentCategoryId,
                                  responseAttribute='standard_equipment_category_groups',
                                  appServiceParams={"standardEquipmentCategoryId": request.standard_equipment_category_id}
                                  )

        except StandardEquipmentCategoryGroupDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("No standardEquipmentCategoryGroups found")
            return response()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return response()

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def standard_equipment_category_group_by_id(self, request, context):
        response = StandardEquipmentCategoryGroupAppService_standardEquipmentCategoryGroupByIdResponse
        try:
            import src.port_adapter.AppDi as AppDi
            standardEquipmentCategoryGroupAppService: StandardEquipmentCategoryGroupApplicationService = (
                AppDi.instance.get(StandardEquipmentCategoryGroupApplicationService)
            )
            return super().oneModel(request=request, context=context,
                                     response=response,
                                     appServiceMethod=standardEquipmentCategoryGroupAppService.standardEquipmentCategoryGroupById,
                                     responseAttribute='standard_equipment_category_group',
                                     appServiceParams={'id': request.id}
                                     )
        except StandardEquipmentCategoryGroupDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("daily check procedure does not exist")
            return response()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return response()

    def _addObjectToGrpcResponse(self, obj: StandardEquipmentCategoryGroup, grpcResponseObject):
        kwargs = {
            "id": obj.id(),
            "name": obj.name() if obj.name() is not None else '',
            "standard_equipment_category_id": obj.standardEquipmentCategoryId() if obj.standardEquipmentCategoryId() is not None else '',
        }
        for k, v in kwargs.items():
            setattr(grpcResponseObject, k, v)
