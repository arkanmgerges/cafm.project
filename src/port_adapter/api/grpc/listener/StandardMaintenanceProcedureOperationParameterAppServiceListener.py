"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""



import grpc

from src.application.StandardMaintenanceProcedureOperationParameterApplicationService import StandardMaintenanceProcedureOperationParameterApplicationService
from src.domain_model.standard_maintenance.procedure.operation.parameter.StandardMaintenanceProcedureOperationParameter import StandardMaintenanceProcedureOperationParameter
from src.domain_model.resource.exception.StandardMaintenanceProcedureOperationParameterDoesNotExistException import StandardMaintenanceProcedureOperationParameterDoesNotExistException
from src.domain_model.resource.exception.UnAuthorizedException import UnAuthorizedException
from src.port_adapter.api.grpc.listener.CommonBaseListener import CommonBaseListener
from src.resource.logging.decorator import debugLogger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry
from src.resource.proto._generated.standard_maintenance_procedure_operation_parameter_app_service_pb2 import (
    StandardMaintenanceProcedureOperationParameterAppService_standardMaintenanceProcedureOperationParametersResponse,
    StandardMaintenanceProcedureOperationParameterAppService_standardMaintenanceProcedureOperationParameterByIdResponse,
    StandardMaintenanceProcedureOperationParameterAppService_newIdResponse,
    StandardMaintenanceProcedureOperationParameterAppService_standardMaintenanceProcedureOperationParametersByStandardMaintenanceProcedureOperationIdResponse,
)
from src.resource.proto._generated.standard_maintenance_procedure_operation_parameter_app_service_pb2_grpc import (
    StandardMaintenanceProcedureOperationParameterAppServiceServicer,
)

class StandardMaintenanceProcedureOperationParameterAppServiceListener(
    CommonBaseListener, StandardMaintenanceProcedureOperationParameterAppServiceServicer
):
    """The listener function implements the rpc call as described in the .proto file"""
    def __init__(self):
        super().__init__()
        import src.port_adapter.AppDi as AppDi
        self._appService: StandardMaintenanceProcedureOperationParameterApplicationService = AppDi.instance.get(
            StandardMaintenanceProcedureOperationParameterApplicationService
        )


    def __str__(self):
        return self.__class__.__name__

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def new_id(self, request, context):
        return super().newId(request=request, context=context, response=StandardMaintenanceProcedureOperationParameterAppService_newIdResponse)


    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def standard_maintenance_procedure_operation_parameters(self, request, context):
        response = StandardMaintenanceProcedureOperationParameterAppService_standardMaintenanceProcedureOperationParametersResponse
        try:
            import src.port_adapter.AppDi as AppDi
            standardMaintenanceProcedureOperationParameterAppService: StandardMaintenanceProcedureOperationParameterApplicationService = (
                AppDi.instance.get(StandardMaintenanceProcedureOperationParameterApplicationService)
            )
            return super().models(request=request, context=context, response=response,
                                     appServiceMethod=standardMaintenanceProcedureOperationParameterAppService.standardMaintenanceProcedureOperationParameters,
                                     responseAttribute='standard_maintenance_procedure_operation_parameters'
                                     )

        except StandardMaintenanceProcedureOperationParameterDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("No standard maintenance procedure operation parameters found")
            return response()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return response()

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def standard_maintenance_procedure_operation_parameters_by_standard_maintenance_procedure_operation_id(self, request, context):
        response = StandardMaintenanceProcedureOperationParameterAppService_standardMaintenanceProcedureOperationParametersByStandardMaintenanceProcedureOperationIdResponse
        try:
            import src.port_adapter.AppDi as AppDi
            standardMaintenanceProcedureOperationParameterAppService: StandardMaintenanceProcedureOperationParameterApplicationService = (
                AppDi.instance.get(StandardMaintenanceProcedureOperationParameterApplicationService)
            )
            return super().models(request=request, context=context, response=response,
                                  appServiceMethod=standardMaintenanceProcedureOperationParameterAppService.standardMaintenanceProcedureOperationParametersByStandardMaintenanceProcedureOperationId,
                                  responseAttribute='standard_maintenance_procedure_operation_parameters',
                                  appServiceParams={"standardMaintenanceProcedureOperationId": request.standard_maintenance_procedure_operation_id},
                                  )

        except StandardMaintenanceProcedureOperationParameterDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("No standard maintenance procedure operation parameters found")
            return response()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return response()

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def standard_maintenance_procedure_operation_parameter_by_id(self, request, context):
        response = StandardMaintenanceProcedureOperationParameterAppService_standardMaintenanceProcedureOperationParameterByIdResponse
        try:
            import src.port_adapter.AppDi as AppDi
            standardMaintenanceProcedureOperationParameterAppService: StandardMaintenanceProcedureOperationParameterApplicationService = (
                AppDi.instance.get(StandardMaintenanceProcedureOperationParameterApplicationService)
            )
            return super().oneModel(request=request, context=context,
                                     response=response,
                                     appServiceMethod=standardMaintenanceProcedureOperationParameterAppService.standardMaintenanceProcedureOperationParameterById,
                                     responseAttribute='maintenance_procedure_operation_parameter',
                                     appServiceParams={'id': request.id}
                                     )
        except StandardMaintenanceProcedureOperationParameterDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("daily check procedure does not exist")
            return response()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return response()

    def _addObjectToGrpcResponse(self, obj: StandardMaintenanceProcedureOperationParameter, grpcResponseObject):
        kwargs = {
            "id": obj.id(),
            "name": obj.name() if obj.name() is not None else '',
            "unit_id": obj.unitId() if obj.unitId() is not None else '',
            "maintenance_procedure_operation_id": obj.standardMaintenanceProcedureOperationId() if obj.standardMaintenanceProcedureOperationId() is not None else '',
            "min_value": str(obj.minValue()) if obj.minValue() is not None else '0.0',
            "max_value": str(obj.maxValue()) if obj.maxValue() is not None else '0.0',
        }
        for k, v in kwargs.items():
            setattr(grpcResponseObject, k, v)
