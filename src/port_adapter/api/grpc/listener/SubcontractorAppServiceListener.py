"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""



import grpc

from src.application.SubcontractorApplicationService import SubcontractorApplicationService
from src.domain_model.resource.exception.SubcontractorDoesNotExistException import SubcontractorDoesNotExistException
from src.domain_model.resource.exception.UnAuthorizedException import UnAuthorizedException
from src.domain_model.subcontractor.Subcontractor import Subcontractor
from src.port_adapter.api.grpc.listener.CommonBaseListener import CommonBaseListener
from src.resource.logging.decorator import debugLogger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry
from src.resource.proto._generated.subcontractor_app_service_pb2 import (
    SubcontractorAppService_subcontractorsResponse,
    SubcontractorAppService_subcontractorByIdResponse,
    SubcontractorAppService_newIdResponse, SubcontractorAppService_subcontractorsByOrganizationIdResponse,
    SubcontractorAppService_subcontractorsBySubcontractorCategoryIdResponse,
)
from src.resource.proto._generated.subcontractor_app_service_pb2_grpc import (
    SubcontractorAppServiceServicer,
)


class SubcontractorAppServiceListener(
    CommonBaseListener, SubcontractorAppServiceServicer
):
    """The listener function implements the rpc call as described in the .proto file"""
    def __init__(self):
        super().__init__()
        import src.port_adapter.AppDi as AppDi
        self._appService: SubcontractorApplicationService = AppDi.instance.get(
            SubcontractorApplicationService
        )


    def __str__(self):
        return self.__class__.__name__

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def new_id(self, request, context):
        return super().newId(request=request, context=context, response=SubcontractorAppService_newIdResponse)


    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def subcontractors(self, request, context):
        response = SubcontractorAppService_subcontractorsResponse
        try:
            import src.port_adapter.AppDi as AppDi
            subcontractorAppService: SubcontractorApplicationService = (
                AppDi.instance.get(SubcontractorApplicationService)
            )
            return super().models(request=request, context=context, response=response,
                                     appServiceMethod=subcontractorAppService.subcontractors,
                                     responseAttribute='subcontractors'
                                     )

        except SubcontractorDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("No subcontractors found")
            return response()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return response()

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def subcontractors_by_organization_id(self, request, context):
        response = SubcontractorAppService_subcontractorsByOrganizationIdResponse
        try:
            import src.port_adapter.AppDi as AppDi
            subcontractorAppService: SubcontractorApplicationService = (
                AppDi.instance.get(SubcontractorApplicationService)
            )
            return super().models(request=request, context=context, response=response,
                                  appServiceMethod=subcontractorAppService.subcontractorsByOrganizationId,
                                  responseAttribute='subcontractors',
                                  appServiceParams={"organizationId": request.organization_id}
                                  )

        except SubcontractorDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("No subcontractors found")
            return response()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return response()


    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def subcontractors_by_subcontractor_category_id(self, request, context):
        response = SubcontractorAppService_subcontractorsBySubcontractorCategoryIdResponse
        try:
            import src.port_adapter.AppDi as AppDi
            subcontractorAppService: SubcontractorApplicationService = (
                AppDi.instance.get(SubcontractorApplicationService)
            )
            return super().models(request=request, context=context, response=response,
                                  appServiceMethod=subcontractorAppService.subcontractorsBySubcontractorCategoryId,
                                  responseAttribute='subcontractors',
                                  appServiceParams={"subcontractorCategoryId": request.subcontractor_category_id}
                                  )

        except SubcontractorDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("No subcontractors found")
            return response()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return response()

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def subcontractor_by_id(self, request, context):
        response = SubcontractorAppService_subcontractorByIdResponse
        try:
            import src.port_adapter.AppDi as AppDi
            subcontractorAppService: SubcontractorApplicationService = (
                AppDi.instance.get(SubcontractorApplicationService)
            )
            return super().oneModel(request=request, context=context,
                                     response=response,
                                     appServiceMethod=subcontractorAppService.subcontractorById,
                                     responseAttribute='subcontractor',
                                     appServiceParams={'id': request.id}
                                     )
        except SubcontractorDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("daily check procedure does not exist")
            return response()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return response()

    def _addObjectToGrpcResponse(self, obj: Subcontractor, grpcResponseObject):
        kwargs = {
            "id": obj.id(),
            "company_name": obj.companyName() if obj.companyName() is not None else '',
            "website_url": obj.websiteUrl() if obj.websiteUrl() is not None else '',
            "contact_person": obj.contactPerson() if obj.contactPerson() is not None else '',
            "email": obj.email() if obj.email() is not None else '',
            "phone_number": obj.phoneNumber() if obj.phoneNumber() is not None else '',
            "address_one": obj.addressOne() if obj.addressOne() is not None else '',
            "address_two": obj.addressTwo() if obj.addressTwo() is not None else '',
            "subcontractor_category_id": obj.subcontractorCategoryId() if obj.subcontractorCategoryId() is not None else '',
            "description": obj.description() if obj.description() is not None else '',
            "city_id": obj.cityId() if obj.cityId() is not None else 0,
            "country_id": obj.countryId() if obj.countryId() is not None else 0,
            "state_id": obj.stateId() if obj.stateId() is not None else '',
            "postal_code": obj.postalCode() if obj.postalCode() is not None else '',
        }
        for k, v in kwargs.items():
            setattr(grpcResponseObject, k, v)
