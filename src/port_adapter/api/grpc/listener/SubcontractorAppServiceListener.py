"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""


import time
from typing import Any

import grpc

import src.port_adapter.AppDi as AppDi
from src.application.SubcontractorApplicationService import (
    SubcontractorApplicationService,
)
from src.domain_model.subcontractor.Subcontractor import Subcontractor
from src.domain_model.resource.exception.UnAuthorizedException import (
    UnAuthorizedException,
)
from src.domain_model.resource.exception.SubcontractorDoesNotExistException import (
    SubcontractorDoesNotExistException,
)
from src.domain_model.token.TokenService import TokenService
from src.port_adapter.api.grpc.listener.BaseListener import BaseListener
from src.resource.logging.decorator import debugLogger
from src.resource.logging.logger import logger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry
from src.resource.proto._generated.subcontractor_app_service_pb2 import (
    SubcontractorAppService_subcontractorsResponse,
    SubcontractorAppService_subcontractorByIdResponse,
    SubcontractorAppService_newIdResponse,
    SubcontractorAppService_subcontractorsByOrganizationIdResponse,
)
from src.resource.proto._generated.subcontractor_app_service_pb2_grpc import (
    SubcontractorAppServiceServicer,
)
from src.resource.proto._generated.subcontractor_app_service_pb2 import (
    SubcontractorAppService_subcontractorsBySubcontractorCategoryIdResponse,
)


class SubcontractorAppServiceListener(SubcontractorAppServiceServicer, BaseListener):
    """The listener function implements the rpc call as described in the .proto file"""

    def __init__(self):
        self.counter = 0
        self.last_print_time = time.time()
        self._tokenService = TokenService()

    def __str__(self):
        return self.__class__.__name__

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def newId(self, request, context):
        try:
            token = self._token(context)
            claims = (
                self._tokenService.claimsFromToken(token=token)
                if "token" != ""
                else None
            )
            logger.debug(
                f"[{SubcontractorAppServiceListener.newId.__qualname__}] - claims: {claims}\n\t \
                    token: {token}"
            )
            subcontractorAppService: SubcontractorApplicationService = (
                AppDi.instance.get(SubcontractorApplicationService)
            )
            return SubcontractorAppService_newIdResponse(
                id=subcontractorAppService.newId()
            )
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return SubcontractorAppService_newIdResponse()

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def subcontractors(self, request, context):
        try:
            token = self._token(context)

            resultSize = request.resultSize if request.resultSize >= 0 else 10
            claims = (
                self._tokenService.claimsFromToken(token=token)
                if "token" != ""
                else None
            )
            logger.debug(
                f"[{SubcontractorAppServiceListener.subcontractors.__qualname__}] - claims: {claims}\n\t \
resultFrom: {request.resultFrom}, resultSize: {resultSize}, token: {token}"
            )
            subcontractorAppService: SubcontractorApplicationService = (
                AppDi.instance.get(SubcontractorApplicationService)
            )

            orderData = [
                {"orderBy": o.orderBy, "direction": o.direction} for o in request.order
            ]
            result: dict = subcontractorAppService.subcontractors(
                resultFrom=request.resultFrom,
                resultSize=resultSize,
                token=token,
                order=orderData,
            )
            response = SubcontractorAppService_subcontractorsResponse()
            for item in result["items"]:
                response.subcontractors.add(
                    id=item.id(),
                    companyName=item.companyName(),
                    websiteUrl=item.websiteUrl(),
                    contactPerson=item.contactPerson(),
                    email=item.email(),
                    phoneNumber=item.phoneNumber(),
                    addressOne=item.addressOne(),
                    addressTwo=item.addressTwo(),
                    subcontractorCategoryId=item.subcontractorCategoryId()
                    if item.subcontractorCategoryId is not None
                    else "",
                    description=item.description(),
                    cityId=item.cityId(),
                    countryId=item.countryId(),
                    stateId=item.stateId(),
                    postalCode=item.postalCode(),
                )
            response.totalItemCount = result["totalItemCount"]
            logger.debug(
                f"[{SubcontractorAppServiceListener.subcontractors.__qualname__}] - response: {response}"
            )
            return SubcontractorAppService_subcontractorsResponse(
                subcontractors=response.subcontractors,
                totalItemCount=response.totalItemCount,
            )
        except SubcontractorDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("No subcontractors found")
            return SubcontractorAppService_subcontractorsResponse()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return SubcontractorAppService_subcontractorsResponse()

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def subcontractorsByOrganizationId(self, request, context):
        try:
            organizationId = request.organizationId
            token = self._token(context)

            resultSize = request.resultSize if request.resultSize >= 0 else 10
            claims = (
                self._tokenService.claimsFromToken(token=token)
                if "token" != ""
                else None
            )
            logger.debug(
                f"[{SubcontractorAppServiceListener.subcontractorsByOrganizationId.__qualname__}] - claims: {claims}\n\t \
resultFrom: {request.resultFrom}, resultSize: {resultSize}, token: {token}"
            )
            subcontractorAppService: SubcontractorApplicationService = (
                AppDi.instance.get(SubcontractorApplicationService)
            )

            orderData = [
                {"orderBy": o.orderBy, "direction": o.direction} for o in request.order
            ]
            result: dict = subcontractorAppService.subcontractorsByOrganizationId(
                organizationId=organizationId,
                resultFrom=request.resultFrom,
                resultSize=resultSize,
                token=token,
                order=orderData,
            )
            response = SubcontractorAppService_subcontractorsByOrganizationIdResponse()
            for subcontractor in result["items"]:
                response.subcontractors.add(
                    id=subcontractor.id(),
                    companyName=subcontractor.companyName(),
                    websiteUrl=subcontractor.websiteUrl(),
                    contactPerson=subcontractor.contactPerson(),
                    email=subcontractor.email(),
                    phoneNumber=subcontractor.phoneNumber(),
                    addressOne=subcontractor.addressOne(),
                    addressTwo=subcontractor.addressTwo(),
                    subcontractorCategoryId=subcontractor.subcontractorCategoryId()
                    if subcontractor.subcontractorCategoryId is not None
                    else "",
                    description=subcontractor.description(),
                    cityId=subcontractor.cityId(),
                    countryId=subcontractor.countryId(),
                    stateId=subcontractor.stateId(),
                    postalCode=subcontractor.postalCode(),
                )
            response.totalItemCount = result["totalItemCount"]
            logger.debug(
                f"[{SubcontractorAppServiceListener.subcontractorsByOrganizationId.__qualname__}] - response: {response}"
            )
            return SubcontractorAppService_subcontractorsByOrganizationIdResponse(
                subcontractors=response.subcontractors,
                totalItemCount=response.totalItemCount,
            )
        except SubcontractorDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("No subcontractors found")
            return SubcontractorAppService_subcontractorsResponse()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return SubcontractorAppService_subcontractorsResponse()

    """
    c4model|cb|project:Component(identity__grpc__SubcontractorAppServiceListener__subcontractorById, "Get subcontractor by id", "grpc listener", "Get a subcontractor by id")
    """

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def subcontractorById(self, request, context):
        try:
            token = self._token(context)
            subcontractorAppService: SubcontractorApplicationService = (
                AppDi.instance.get(SubcontractorApplicationService)
            )
            obj: Subcontractor = subcontractorAppService.subcontractorById(
                id=request.id, token=token
            )
            logger.debug(
                f"[{SubcontractorAppServiceListener.subcontractorById.__qualname__}] - response: {obj}"
            )
            response = SubcontractorAppService_subcontractorByIdResponse()
            self._addObjectToResponse(obj=obj, response=response)
            return response
        except SubcontractorDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("subcontractor does not exist")
            return SubcontractorAppService_subcontractorByIdResponse()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return SubcontractorAppService_subcontractorByIdResponse()

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def subcontractorsBySubcontractorCategoryId(self, request, context):
        try:
            token = self._token(context)

            resultSize = request.resultSize if request.resultSize >= 0 else 10
            claims = (
                self._tokenService.claimsFromToken(token=token)
                if "token" != ""
                else None
            )
            logger.debug(
                f"[{SubcontractorAppServiceListener.subcontractorsBySubcontractorCategoryId.__qualname__}] - claims: {claims}\n\t \
resultFrom: {request.resultFrom}, resultSize: {resultSize}, token: {token}"
            )
            subcontractorAppService: SubcontractorApplicationService = (
                AppDi.instance.get(SubcontractorApplicationService)
            )

            orderData = [
                {"orderBy": o.orderBy, "direction": o.direction} for o in request.order
            ]
            result: dict = (
                subcontractorAppService.subcontractorsBySubcontractorCategoryId(
                    subcontractorCategoryId=request.subcontractorCategoryId,
                    resultFrom=request.resultFrom,
                    resultSize=resultSize,
                    token=token,
                    order=orderData,
                )
            )
            response = (
                SubcontractorAppService_subcontractorsBySubcontractorCategoryIdResponse()
            )
            for item in result["items"]:
                response.subcontractors.add(
                    id=item.id(),
                    companyName=item.companyName(),
                    websiteUrl=item.websiteUrl(),
                    contactPerson=item.contactPerson(),
                    email=item.email(),
                    phoneNumber=item.phoneNumber(),
                    addressOne=item.addressOne(),
                    addressTwo=item.addressTwo(),
                    subcontractorCategoryId=item.subcontractorCategoryId()
                    if item.subcontractorCategoryId is not None
                    else "",
                    description=item.description(),
                    cityId=item.cityId(),
                    countryId=item.countryId(),
                    stateId=item.stateId(),
                    postalCode=item.postalCode(),
                )
            response.totalItemCount = result["totalItemCount"]
            logger.debug(
                f"[{SubcontractorAppServiceListener.subcontractorsBySubcontractorCategoryId.__qualname__}] - response: {response}"
            )
            return (
                SubcontractorAppService_subcontractorsBySubcontractorCategoryIdResponse(
                    subcontractors=response.subcontractors,
                    totalItemCount=response.totalItemCount,
                )
            )
        except SubcontractorDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("No subcontractors found")
            return (
                SubcontractorAppService_subcontractorsBySubcontractorCategoryIdResponse()
            )
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return (
                SubcontractorAppService_subcontractorsBySubcontractorCategoryIdResponse()
            )
        # TODO: except Exception as err:
        # do something if other type of error

    @debugLogger
    def _addObjectToResponse(self, obj: Subcontractor, response: Any):
        response.subcontractor.id = obj.id()
        response.subcontractor.companyName = obj.companyName()
        response.subcontractor.websiteUrl = obj.websiteUrl()
        response.subcontractor.contactPerson = obj.contactPerson()
        response.subcontractor.email = obj.email()
        response.subcontractor.phoneNumber = obj.phoneNumber()
        response.subcontractor.addressOne = obj.addressOne()
        response.subcontractor.addressTwo = obj.addressTwo()
        response.subcontractor.subcontractorCategoryId = (
            obj.subcontractorCategoryId()
            if obj.subcontractorCategoryId() is not None
            else ""
        )
        response.subcontractor.description = obj.description()
        response.subcontractor.cityId = obj.cityId() if obj.cityId() is not None else 0
        response.subcontractor.countryId = (
            obj.countryId() if obj.countryId() is not None else 0
        )
        response.subcontractor.stateId = obj.stateId()
        response.subcontractor.postalCode = obj.postalCode()

    @debugLogger
    def _token(self, context) -> str:
        return super()._token(context=context)
