"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""


import time
from typing import Any

import grpc

import src.port_adapter.AppDi as AppDi
from src.application.UnitApplicationService import UnitApplicationService
from src.domain_model.project.unit.Unit import Unit
from src.domain_model.resource.exception.UnAuthorizedException import (
    UnAuthorizedException,
)
from src.domain_model.resource.exception.UnitDoesNotExistException import (
    UnitDoesNotExistException,
)
from src.domain_model.token.TokenService import TokenService
from src.port_adapter.api.grpc.listener.BaseListener import BaseListener
from src.resource.logging.decorator import debugLogger
from src.resource.logging.logger import logger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry
from src.resource.proto._generated.unit_app_service_pb2 import (
    UnitAppService_unitsResponse,
    UnitAppService_unitByIdResponse,
    UnitAppService_newIdResponse,
)
from src.resource.proto._generated.unit_app_service_pb2_grpc import (
    UnitAppServiceServicer,
)


class UnitAppServiceListener(UnitAppServiceServicer, BaseListener):
    """The listener function implements the rpc call as described in the .proto file"""

    def __init__(self):
        self.counter = 0
        self.last_print_time = time.time()
        self._tokenService = TokenService()

    def __str__(self):
        return self.__class__.__name__

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def newId(self, request, context):
        try:
            token = self._token(context)

            claims = (
                self._tokenService.claimsFromToken(token=token)
                if "token" != ""
                else None
            )
            logger.debug(
                f"[{UnitAppServiceListener.newId.__qualname__}] - claims: {claims}\n\t \
                    token: {token}"
            )
            appService: UnitApplicationService = AppDi.instance.get(
                UnitApplicationService
            )
            return UnitAppService_newIdResponse(id=appService.newId())
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return UnitAppService_newIdResponse()

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def units(self, request, context):
        try:
            token = self._token(context)

            resultSize = request.resultSize if request.resultSize >= 0 else 10
            claims = (
                self._tokenService.claimsFromToken(token=token)
                if "token" != ""
                else None
            )
            logger.debug(
                f"[{UnitAppServiceListener.units.__qualname__}] - claims: {claims}\n\t \
resultFrom: {request.resultFrom}, resultSize: {resultSize}, token: {token}"
            )
            unitAppService: UnitApplicationService = AppDi.instance.get(
                UnitApplicationService
            )
            orderData = [
                {"orderBy": o.orderBy, "direction": o.direction} for o in request.order
            ]
            result: dict = unitAppService.units(
                resultFrom=request.resultFrom,
                resultSize=resultSize,
                token=token,
                order=orderData,
            )
            response = UnitAppService_unitsResponse()
            for item in result["items"]:
                response.units.add(
                    id=item.id(),
                    name=item.name(),
                )
            response.totalItemCount = result["totalItemCount"]
            logger.debug(
                f"[{UnitAppServiceListener.units.__qualname__}] - response: {response}"
            )
            return UnitAppService_unitsResponse(
                units=response.units, totalItemCount=response.totalItemCount
            )
        except UnitDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("No units found")
            return UnitAppService_unitsResponse()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return UnitAppService_unitsResponse()

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def unitById(self, request, context):
        try:
            token = self._token(context)
            appService: UnitApplicationService = AppDi.instance.get(
                UnitApplicationService
            )
            obj: Unit = appService.unitById(id=request.id, token=token)
            logger.debug(
                f"[{UnitAppServiceListener.unitById.__qualname__}] - response: {obj}"
            )
            response = UnitAppService_unitByIdResponse()
            self._addObjectToResponse(obj=obj, response=response)
            return response
        except UnitDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("unit does not exist")
            return UnitAppService_unitByIdResponse()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return UnitAppService_unitByIdResponse()

    @debugLogger
    def _addObjectToResponse(self, obj: Unit, response: Any):
        response.unit.id = obj.id()
        response.unit.name = obj.name()

    @debugLogger
    def _token(self, context) -> str:
        return super()._token(context=context)
