"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""



import grpc

from src.application.UserApplicationService import UserApplicationService
from src.domain_model.user.User import User
from src.domain_model.resource.exception.UserDoesNotExistException import UserDoesNotExistException
from src.domain_model.resource.exception.UnAuthorizedException import UnAuthorizedException
from src.port_adapter.api.grpc.listener.CommonBaseListener import CommonBaseListener
from src.resource.logging.decorator import debugLogger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry
from src.resource.proto._generated.user_app_service_pb2 import (
    UserAppService_usersResponse,
    UserAppService_userByIdResponse,
    UserAppService_newIdResponse, UserAppService_userByEmailResponse,
)
from src.resource.proto._generated.user_app_service_pb2_grpc import (
    UserAppServiceServicer,
)

class UserAppServiceListener(
    CommonBaseListener, UserAppServiceServicer
):
    """The listener function implements the rpc call as described in the .proto file"""
    def __init__(self):
        import src.port_adapter.AppDi as AppDi
        self._appService: UserApplicationService = AppDi.instance.get(
            UserApplicationService
        )
        super().__init__()


    def __str__(self):
        return self.__class__.__name__

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def new_id(self, request, context):
        return super().newId(request=request, context=context, response=UserAppService_newIdResponse)


    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def users(self, request, context):
        response = UserAppService_usersResponse
        try:
            import src.port_adapter.AppDi as AppDi
            userAppService: UserApplicationService = (
                AppDi.instance.get(UserApplicationService)
            )
            return super().models(request=request, context=context, response=response,
                                     appServiceMethod=userAppService.users,
                                     responseAttribute='users'
                                     )

        except UserDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("No users found")
            return response()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return response()

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def user_by_id(self, request, context):
        response = UserAppService_userByIdResponse
        try:
            import src.port_adapter.AppDi as AppDi
            userAppService: UserApplicationService = (
                AppDi.instance.get(UserApplicationService)
            )
            return super().oneModel(request=request, context=context,
                                     response=response,
                                     appServiceMethod=userAppService.userById,
                                     responseAttribute='user',
                                     appServiceParams={'id': request.id}
                                     )
        except UserDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("daily check procedure does not exist")
            return response()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return response()

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def users_by_organization_id(self, request, context):
        response = UserAppService_usersResponse
        try:
            import src.port_adapter.AppDi as AppDi
            userAppService: UserApplicationService = (
                AppDi.instance.get(UserApplicationService)
            )
            return super().models(request=request, context=context, response=response,
                                  appServiceMethod=userAppService.usersByOrganizationId,
                                  responseAttribute='users',
                                  appServiceParams={"organizationId": request.organization_id}
                                  )
        except UserDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("No users found")
            return UserAppService_usersResponse()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return UserAppService_usersResponse()

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def user_by_email(self, request, context):
        response = UserAppService_userByEmailResponse
        try:
            import src.port_adapter.AppDi as AppDi
            userAppService: UserApplicationService = (
                AppDi.instance.get(UserApplicationService)
            )
            return super().oneModel(request=request, context=context,
                                    response=response,
                                    appServiceMethod=userAppService.userByEmail,
                                    responseAttribute='user',
                                    appServiceParams={'email': request.email}
                                    )
        except UserDoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("daily check procedure does not exist")
            return response()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return response()

    def _addObjectToGrpcResponse(self, obj: User, grpcResponseObject):
        kwargs = {
            "id": obj.id(),
            "email": obj.email() if obj.email() is not None else '',
            "first_name": obj.firstName() if obj.firstName() is not None else '',
            "last_name": obj.lastName() if obj.lastName() is not None else '',
            "address_one": obj.addressOne() if obj.addressOne() is not None else '',
            "address_two": obj.addressTwo() if obj.addressTwo() is not None else '',
            "postal_code": obj.postalCode() if obj.postalCode() is not None else '',
            "phone_number": obj.phoneNumber() if obj.phoneNumber() is not None else '',
            "avatar_image": obj.avatarImage() if obj.avatarImage() is not None else '',
            "country_id": obj.countryId() if obj.countryId() is not None else 0,
            "city_id": obj.cityId() if obj.cityId() is not None else 0,
            "country_state_name": obj.countryStateName() if obj.countryStateName() is not None else '',
            "country_state_iso_code": obj.countryStateIsoCode() if obj.countryStateIsoCode() is not None else '',
            "start_date": obj.startDate() if obj.startDate() is not None else 0,
        }
        for k, v in kwargs.items():
            setattr(grpcResponseObject, k, v)
