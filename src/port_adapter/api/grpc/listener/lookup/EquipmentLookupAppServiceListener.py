"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""



import time

import grpc

import src.port_adapter.AppDi as AppDi
from src.application.lookup.equipment.EquipmentProjectCategory import EquipmentProjectCategory
from src.application.lookup.equipment.EquipmentCategory import EquipmentCategory
from src.application.lookup.equipment.EquipmentCategoryGroup import EquipmentCategoryGroup
from src.application.lookup.equipment.Building import Building
from src.application.lookup.equipment.BuildingLevel import BuildingLevel
from src.application.lookup.equipment.BuildingLevelRoom import BuildingLevelRoom
from src.application.lookup.equipment.MaintenanceProcedureOperation import MaintenanceProcedureOperation
from src.application.lookup.equipment.MaintenanceProcedureOperationParameter import \
    MaintenanceProcedureOperationParameter
from src.application.lookup.equipment.Manufacturer import Manufacturer
from src.application.lookup.equipment.EquipmentModel import EquipmentModel
from src.application.lookup.equipment.MaintenanceProcedure import MaintenanceProcedure
from src.application.lookup.equipment.EquipmentLookup import EquipmentLookup
from src.application.lookup.equipment.EquipmentLookupApplicationService import EquipmentLookupApplicationService
from src.application.lookup.equipment.Unit import Unit
from src.application.lookup.model_data.BaseLookupModel import BaseLookupModel
from src.domain_model.resource.exception.UnAuthorizedException import (
    UnAuthorizedException,
)

from src.domain_model.token.TokenService import TokenService
from src.port_adapter.api.grpc.listener.BaseListener import BaseListener
from src.resource.common.Util import Util
from src.resource.logging.decorator import debugLogger
from src.resource.logging.logger import logger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry
from src.resource.proto._generated.lookup.equipment.equipment_lookup_app_service_pb2 import \
    EquipmentLookupAppService_lookupResponse
from src.resource.proto._generated.lookup.equipment.equipment_lookup_app_service_pb2_grpc import \
    EquipmentLookupAppServiceServicer
from src.resource.proto._generated.lookup.equipment.equipment_project_category_pb2 import EquipmentProjectCategory as ProtoEquipmentProjectCategory
from src.resource.proto._generated.lookup.equipment.equipment_category_pb2 import EquipmentCategory as ProtoEquipmentCategory
from src.resource.proto._generated.lookup.equipment.equipment_category_group_pb2 import EquipmentCategoryGroup as ProtoEquipmentCategoryGroup
from src.resource.proto._generated.lookup.equipment.building_pb2 import Building as ProtoBuilding
from src.resource.proto._generated.lookup.equipment.building_level_pb2 import BuildingLevel as ProtoBuildingLevel
from src.resource.proto._generated.lookup.equipment.building_level_room_pb2 import BuildingLevelRoom as ProtoBuildingLevelRoom
from src.resource.proto._generated.lookup.equipment.manufacturer_pb2 import Manufacturer as ProtoManufacturer
from src.resource.proto._generated.lookup.equipment.equipment_model_pb2 import EquipmentModel as ProtoEquipmentModel
from src.resource.proto._generated.lookup.equipment.maintenance_procedure_pb2 import MaintenanceProcedure as ProtoMaintenanceProcedure
from src.resource.proto._generated.lookup.equipment.maintenance_procedure_operation_pb2 import MaintenanceProcedureOperation as ProtoMaintenanceProcedureOperation
from src.resource.proto._generated.lookup.equipment.maintenance_procedure_operation_parameter_pb2 import MaintenanceProcedureOperationParameter as ProtoMaintenanceProcedureOperationParameter
from src.resource.proto._generated.lookup.equipment.unit_pb2 import Unit as ProtoUnit

class EquipmentLookupAppServiceListener(EquipmentLookupAppServiceServicer, BaseListener):
    """The listener function implements the rpc call as described in the .proto file"""

    def __init__(self):
        self.counter = 0
        self.last_print_time = time.time()
        self._tokenService = TokenService()

    def __str__(self):
        return self.__class__.__name__

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def lookup(self, request, context):
        try:
            token = self._token(context)

            resultFrom = request.resultFrom if request.resultFrom >= 0 else 0
            resultSize = request.resultSize if request.resultSize >= 0 else 10
            claims = (
                self._tokenService.claimsFromToken(token=token)
                if "token" != ""
                else None
            )
            logger.debug(
                f"[{EquipmentLookupAppServiceListener.lookup.__qualname__}] - claims: {claims}\n\t \
resultFrom: {request.resultFrom}, resultSize: {resultSize}, orders: {request.orders}, filters: {request.filters}, token: {token}"
            )
            appService: EquipmentLookupApplicationService = AppDi.instance.get(
                EquipmentLookupApplicationService
            )
            orderData = [
                {"orderBy": o.orderBy, "direction": o.direction} for o in request.orders
            ]
            filterData = [
                {"key": o.key, "value": o.value} for o in request.filters
            ]
            result: dict = appService.lookup(
                resultFrom=resultFrom,
                resultSize=resultSize,
                token=token,
                orders=orderData,
                filters=filterData,
            )

            response = EquipmentLookupAppService_lookupResponse()
            for item in result["items"]:
                response.equipments.add(**self._kwargsByObject(item))
            response.totalItemCount = result["totalItemCount"]
            logger.debug(
                f"[{EquipmentLookupAppServiceListener.lookup.__qualname__}] - response: {response}"
            )
            return response
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Not Authorized")
            return EquipmentLookupAppService_lookupResponse()

    def _kwargsByObject(self, instance: BaseLookupModel) -> dict:
        kwargs = {}
        for lookupModelAttributeKey, lookupModelAttributeData in instance.attributes().items():
            modelValue = getattr(instance, lookupModelAttributeKey, None)
            if lookupModelAttributeData.isClass:
                if lookupModelAttributeData.isArray and type(modelValue) is list:
                    kwargs[lookupModelAttributeKey] = []
                    if modelValue is not None:
                        kwargs[lookupModelAttributeKey] = [self._kwargsByObject(x) for x in modelValue]
                else:
                    lowerCamelCaseAttributes = {}
                    if modelValue is not None:
                        lowerCamelCaseAttributes = dict((Util.snakeCaseToLowerCameCaseString(key), value) for key, value in
                                                        modelValue.toMap().items())
                    kwargs[lookupModelAttributeKey] = self._lookupModelDataTypeToGrpcType(lookupModelAttributeData.dataType)(
                        **lowerCamelCaseAttributes)
            else:
                kwargs[lookupModelAttributeKey] = modelValue
        return kwargs

    def _lookupModelDataTypeToGrpcType(self, modelDataType):
        mapping = {
            EquipmentProjectCategory: ProtoEquipmentProjectCategory,
            EquipmentCategory: ProtoEquipmentCategory,
            EquipmentCategoryGroup: ProtoEquipmentCategoryGroup,
            Building: ProtoBuilding,
            BuildingLevel: ProtoBuildingLevel,
            BuildingLevelRoom: ProtoBuildingLevelRoom,
            Manufacturer: ProtoManufacturer,
            EquipmentModel: ProtoEquipmentModel,
            MaintenanceProcedure: ProtoMaintenanceProcedure,
            MaintenanceProcedureOperation: ProtoMaintenanceProcedureOperation,
            MaintenanceProcedureOperationParameter: ProtoMaintenanceProcedureOperationParameter,
            Unit: ProtoUnit,
        }

        return mapping[modelDataType] if modelDataType in mapping else None

    @debugLogger
    def _token(self, context) -> str:
        return super()._token(context=context)
