"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

import src.port_adapter.AppDi as AppDi
from src.application.lookup.subcontractor.City import City
from src.application.lookup.subcontractor.Country import Country
from src.application.lookup.subcontractor.State import State
from src.application.lookup.subcontractor.SubcontractorCategory import SubcontractorCategory
from src.application.lookup.subcontractor.SubcontractorLookupApplicationService import \
    SubcontractorLookupApplicationService
from src.port_adapter.api.grpc.listener.lookup.BaseLookupListener import BaseLookupListener
from src.resource.proto._generated.lookup.subcontractor.city_pb2 import City as ProtoCity
from src.resource.proto._generated.lookup.subcontractor.country_pb2 import Country as ProtoCountry
from src.resource.proto._generated.lookup.subcontractor.state_pb2 import State as ProtoState
from src.resource.proto._generated.lookup.subcontractor.subcontractor_category_pb2 import \
    SubcontractorCategory as ProtoSubcontractorCategory
from src.resource.proto._generated.lookup.subcontractor.subcontractor_lookup_app_service_pb2 import \
    SubcontractorLookupAppService_lookupResponse
from src.resource.proto._generated.lookup.subcontractor.subcontractor_lookup_app_service_pb2_grpc import \
    SubcontractorLookupAppServiceServicer


class SubcontractorLookupAppServiceListener(BaseLookupListener, SubcontractorLookupAppServiceServicer):
    """The listener function implements the rpc call as described in the .proto file"""

    def __init__(self):
        super().__init__()
        self._appService: SubcontractorLookupApplicationService = AppDi.instance.get(
            SubcontractorLookupApplicationService
        )
        self._lookupResponse = SubcontractorLookupAppService_lookupResponse
        self._responseAttribute = 'subcontractors'

    def __str__(self):
        return self.__class__.__name__


    def _lookupModelDataTypeToGrpcType(self, modelDataType):
        mapping = {
            State: ProtoState,
            Country: ProtoCountry,
            City: ProtoCity,
            SubcontractorCategory: ProtoSubcontractorCategory
        }

        return mapping[modelDataType] if modelDataType in mapping else None
