"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

import json

import src.port_adapter.AppDi as AppDi
from src.application.EquipmentApplicationService import EquipmentApplicationService
from src.domain_model.resource.exception.UnAuthorizedException import (
    UnAuthorizedException,
)
from src.port_adapter.messaging.listener.CommandConstant import CommonCommandConstant
from src.port_adapter.messaging.listener.common.handler.Handler import Handler
from src.resource.common.DateTimeHelper import DateTimeHelper
from src.resource.logging.logger import logger


class UpdateEquipmentHandler(Handler):
    def __init__(self):
        self._commandConstant = CommonCommandConstant.UPDATE_EQUIPMENT

    def canHandle(self, name: str) -> bool:
        return name == self._commandConstant.value

    def handleCommand(self, messageData: dict, extraData: dict = None) -> dict:
        name = messageData["name"]
        data = messageData["data"]
        metadata = messageData["metadata"]

        logger.debug(
            f"[{UpdateEquipmentHandler.handleCommand.__qualname__}] - received args:\ntype(name): {type(name)}, name: {name}\ntype(data): {type(data)}, data: {data}\ntype(metadata): {type(metadata)}, metadata: {metadata}"
        )

        appService: EquipmentApplicationService = AppDi.instance.get(
            EquipmentApplicationService
        )
        dataDict = json.loads(data)
        metadataDict = json.loads(metadata)

        if "token" not in metadataDict:
            raise UnAuthorizedException()

        id = dataDict["equipment_id"] if "equipment_id" in dataDict else None
        appService.updateEquipment(
            id=id,
            name=dataDict["name"] if "name" in dataDict else None,
            projectId=dataDict["project_id"] if "project_id" in dataDict else None,
            equipmentProjectCategoryId=dataDict["equipment_project_category_id"]
            if "equipment_project_category_id" in dataDict
            else None,
            equipmentCategoryId=dataDict["equipment_category_id"]
            if "equipment_category_id" in dataDict
            else None,
            equipmentCategoryGroupId=dataDict["equipment_category_group_id"]
            if "equipment_category_group_id" in dataDict
            else None,
            buildingId=dataDict["building_id"] if "building_id" in dataDict else None,
            buildingLevelId=dataDict["building_level_id"]
            if "building_level_id" in dataDict
            else None,
            buildingLevelRoomId=dataDict["building_level_room_id"]
            if "building_level_room_id" in dataDict
            else None,
            manufacturerId=dataDict["manufacturer_id"]
            if "manufacturer_id" in dataDict
            else None,
            equipmentModelId=dataDict["equipment_model_id"]
            if "equipment_model_id" in dataDict
            else None,
            quantity=dataDict["quantity"] if "quantity" in dataDict else None,
            token=metadataDict["token"],
        )
        return {
            "name": self._commandConstant.value,
            "created_on": DateTimeHelper.utcNow(),
            "data": dataDict,
            "metadata": metadataDict,
        }
