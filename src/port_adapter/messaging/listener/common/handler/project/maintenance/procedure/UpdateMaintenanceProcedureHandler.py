"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""


import json

import src.port_adapter.AppDi as AppDi
from src.application.MaintenanceProcedureApplicationService import MaintenanceProcedureApplicationService
from src.domain_model.resource.exception.UnAuthorizedException import UnAuthorizedException
from src.port_adapter.messaging.listener.CommandConstant import CommonCommandConstant
from src.port_adapter.messaging.listener.common.handler.Handler import Handler
from src.resource.common.DateTimeHelper import DateTimeHelper
from src.resource.logging.logger import logger


class UpdateMaintenanceProcedureHandler(Handler):

    def __init__(self):
        self._commandConstant = CommonCommandConstant.UPDATE_MAINTENANCE_PROCEDURE

    def canHandle(self, name: str) -> bool:
        return name == self._commandConstant.value

    def handleCommand(self, messageData: dict) -> dict:
        name = messageData['name']
        data = messageData['data']
        metadata = messageData['metadata']

        logger.debug(
            f'[{UpdateMaintenanceProcedureHandler.handleCommand.__qualname__}] - received args:\ntype(name): {type(name)}, name: {name}\ntype(data): {type(data)}, data: {data}\ntype(metadata): {type(metadata)}, metadata: {metadata}')

        appService: MaintenanceProcedureApplicationService = AppDi.instance.get(MaintenanceProcedureApplicationService)
        dataDict = json.loads(data)
        metadataDict = json.loads(metadata)

        if 'token' not in metadataDict:
            raise UnAuthorizedException()

        id = dataDict['maintenance_procedure_id'] if 'maintenance_procedure_id' in dataDict else None
        appService.updateMaintenanceProcedure(id=id,
                                              name=dataDict["name"] if dataDict['name'] is not None else None,
                                              type=dataDict["type"] if dataDict['type'] is not None else None,
                                              frequency=dataDict["frequency"] if dataDict['frequency'] is not None else None,
                                              startDate=int(dataDict["start_date"]) if 'start_date' in dataDict and dataDict['start_date'] is not None else None,
                                              subcontractorId=dataDict["subcontractor_id"] if dataDict['subcontractor_id'] is not None else None,
                                              equipmentId=dataDict["equipment_id"] if dataDict['equipment_id'] is not None else None,
                                              token=metadataDict['token'])
        return {'name': self._commandConstant.value, 'created_on': DateTimeHelper.utcNow(),
                'data': dataDict,
                'metadata': metadataDict}
