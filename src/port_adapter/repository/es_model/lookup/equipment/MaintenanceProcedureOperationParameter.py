"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""



from elasticsearch_dsl import InnerDoc, Keyword, Float, Nested

from src.port_adapter.repository.es_model.lookup.equipment.Unit import Unit
from src.port_adapter.repository.es_model.model.EsModelAttributeData import EsModelAttributeData
from src.resource.common.Util import Util


class MaintenanceProcedureOperationParameter(InnerDoc):
    id = Keyword()
    name = Keyword()
    min_value = Float()
    max_value = Float()
    unit = Nested(Unit)


    @classmethod
    def attributeDataBySnakeCaseAttributeName(
        cls, instance: "MaintenanceProcedureOperationParameter" = None, snakeCaseAttributeName: str = None
    ) -> EsModelAttributeData:
        # Remove any dots for nested objects, e.g. country.id should become country
        periodIndex = snakeCaseAttributeName.rfind(".")
        if periodIndex != -1:
            snakeCaseAttributeName = snakeCaseAttributeName[:periodIndex]
        mapping = {
            "id": EsModelAttributeData(
                attributeModelName="id", attributeRepoName="id", attributeRepoValue=getattr(instance, "id", None)
            ),
            "name": EsModelAttributeData(
                attributeModelName="name", attributeRepoName="name", attributeRepoValue=getattr(instance, "name", None)
            ),
            "min_value": EsModelAttributeData(
                attributeModelName="minValue", attributeRepoName="min_value", attributeRepoValue=getattr(instance, "min_value", None), dataType=float
            ),
            "max_value": EsModelAttributeData(
                attributeModelName="maxValue", attributeRepoName="max_value", attributeRepoValue=getattr(instance, "max_value", None), dataType=float
            ),
            "unit": EsModelAttributeData(
                attributeModelName="unit",
                attributeRepoName="unit",
                attributeRepoValue=Util.deepAttribute(instance, "unit", None),
                dataType=Unit,
                isClass=True,
            ),
        }

        return mapping[snakeCaseAttributeName] if snakeCaseAttributeName in mapping else None