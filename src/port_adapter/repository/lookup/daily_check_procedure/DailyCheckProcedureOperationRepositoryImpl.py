"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

import os

from elasticsearch_dsl import UpdateByQuery, Q
from elasticsearch_dsl.connections import connections
from sqlalchemy import create_engine

from src.application.lookup.daily_check_procedure.DailyCheckProcedureOperationRepository import \
    DailyCheckProcedureOperationRepository
from src.domain_model.project.daily_check.procedure.operation.DailyCheckProcedureOperation import \
    DailyCheckProcedureOperation
from src.port_adapter.repository.es_model.lookup.daily_check_procedure.DailyCheckProcedure import (
    DailyCheckProcedure as EsDailyCheckProcedure, )
from src.resource.logging.decorator import debugLogger
from src.resource.logging.logger import logger


class DailyCheckProcedureOperationRepositoryImpl(DailyCheckProcedureOperationRepository):
    def __init__(self):
        try:
            self._db = create_engine(
                f"mysql+mysqlconnector://{os.getenv('CAFM_PROJECT_DB_USER', 'root')}:{os.getenv('CAFM_PROJECT_DB_PASSWORD', '1234')}@{os.getenv('CAFM_PROJECT_DB_HOST', '127.0.0.1')}:{os.getenv('CAFM_PROJECT_DB_PORT', '3306')}/{os.getenv('CAFM_PROJECT_DB_NAME', 'cafm-project')}"
            )
            self._es = connections.create_connection(
                hosts=[
                    f'{os.getenv("CAFM_PROJECT_ELASTICSEARCH_HOST", "elasticsearch")}:{os.getenv("CAFM_PROJECT_ELASTICSEARCH_PORT", 9200)}'
                ]
            )
        except Exception as e:
            logger.warn(
                f"[{DailyCheckProcedureOperationRepositoryImpl.__init__.__qualname__}] Could not connect to the db, message: {e}"
            )
            raise Exception(f"Could not connect to the db, message: {e}")


    
           
    @debugLogger
    def delete(self, obj: DailyCheckProcedureOperation):
        if obj is not None:
            UpdateByQuery(index=EsDailyCheckProcedure.alias()).using(self._es) \
                .filter('nested', path="daily_check_procedure_operations",
                        query=Q("term",
                                **{"daily_check_procedure_operations.id": obj.id()})) \
                .script(
                source="""                        
                        if (ctx._source.daily_check_procedure_operations instanceof List) {
                         for (int i=ctx._source.daily_check_procedure_operations.length - 1; i >= 0; i--) {
                                if (ctx._source.daily_check_procedure_operations[i].id == params.id) {
                                    ctx._source.daily_check_procedure_operations.remove(i);
                                }
                        
                        }
                        }
                            """,
                params={"id": obj.id()}).execute()

    @debugLogger
    def save(self, obj: DailyCheckProcedureOperation):
        if obj is not None: 
                result = EsDailyCheckProcedure.search().filter("nested", path="daily_check_procedure_operations", query=Q("term", **{
                        "daily_check_procedure_operations.id": obj.id()})).execute()
                if result.hits.total.value > 0:
                    # Update
                    UpdateByQuery(index=EsDailyCheckProcedure.alias()).using(self._es) \
                        .filter("nested", path="daily_check_procedure_operations", query=Q("term", **{
                            "daily_check_procedure_operations.id": obj.id()})) \
                        .script(source="""
                             if (ctx._source.daily_check_procedure_operations instanceof List) {
                             for (int i=ctx._source.daily_check_procedure_operations.length - 1; i >= 0; i--) {
                                     if (ctx._source.daily_check_procedure_operations[i].id != null) {
                                     if (ctx._source.daily_check_procedure_operations[i].id == params.obj.id) {
                                              if (params.obj.name != null) {
                                                  ctx._source.daily_check_procedure_operations[i].name = params.obj.name;
                                             }
                                              if (params.obj.description != null) {
                                                  ctx._source.daily_check_procedure_operations[i].description = params.obj.description;
                                             }
                                              if (params.obj.type != null) {
                                                  ctx._source.daily_check_procedure_operations[i].type = params.obj.type;
                                             }

                                         }
                                     }   
                             }
                             }
                    """, params={
                            "obj": {
                                "id": obj.id(),
                                "name": obj.name(),
                                "description": obj.description(),
                                "type": obj.type(),
                            }
                        }) \
                    .execute() 
                else:
                    # Create
                        UpdateByQuery(index=EsDailyCheckProcedure.alias()).using(self._es) \
                            .filter("term", **{"id": obj.dailyCheckProcedureId()}) \
                            .script(source="""
                                    if (! (ctx._source.daily_check_procedure_operations instanceof List)) {
                                        ctx._source.daily_check_procedure_operations = [];  
                                    }
                                    ctx._source.daily_check_procedure_operations.add(params.obj);
                                """, params={
                                "obj": {
                                            "id": obj.id(),
                                            "name": obj.name(),
                                            "description": obj.description(),
                                            "type": obj.type(),
                                },                                                        
                            }) \
                        .execute()
