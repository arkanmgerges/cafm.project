"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""


import os
from typing import List, Optional

from elasticsearch_dsl.connections import connections
from sqlalchemy import create_engine

from src.application.lookup.daily_check_procedure.DailyCheckProcedure import DailyCheckProcedure as DailyCheckProcedureLookup
from src.application.lookup.daily_check_procedure.DailyCheckProcedureRepository import DailyCheckProcedureRepository
from src.domain_model.project.daily_check.procedure.DailyCheckProcedure import DailyCheckProcedure
from src.domain_model.project.daily_check.procedure.operation.DailyCheckProcedureOperation import (
    DailyCheckProcedureOperation,
)
from src.domain_model.project.daily_check.procedure.operation.DailyCheckProcedureOperationRepository import (
    DailyCheckProcedureOperationRepository,
)
from src.domain_model.project.daily_check.procedure.operation.parameter.DailyCheckProcedureOperationParameterRepository import (
    DailyCheckProcedureOperationParameterRepository,
)
from src.domain_model.project.equipment.category.group.EquipmentCategoryGroup import EquipmentCategoryGroup
from src.domain_model.project.equipment.category.group.EquipmentCategoryGroupRepository import (
    EquipmentCategoryGroupRepository,
)
from src.domain_model.project.unit.UnitRepository import UnitRepository
from src.port_adapter.repository.es_model.lookup.daily_check_procedure.DailyCheckProcedure import (
    DailyCheckProcedure as EsDailyCheckProcedure,
)
from src.port_adapter.repository.es_model.lookup.daily_check_procedure.DailyCheckProcedureOperation import (
    DailyCheckProcedureOperation as EsDailyCheckProcedureOperation,
)
from src.port_adapter.repository.es_model.lookup.daily_check_procedure.DailyCheckProcedureOperationParameter import (
    DailyCheckProcedureOperationParameter as EsDailyCheckProcedureOperationParameter,
)
from src.port_adapter.repository.es_model.lookup.daily_check_procedure.EquipmentCategoryGroup import (
    EquipmentCategoryGroup as EsEquipmentCategoryGroup,
)
from src.port_adapter.repository.es_model.lookup.daily_check_procedure.Unit import Unit as EsUnit
from src.port_adapter.repository.lookup.common.es.BaseLookupRepository import BaseLookupRepository
from src.resource.logging.decorator import debugLogger
from src.resource.logging.logger import logger


class DailyCheckProcedureRepositoryImpl(BaseLookupRepository, DailyCheckProcedureRepository):
    def __init__(self):
        import src.port_adapter.AppDi as AppDi

        self._equipmentCategoryGroupRepo: EquipmentCategoryGroupRepository = AppDi.instance.get(
            EquipmentCategoryGroupRepository
        )
        self._unitRepo: UnitRepository = AppDi.instance.get(UnitRepository)
        self._dailyCheckProcedureOperationParameterRepo: DailyCheckProcedureOperationParameterRepository = (
            AppDi.instance.get(DailyCheckProcedureOperationParameterRepository)
        )
        self._dailyCheckProcedureOperationRepo: DailyCheckProcedureOperationRepository = AppDi.instance.get(
            DailyCheckProcedureOperationRepository
        )

        try:
            self._db = create_engine(
                f"mysql+mysqlconnector://{os.getenv('CAFM_PROJECT_DB_USER', 'root')}:{os.getenv('CAFM_PROJECT_DB_PASSWORD', '1234')}@{os.getenv('CAFM_PROJECT_DB_HOST', '127.0.0.1')}:{os.getenv('CAFM_PROJECT_DB_PORT', '3306')}/{os.getenv('CAFM_PROJECT_DB_NAME', 'cafm-project')}"
            )
            self._es = connections.create_connection(
                hosts=[
                    f'{os.getenv("CAFM_PROJECT_ELASTICSEARCH_HOST", "elasticsearch")}:{os.getenv("CAFM_PROJECT_ELASTICSEARCH_PORT", 9200)}'
                ]
            )
        except Exception as e:
            logger.warn(
                f"[{DailyCheckProcedureRepositoryImpl.__init__.__qualname__}] Could not connect to the db, message: {e}"
            )
            raise Exception(f"Could not connect to the db, message: {e}")

    @debugLogger
    def save(self, obj: DailyCheckProcedure):
        equipmentCategoryGroup: Optional[EquipmentCategoryGroup, None] = None
        dailyCheckProcedureOperation: Optional[DailyCheckProcedureOperation, None] = None
        try:
            equipmentCategoryGroup = (
                self._equipmentCategoryGroupRepo.equipmentCategoryGroupById(id=obj.equipmentCategoryGroupId())
                if obj.equipmentCategoryGroupId() is not None
                else None
            )
        except:
            pass

        esOperations = []
        units = {}
        for op in self._dailyCheckProcedureOperationRepo.dailyCheckProcedureOperationsByDailyCheckProcedureId(
            dailyCheckProcedureId=obj.id(), resultSize=1000000
        )["items"]:
            esParams = []
            for (
                param
            ) in self._dailyCheckProcedureOperationParameterRepo.dailyCheckProcedureOperationParametersByDailyCheckProcedureOperationId(
                dailyCheckProcedureOperationId=op.id(), resultSize=1000000
            )[
                "items"
            ]:
                unit = units[param.unitId()] if param.unitId() in units else None
                if unit is None:
                    try:
                        unit = self._unitRepo.unitById(param.unitId())
                        units[unit.id()] = unit
                    except:
                        pass
                esParams.append(
                    EsDailyCheckProcedureOperationParameter(
                        _id=param.id(),
                        id=param.id(),
                        name=param.name(),
                        min_value=param.minValue(),
                        max_value=param.maxValue(),
                        unit=EsUnit(
                            _id=unit.id(),
                            id=unit.id(),
                            name=unit.name(),
                        )
                        if unit is not None
                        else None,
                    )
                )
            esOperations.append(
                EsDailyCheckProcedureOperation(
                    _id=op.id(),
                    id=op.id(),
                    name=op.name(),
                    description=op.description(),
                    type=op.type(),
                    daily_check_procedure_operation_parameters=esParams,
                )
            )

        EsDailyCheckProcedure(
            _id=obj.id(),
            id=obj.id(),
            name=obj.name(),
            description=obj.description(),
            equipment_id=obj.equipmentId(),
            project_id=obj.projectId(),
            equipment_category_group=EsEquipmentCategoryGroup(
                _id=equipmentCategoryGroup.id(),
                id=equipmentCategoryGroup.id(),
                name=equipmentCategoryGroup.name(),
            ) if equipmentCategoryGroup is not None else None,
            daily_check_procedure_operations=esOperations,
        ).save()

    @debugLogger
    def delete(self, obj: DailyCheckProcedure):
        esDoc = EsDailyCheckProcedure.get(id=obj.id(), ignore=404)
        if esDoc is not None:
            esDoc.delete(id=obj.id(), ignore=404)

    @debugLogger
    def lookup(self, resultFrom: int, resultSize: int, orders: List[dict], filters: List[dict]):
        return super().lookup(
            resultFrom=resultFrom,
            resultSize=resultSize,
            orders=orders,
            filters=filters,
            esModel=EsDailyCheckProcedure,
            lookupModel=DailyCheckProcedureLookup,
        )
