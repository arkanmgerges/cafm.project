"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""







import os

from elasticsearch_dsl import UpdateByQuery, Q, Search
from elasticsearch_dsl.connections import connections
from sqlalchemy import create_engine

from src.application.lookup.daily_check_procedure.EquipmentCategoryGroupRepository import EquipmentCategoryGroupRepository
from src.domain_model.project.equipment.category.group.EquipmentCategoryGroup import EquipmentCategoryGroup
from src.port_adapter.repository.es_model.lookup.daily_check_procedure.DailyCheckProcedure import (DailyCheckProcedure as EsDailyCheckProcedure,)
from src.port_adapter.repository.lookup.common.es.UpdateByQueryValidator import UpdateByQueryValidator
from src.resource.logging.decorator import debugLogger
from src.resource.logging.logger import logger


class EquipmentCategoryGroupRepositoryImpl(EquipmentCategoryGroupRepository):
    def __init__(self):
        try:
            self._db = create_engine(
                f"mysql+mysqlconnector://{os.getenv('CAFM_PROJECT_DB_USER', 'root')}:{os.getenv('CAFM_PROJECT_DB_PASSWORD', '1234')}@{os.getenv('CAFM_PROJECT_DB_HOST', '127.0.0.1')}:{os.getenv('CAFM_PROJECT_DB_PORT', '3306')}/{os.getenv('CAFM_PROJECT_DB_NAME', 'cafm-project')}"
            )
            self._es = connections.create_connection(
                hosts=[
                    f'{os.getenv("CAFM_PROJECT_ELASTICSEARCH_HOST", "elasticsearch")}:{os.getenv("CAFM_PROJECT_ELASTICSEARCH_PORT", 9200)}'
                ]
            )
        except Exception as e:
            logger.warn(
                f"[{EquipmentCategoryGroupRepositoryImpl.__init__.__qualname__}] Could not connect to the db, message: {e}"
            )
            raise Exception(f"Could not connect to the db, message: {e}")


    
           
    @debugLogger
    def delete(self, obj: EquipmentCategoryGroup):
        if obj is not None:
            UpdateByQueryValidator.validate(UpdateByQuery(index=EsDailyCheckProcedure.alias()).using(self._es) \
                .filter('nested', path="equipment_category_group",
                        query=Q("term",
                                **{"equipment_category_group.id": obj.id()})) \
                .script(
                source="""
                        ctx._source.equipment_category_group = null;
                    
                            """,
                params={"id": obj.id()}).execute())

    @debugLogger
    def save(self, obj: EquipmentCategoryGroup):
        if obj is not None: 
                result = EsDailyCheckProcedure.search().filter("nested", path="equipment_category_group", query=Q("term", **{
                        "equipment_category_group.id": obj.id()})).execute()
                
                if result.hits.total.value > 0:
                        # Update
                    UpdateByQueryValidator.validate(UpdateByQuery(index=EsDailyCheckProcedure.alias()).using(self._es) \
                    .filter("nested", path="equipment_category_group", query=Q("term", **{
                        "equipment_category_group.id": obj.id()})) \
                    .script(source="""
                              if (params.obj.name != null) {
                                  ctx._source.equipment_category_group.name = params.obj.name;
                             }
                        }
                    """, params={
                            "obj": {
                                "id": obj.id(),
                                "name": obj.name(),
                            }
                        }) \
                    .execute())
