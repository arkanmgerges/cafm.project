"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

import os
from typing import List

from sqlalchemy import create_engine
from sqlalchemy.sql.expression import text, or_

from src.domain_model.project.daily_check.procedure.DailyCheckProcedure import (
    DailyCheckProcedure,
)
from src.domain_model.project.daily_check.procedure.DailyCheckProcedureRepository import (
    DailyCheckProcedureRepository,
)
from src.domain_model.resource.exception.ObjectIdenticalException import (
    ObjectIdenticalException,
)
from src.domain_model.resource.exception.DailyCheckProcedureDoesNotExistException import (
    DailyCheckProcedureDoesNotExistException,
)
from src.domain_model.token.TokenData import TokenData
from src.port_adapter.repository.DbSession import DbSession
from src.port_adapter.repository.db_model.DailyCheckProcedure import (
    DailyCheckProcedure as DbDailyCheckProcedure,
)
from src.resource.logging.decorator import debugLogger
from src.resource.logging.logger import logger


class DailyCheckProcedureRepositoryImpl(DailyCheckProcedureRepository):
    def __init__(self):
        try:
            self._db = create_engine(
                f"mysql+mysqlconnector://{os.getenv('CAFM_PROJECT_DB_USER', 'root')}:{os.getenv('CAFM_PROJECT_DB_PASSWORD', '1234')}@{os.getenv('CAFM_PROJECT_DB_HOST', '127.0.0.1')}:{os.getenv('CAFM_PROJECT_DB_PORT', '3306')}/{os.getenv('CAFM_PROJECT_DB_NAME', 'cafm-project')}"
            )
        except Exception as e:
            logger.warn(
                f"[{DailyCheckProcedureRepositoryImpl.__init__.__qualname__}] Could not connect to the db, message: {e}"
            )
            raise Exception(f"Could not connect to the db, message: {e}")

    @debugLogger
    def save(self, obj: DailyCheckProcedure, tokenData: TokenData = None):
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            dbObject = (
                dbSession.query(DbDailyCheckProcedure).filter_by(id=obj.id()).first()
            )
            if dbObject is not None:
                self.updateDailyCheckProcedure(obj=obj, dbObject=dbObject, tokenData=tokenData)
            else:
                self.createDailyCheckProcedure(obj=obj, tokenData=tokenData)
        finally:
            dbSession.close()

    @debugLogger
    def createDailyCheckProcedure(
        self, obj: DailyCheckProcedure, tokenData: TokenData = None
    ):
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            dbObject = self._createDbObjectByObj(obj=obj)
            result = (
                dbSession.query(DbDailyCheckProcedure).filter_by(id=obj.id()).first()
            )
            if result is None:
                dbSession.add(dbObject)
                dbSession.commit()
        finally:
            dbSession.close()

    @debugLogger
    def deleteDailyCheckProcedure(
        self, obj: DailyCheckProcedure, tokenData: TokenData = None
    ) -> None:
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            dbObject = (
                dbSession.query(DbDailyCheckProcedure).filter_by(id=obj.id()).first()
            )
            if dbObject is not None:
                dbSession.delete(dbObject)
                dbSession.commit()
        finally:
            dbSession.close()

    @debugLogger
    def updateDailyCheckProcedure(
        self, obj: DailyCheckProcedure, dbObject: DbDailyCheckProcedure = None, tokenData: TokenData = None
    ) -> None:
        from sqlalchemy import inspect
        dbSession = inspect(dbObject).session
        if dbObject is None:
            raise DailyCheckProcedureDoesNotExistException(f"id = {obj.id()}")
        dbObject = self._updateDbObjectByObj(dbObject=dbObject, obj=obj)
        dbSession.add(dbObject)
        dbSession.commit()

    @debugLogger
    def bulkSave(self, objList: List[DailyCheckProcedure], tokenData: TokenData = None):
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            for obj in objList:
                dbObject = dbSession.query(DbDailyCheckProcedure).filter_by(id=obj.id()).first()
                if dbObject is not None:
                    dbObject = self._updateDbObjectByObj(dbObject=dbObject, obj=obj)
                else:
                    dbObject = self._createDbObjectByObj(obj=obj)
                dbSession.add(dbObject)
            dbSession.commit()
        finally:
            dbSession.close()

    @debugLogger
    def bulkDelete(
            self, objList: List[DailyCheckProcedure], tokenData: TokenData = None
    ) -> None:
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            for obj in objList:
                dbObject = dbSession.query(DbDailyCheckProcedure).filter_by(id=obj.id()).first()
                if dbObject is not None:
                    dbSession.delete(dbObject)
            dbSession.commit()
        finally:
            dbSession.close()

    @debugLogger
    def dailyCheckProcedureById(self, id: str) -> DailyCheckProcedure:
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            dbObject = dbSession.query(DbDailyCheckProcedure).filter_by(id=id).first()
            if dbObject is None:
                raise DailyCheckProcedureDoesNotExistException(f"id = {id}")
            return DailyCheckProcedure.createFrom(
                id=dbObject.id,
                name=dbObject.name,
                description=dbObject.description,
                equipmentId=dbObject.equipmentId,
                equipmentCategoryGroupId=dbObject.equipmentCategoryGroupId,
            )
        finally:
            dbSession.close()

    @debugLogger
    def dailyCheckProcedures(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        tokenData: TokenData = None,
    ) -> dict:
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            sortData = ""
            if order is not None:
                for item in order:
                    sortData = f'{sortData}, {item["orderBy"]} {item["direction"]}'
                sortData = sortData[2:]
            items = (
                dbSession.query(DbDailyCheckProcedure)
                .order_by(text(sortData))
                .limit(resultSize)
                .offset(resultFrom)
                .all()
            )
            itemsCount = dbSession.query(DbDailyCheckProcedure).count()
            if items is None:
                return {"items": [], "itemCount": 0}
            return {
                "items": [
                    DailyCheckProcedure.createFrom(
                        id=x.id,
                        name=x.name,
                        description=x.description,
                        equipmentId=x.equipmentId,
                        equipmentCategoryGroupId=x.equipmentCategoryGroupId,
                    )
                    for x in items
                ],
                "itemCount": itemsCount,
            }
        finally:
            dbSession.close()

    @debugLogger
    def dailyCheckProceduresByEquipmentOrGroupId(
        self,
        equipmentOrGroupId: str = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        tokenData: TokenData = None,
    ) -> dict:
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            sortData = ""
            if order is not None:
                for item in order:
                    sortData = f'{sortData}, {item["orderBy"]} {item["direction"]}'
                sortData = sortData[2:]
            items = (
                dbSession.query(DbDailyCheckProcedure)
                .filter(
                    or_(
                        DbDailyCheckProcedure.equipmentId == equipmentOrGroupId,
                        DbDailyCheckProcedure.equipmentCategoryGroupId
                        == equipmentOrGroupId,
                    )
                )
                .order_by(text(sortData))
                .limit(resultSize)
                .offset(resultFrom)
                .all()
            )
            itemsCount = (
                dbSession.query(DbDailyCheckProcedure)
                .filter(
                    or_(
                        DbDailyCheckProcedure.equipmentId == equipmentOrGroupId,
                        DbDailyCheckProcedure.equipmentCategoryGroupId
                        == equipmentOrGroupId,
                    )
                )
                .count()
            )
            if items is None:
                return {"items": [], "itemCount": 0}
            return {
                "items": [
                    DailyCheckProcedure.createFrom(
                        id=x.id,
                        name=x.name,
                        description=x.description,
                        equipmentId=x.equipmentId,
                        equipmentCategoryGroupId=x.equipmentCategoryGroupId,
                    )
                    for x in items
                ],
                "itemCount": itemsCount,
            }
        finally:
            dbSession.close()

    def _updateDbObjectByObj(self, dbObject: DbDailyCheckProcedure, obj: DailyCheckProcedure):
        dbObject.name = obj.name() if obj.name() is not None else dbObject.name
        dbObject.description = obj.description() if obj.description() is not None else dbObject.description
        dbObject.equipmentId = obj.equipmentId() if obj.equipmentId() is not None else dbObject.equipmentId
        dbObject.equipmentCategoryGroupId = obj.equipmentCategoryGroupId() if obj.equipmentCategoryGroupId() is not None else dbObject.equipmentCategoryGroupId
        return dbObject


    def _createDbObjectByObj(self, obj: DailyCheckProcedure):
        return DbDailyCheckProcedure(id=obj.id(), name=obj.name(),
                                 description=obj.description(),
                                 equipmentId=obj.equipmentId(),
                                 equipmentCategoryGroupId=obj.equipmentCategoryGroupId())
