"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from src.port_adapter.repository.common.DbUtil import DbUtil
from typing import List

from sqlalchemy.sql.expression import text

from src.application.lifecycle.ApplicationServiceLifeCycle import ApplicationServiceLifeCycle
from src.domain_model.project.daily_check.procedure.operation.DailyCheckProcedureOperation import (
    DailyCheckProcedureOperation,
)
from src.domain_model.project.daily_check.procedure.operation.DailyCheckProcedureOperationRepository import (
    DailyCheckProcedureOperationRepository,
)
from src.domain_model.resource.exception.DailyCheckProcedureOperationDoesNotExistException import (
    DailyCheckProcedureOperationDoesNotExistException,
)
from src.domain_model.token.TokenData import TokenData
from src.port_adapter.repository.db_model.DailyCheckProcedureOperation import (
    DailyCheckProcedureOperation as DbDailyCheckProcedureOperation,
)
from src.resource.logging.decorator import debugLogger


class DailyCheckProcedureOperationRepositoryImpl(
    DailyCheckProcedureOperationRepository
):
    @debugLogger
    def save(self, obj: DailyCheckProcedureOperation, tokenData: TokenData = None):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = (
            dbSession.query(DbDailyCheckProcedureOperation)
            .filter_by(id=obj.id())
            .first()
        )
        if dbObject is not None:
            self.updateDailyCheckProcedureOperation(obj=obj, dbObject=dbObject, tokenData=tokenData)
        else:
            self.createDailyCheckProcedureOperation(obj=obj, tokenData=tokenData)

    @debugLogger
    def createDailyCheckProcedureOperation(
        self, obj: DailyCheckProcedureOperation, tokenData: TokenData = None
    ):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = self._createDbObjectByObj(obj=obj)
        result = (
            dbSession.query(DbDailyCheckProcedureOperation)
            .filter_by(id=obj.id())
            .first()
        )
        if result is None:
            dbSession.add(dbObject)


    @debugLogger
    def deleteDailyCheckProcedureOperation(
        self, obj: DailyCheckProcedureOperation, tokenData: TokenData = None
    ) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = (
            dbSession.query(DbDailyCheckProcedureOperation)
            .filter_by(id=obj.id())
            .first()
        )
        if dbObject is not None:
            DbUtil.disableForeignKeyChecks(dbSession=dbSession)
            dbSession.execute(text(f'''
                            DELETE FROM daily_check_procedure_operation WHERE id="{obj.id()}"
                            '''))
            # dbSession.delete(dbObject)
            DbUtil.enableForeignKeyChecks(dbSession=dbSession)


    @debugLogger
    def updateDailyCheckProcedureOperation(
        self, obj: DailyCheckProcedureOperation, dbObject: DbDailyCheckProcedureOperation = None, tokenData: TokenData = None
    ) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        if dbObject is None:
            raise DailyCheckProcedureOperationDoesNotExistException(
                f"id = {obj.id()}"
            )
        dbObject = self._updateDbObjectByObj(dbObject=dbObject, obj=obj)
        dbSession.add(dbObject)

    @debugLogger
    def bulkSave(self, objList: List[DailyCheckProcedureOperation], tokenData: TokenData = None):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        for obj in objList:
            dbObject = dbSession.query(DbDailyCheckProcedureOperation).filter_by(id=obj.id()).first()
            if dbObject is not None:
                dbObject = self._updateDbObjectByObj(dbObject=dbObject, obj=obj)
            else:
                dbObject = self._createDbObjectByObj(obj=obj)
            dbSession.add(dbObject)


    @debugLogger
    def bulkDelete(
            self, objList: List[DailyCheckProcedureOperation], tokenData: TokenData = None
    ) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        for obj in objList:
            dbObject = dbSession.query(DbDailyCheckProcedureOperation).filter_by(id=obj.id()).first()
            if dbObject is not None:
                DbUtil.disableForeignKeyChecks(dbSession=dbSession)
                dbSession.execute(text(f'''
                                DELETE FROM daily_check_procedure_operation WHERE id="{obj.id()}"
                                '''))
                # dbSession.delete(dbObject)
                DbUtil.enableForeignKeyChecks(dbSession=dbSession)


    @debugLogger
    def dailyCheckProcedureOperationById(self, id: str) -> DailyCheckProcedureOperation:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = (
            dbSession.query(DbDailyCheckProcedureOperation).filter_by(id=id).first()
        )
        if dbObject is None:
            raise DailyCheckProcedureOperationDoesNotExistException(f"id = {id}")
        return DailyCheckProcedureOperation.createFrom(
            id=dbObject.id,
            name=dbObject.name,
            description=dbObject.description,
            type=dbObject.type,
            dailyCheckProcedureId=dbObject.dailyCheckProcedureId,
        )

    @debugLogger
    def dailyCheckProcedureOperations(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        tokenData: TokenData = None,
    ) -> dict:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        sortData = ""
        if order is not None:
            for item in order:
                sortData = f'{sortData}, {item["orderBy"]} {item["direction"]}'
            sortData = sortData[2:]
        items = (
            dbSession.query(DbDailyCheckProcedureOperation)
            .order_by(text(sortData))
            .limit(resultSize)
            .offset(resultFrom)
            .all()
        )
        itemsCount = dbSession.query(DbDailyCheckProcedureOperation).count()
        if items is None:
            return {"items": [], "totalItemCount": 0}
        return {
            "items": [
                DailyCheckProcedureOperation.createFrom(
                    id=x.id,
                    name=x.name,
                    description=x.description,
                    type=x.type,
                    dailyCheckProcedureId=x.dailyCheckProcedureId,
                )
                for x in items
            ],
            "totalItemCount": itemsCount,
        }

    @debugLogger
    def dailyCheckProcedureOperationsByDailyCheckProcedureId(
        self,
        dailyCheckProcedureId: str = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        tokenData: TokenData = None,
    ) -> dict:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        sortData = ""
        if order is not None:
            for item in order:
                sortData = f'{sortData}, {item["orderBy"]} {item["direction"]}'
            sortData = sortData[2:]
        items = (
            dbSession.query(DbDailyCheckProcedureOperation)
            .filter_by(dailyCheckProcedureId=dailyCheckProcedureId)
            .order_by(text(sortData))
            .limit(resultSize)
            .offset(resultFrom)
            .all()
        )
        itemsCount = (
            dbSession.query(DbDailyCheckProcedureOperation)
            .filter_by(dailyCheckProcedureId=dailyCheckProcedureId)
            .count()
        )
        if items is None:
            return {"items": [], "totalItemCount": 0}
        return {
            "items": [
                DailyCheckProcedureOperation.createFrom(
                    id=x.id,
                    name=x.name,
                    description=x.description,
                    type=x.type,
                    dailyCheckProcedureId=x.dailyCheckProcedureId,
                )
                for x in items
            ],
            "totalItemCount": itemsCount,
        }

    def _updateDbObjectByObj(self, dbObject: DbDailyCheckProcedureOperation, obj: DailyCheckProcedureOperation):
        dbObject.name = obj.name() if obj.name() is not None else dbObject.name
        dbObject.description = obj.description() if obj.description() is not None else dbObject.description
        dbObject.type = obj.type() if obj.type() is not None else dbObject.type
        dbObject.dailyCheckProcedureId = obj.dailyCheckProcedureId() if obj.dailyCheckProcedureId() is not None else dbObject.dailyCheckProcedureId
        return dbObject


    def _createDbObjectByObj(self, obj: DailyCheckProcedureOperation):
        return DbDailyCheckProcedureOperation(id=obj.id(), name=obj.name(),
                                          description=obj.description(),
                                          type=obj.type(),
                                          dailyCheckProcedureId=obj.dailyCheckProcedureId())
