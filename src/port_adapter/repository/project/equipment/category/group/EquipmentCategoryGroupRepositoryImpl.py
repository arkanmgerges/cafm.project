"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from sqlalchemy.sql.expression import text, desc

from src.application.lifecycle.ApplicationServiceLifeCycle import ApplicationServiceLifeCycle
from src.domain_model.project.equipment.category.group.EquipmentCategoryGroup import (
    EquipmentCategoryGroup,
)
from src.domain_model.project.equipment.category.group.EquipmentCategoryGroupRepository import (
    EquipmentCategoryGroupRepository,
)
from src.domain_model.resource.exception.EquipmentCategoryGroupDoesNotExistException import (
    EquipmentCategoryGroupDoesNotExistException,
)
from src.domain_model.token.TokenData import TokenData
from src.port_adapter.repository.db_model.EquipmentCategoryGroup import (
    EquipmentCategoryGroup as DbEquipmentCategoryGroup,
)
from src.resource.logging.decorator import debugLogger


class EquipmentCategoryGroupRepositoryImpl(EquipmentCategoryGroupRepository):
    @debugLogger
    def save(self, obj: EquipmentCategoryGroup, tokenData: TokenData = None):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = (
            dbSession.query(DbEquipmentCategoryGroup).filter_by(id=obj.id()).first()
        )
        if dbObject is not None:
            self.updateEquipmentCategoryGroup(obj=obj, dbObject=dbObject, tokenData=tokenData)
        else:
            self.createEquipmentCategoryGroup(obj=obj, tokenData=tokenData)

    @debugLogger
    def createEquipmentCategoryGroup(
        self, obj: EquipmentCategoryGroup, tokenData: TokenData = None
    ):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = self._createDbObjectByObj(obj=obj)
        result = (
            dbSession.query(DbEquipmentCategoryGroup).filter_by(id=obj.id()).first()
        )
        if result is None:
            dbSession.add(dbObject)
    

    @debugLogger
    def deleteEquipmentCategoryGroup(
        self, obj: EquipmentCategoryGroup, tokenData: TokenData = None
    ) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = (
            dbSession.query(DbEquipmentCategoryGroup).filter_by(id=obj.id()).first()
        )
        if dbObject is not None:
            dbSession.delete(dbObject)
    

    @debugLogger
    def updateEquipmentCategoryGroup(
        self, obj: EquipmentCategoryGroup, dbObject: DbEquipmentCategoryGroup = None, tokenData: TokenData = None
    ) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        if dbObject is None:
            raise EquipmentCategoryGroupDoesNotExistException(f"id = {obj.id()}")
        dbObject = self._updateDbObjectByObj(dbObject=dbObject, obj=obj)
        dbSession.add(dbObject)

    @debugLogger
    def bulkSave(self, objList: List[EquipmentCategoryGroup], tokenData: TokenData = None):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        for obj in objList:
            dbObject = dbSession.query(DbEquipmentCategoryGroup).filter_by(id=obj.id()).first()
            if dbObject is not None:
                dbObject = self._updateDbObjectByObj(dbObject=dbObject, obj=obj)
            else:
                dbObject = self._createDbObjectByObj(obj=obj)
            dbSession.add(dbObject)


    @debugLogger
    def bulkDelete(
            self, objList: List[EquipmentCategoryGroup], tokenData: TokenData = None
    ) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        for obj in objList:
            dbObject = dbSession.query(DbEquipmentCategoryGroup).filter_by(id=obj.id()).first()
            if dbObject is not None:
                dbSession.delete(dbObject)


    @debugLogger
    def equipmentCategoryGroupById(self, id: str) -> EquipmentCategoryGroup:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = (
            dbSession.query(DbEquipmentCategoryGroup).filter_by(id=id).first()
        )
        if dbObject is None:
            raise EquipmentCategoryGroupDoesNotExistException(f"id = {id}")
        return EquipmentCategoryGroup(
            id=dbObject.id,
            name=dbObject.name,
            equipmentCategoryId=dbObject.equipmentCategoryId,
        )

    @debugLogger
    def equipmentCategoryGroups(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        tokenData: TokenData = None,
    ) -> dict:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        sortData = ""
        if order is not None:
            for item in order:
                sortData = f'{sortData}, {item["orderBy"]} {item["direction"]}'
            sortData = sortData[2:]
        items = (
            dbSession.query(DbEquipmentCategoryGroup)
            .order_by(text(sortData))
            .limit(resultSize)
            .offset(resultFrom)
            .all()
        )
        itemsCount = dbSession.query(DbEquipmentCategoryGroup).count()
        if items is None:
            return {"items": [], "totalItemCount": 0}
        return {
            "items": [
                EquipmentCategoryGroup.createFrom(
                    id=x.id, name=x.name, equipmentCategoryId=x.equipmentCategoryId
                )
                for x in items
            ],
            "totalItemCount": itemsCount,
        }

    @debugLogger
    def equipmentCategoryGroupsByCategoryId(
        self,
        equipmentCategoryId: str = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        tokenData: TokenData = None,
    ):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        q = dbSession.query(DbEquipmentCategoryGroup)
        if order is not None:
            for item in order:
                if item["orderBy"] == "id":
                    if item["direction"] == "desc":
                        q = q.order_by(desc(DbEquipmentCategoryGroup.id))
                    else:
                        q = q.order_by(DbEquipmentCategoryGroup.id)
                if item["orderBy"] == "name":
                    if item["direction"] == "desc":
                        q = q.order_by(desc(DbEquipmentCategoryGroup.name))
                    else:
                        q = q.order_by(DbEquipmentCategoryGroup.name)

        items = (
            q.filter(DbEquipmentCategoryGroup.category.any(id=equipmentCategoryId))
            .limit(resultSize)
            .offset(resultFrom)
            .all()
        )
        itemsCount = (
            dbSession.query(DbEquipmentCategoryGroup)
            .filter(DbEquipmentCategoryGroup.category.any(id=equipmentCategoryId))
            .count()
        )
        if items is None:
            return {"items": [], "totalItemCount": 0}

        result = []
        for level in items:
            result.append(
                EquipmentCategoryGroup.createFrom(
                    id=level.id,
                    name=level.name,
                    equipmentCategoryId=equipmentCategoryId,
                )
            )

        return {"items": result, "totalItemCount": itemsCount}

    def _updateDbObjectByObj(self, dbObject: DbEquipmentCategoryGroup, obj: EquipmentCategoryGroup):
        dbObject.name = obj.name() if obj.name() is not None else dbObject.name
        dbObject.equipmentCategoryId = obj.equipmentCategoryId() if obj.equipmentCategoryId() is not None else dbObject.equipmentCategoryId
        return dbObject


    def _createDbObjectByObj(self, obj: EquipmentCategoryGroup):
        return DbEquipmentCategoryGroup(id=obj.id(), name=obj.name(),
                                    equipmentCategoryId=obj.equipmentCategoryId())
