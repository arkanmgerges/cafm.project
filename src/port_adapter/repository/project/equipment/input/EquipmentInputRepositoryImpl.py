"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from sqlalchemy.sql.expression import text

from src.application.lifecycle.ApplicationServiceLifeCycle import ApplicationServiceLifeCycle
from src.domain_model.project.equipment.input.EquipmentInput import EquipmentInput
from src.domain_model.project.equipment.input.EquipmentInputRepository import (
    EquipmentInputRepository,
)
from src.domain_model.resource.exception.EquipmentInputDoesNotExistException import (
    EquipmentInputDoesNotExistException,
)
from src.domain_model.token.TokenData import TokenData
from src.port_adapter.repository.db_model.EquipmentInput import (
    EquipmentInput as DbEquipmentInput,
)
from src.resource.logging.decorator import debugLogger


class EquipmentInputRepositoryImpl(EquipmentInputRepository):
    @debugLogger
    def save(self, obj: EquipmentInput, tokenData: TokenData = None):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = dbSession.query(DbEquipmentInput).filter_by(id=obj.id()).first()
        if dbObject is not None:
            self.updateEquipmentInput(obj=obj, dbObject=dbObject, tokenData=tokenData)
        else:
            self.createEquipmentInput(obj=obj, tokenData=tokenData)

    @debugLogger
    def createEquipmentInput(self, obj: EquipmentInput, tokenData: TokenData = None):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = self._createDbObjectByObj(obj=obj)
        result = dbSession.query(DbEquipmentInput).filter_by(id=obj.id()).first()
        if result is None:
            dbSession.add(dbObject)
    

    @debugLogger
    def deleteEquipmentInput(
        self, obj: EquipmentInput, tokenData: TokenData = None
    ) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = dbSession.query(DbEquipmentInput).filter_by(id=obj.id()).first()
        if dbObject is not None:
            dbSession.delete(dbObject)
    

    @debugLogger
    def updateEquipmentInput(
        self, obj: EquipmentInput, dbObject: DbEquipmentInput = None, tokenData: TokenData = None
    ) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        if dbObject is None:
            raise EquipmentInputDoesNotExistException(f"id = {obj.id()}")
        dbObject = self._updateDbObjectByObj(dbObject=dbObject, obj=obj)
        dbSession.add(dbObject)

    @debugLogger
    def bulkSave(self, objList: List[EquipmentInput], tokenData: TokenData = None):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        for obj in objList:
            dbObject = dbSession.query(DbEquipmentInput).filter_by(id=obj.id()).first()
            if dbObject is not None:
                dbObject = self._updateDbObjectByObj(dbObject=dbObject, obj=obj)
            else:
                dbObject = self._createDbObjectByObj(obj=obj)
            dbSession.add(dbObject)


    @debugLogger
    def bulkDelete(
            self, objList: List[EquipmentInput], tokenData: TokenData = None
    ) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        for obj in objList:
            dbObject = dbSession.query(DbEquipmentInput).filter_by(id=obj.id()).first()
            if dbObject is not None:
                dbSession.delete(dbObject)

    @debugLogger
    def equipmentInputById(self, id: str) -> EquipmentInput:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = dbSession.query(DbEquipmentInput).filter_by(id=id).first()
        if dbObject is None:
            raise EquipmentInputDoesNotExistException(f"id = {id}")
        return EquipmentInput(
            id=dbObject.id,
            name=dbObject.name,
            value=dbObject.value,
            unitId=dbObject.unitId,
            equipmentId=dbObject.equipmentId,
        )

    @debugLogger
    def equipmentInputs(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        tokenData: TokenData = None,
    ) -> dict:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        sortData = ""
        if order is not None:
            for item in order:
                sortData = f'{sortData}, {item["orderBy"]} {item["direction"]}'
            sortData = sortData[2:]
        items = (
            dbSession.query(DbEquipmentInput)
            .order_by(text(sortData))
            .limit(resultSize)
            .offset(resultFrom)
            .all()
        )
        itemsCount = dbSession.query(DbEquipmentInput).count()
        if items is None:
            return {"items": [], "totalItemCount": 0}
        return {
            "items": [
                EquipmentInput.createFrom(
                    id=x.id,
                    name=x.name,
                    value=x.value,
                    unitId=x.unitId,
                    equipmentId=x.equipmentId,
                )
                for x in items
            ],
            "totalItemCount": itemsCount,
        }

    @debugLogger
    def equipmentInputsByEquipmentId(
        self,
        equipmentId: str = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        tokenData: TokenData = None,
    ) -> dict:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        sortData = ""
        if order is not None:
            for item in order:
                sortData = f'{sortData}, {item["orderBy"]} {item["direction"]}'
            sortData = sortData[2:]
        items = (
            dbSession.query(DbEquipmentInput)
            .filter_by(equipmentId=equipmentId)
            .order_by(text(sortData))
            .limit(resultSize)
            .offset(resultFrom)
            .all()
        )
        itemsCount = (
            dbSession.query(DbEquipmentInput)
            .filter_by(equipmentId=equipmentId)
            .count()
        )
        if items is None:
            return {"items": [], "totalItemCount": 0}
        return {
            "items": [
                EquipmentInput.createFrom(
                    id=x.id,
                    name=x.name,
                    value=x.value,
                    unitId=x.unitId,
                    equipmentId=x.equipmentId,
                )
                for x in items
            ],
            "totalItemCount": itemsCount,
        }

    def _updateDbObjectByObj(self, dbObject: DbEquipmentInput, obj: EquipmentInput):
        dbObject.name = obj.name() if obj.name() is not None else dbObject.name
        dbObject.value = obj.value() if obj.value() is not None else dbObject.value
        dbObject.unitId = obj.unitId() if obj.unitId() is not None else dbObject.unitId
        dbObject.equipmentId = obj.equipmentId() if obj.equipmentId() is not None else dbObject.equipmentId
        return dbObject


    def _createDbObjectByObj(self, obj: EquipmentInput):
        return DbEquipmentInput(id=obj.id(), name=obj.name(),
                            value=obj.value(),
                            unitId=obj.unitId(),
                            equipmentId=obj.equipmentId())