"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from sqlalchemy.sql.expression import text

from src.application.lifecycle.ApplicationServiceLifeCycle import ApplicationServiceLifeCycle
from src.domain_model.project.maintenance.procedure.MaintenanceProcedure import (
    MaintenanceProcedure,
)
from src.domain_model.project.maintenance.procedure.MaintenanceProcedureRepository import (
    MaintenanceProcedureRepository,
)
from src.domain_model.resource.exception.MaintenanceProcedureDoesNotExistException import (
    MaintenanceProcedureDoesNotExistException,
)
from src.domain_model.token.TokenData import TokenData
from src.port_adapter.repository.db_model.MaintenanceProcedure import (
    MaintenanceProcedure as DbMaintenanceProcedure,
)
from src.resource.common.DateTimeHelper import DateTimeHelper
from src.resource.logging.decorator import debugLogger


class MaintenanceProcedureRepositoryImpl(MaintenanceProcedureRepository):
    @debugLogger
    def save(self, obj: MaintenanceProcedure, tokenData: TokenData = None):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = (
            dbSession.query(DbMaintenanceProcedure).filter_by(id=obj.id()).first()
        )
        if dbObject is not None:
            self.updateMaintenanceProcedure(
                obj=obj, dbObject=dbObject, tokenData=tokenData
            )
        else:
            self.createMaintenanceProcedure(obj=obj, tokenData=tokenData)

    @debugLogger
    def createMaintenanceProcedure(
        self, obj: MaintenanceProcedure, tokenData: TokenData = None
    ):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = self._createDbObjectByObj(obj=obj)
        result = (
            dbSession.query(DbMaintenanceProcedure).filter_by(id=obj.id()).first()
        )
        if result is None:
            dbSession.add(dbObject)
    

    @debugLogger
    def deleteMaintenanceProcedure(
        self, obj: MaintenanceProcedure, tokenData: TokenData = None
    ) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = (
            dbSession.query(DbMaintenanceProcedure).filter_by(id=obj.id()).first()
        )
        if dbObject is not None:
            dbSession.delete(dbObject)
    

    @debugLogger
    def updateMaintenanceProcedure(
        self,
        obj: MaintenanceProcedure,
        dbObject: DbMaintenanceProcedure = None,
        tokenData: TokenData = None,
    ) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        if dbObject is None:
            raise MaintenanceProcedureDoesNotExistException(f"id = {obj.id()}")
        dbObject = self._updateDbObjectByObj(dbObject=dbObject, obj=obj)
        dbSession.add(dbObject)
        

    @debugLogger
    def maintenanceProcedureById(self, id: str) -> MaintenanceProcedure:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = dbSession.query(DbMaintenanceProcedure).filter_by(id=id).first()
        if dbObject is None:
            raise MaintenanceProcedureDoesNotExistException(f"id = {id}")

        return MaintenanceProcedure.createFrom(
            id=dbObject.id,
            name=dbObject.name,
            type=dbObject.type,
            subType=dbObject.subType,
            frequency=dbObject.frequency,
            startDate=DateTimeHelper.datetimeToInt(dbObject.startDate)
            if DateTimeHelper.datetimeToInt(dbObject.startDate) is not None
            else 0,
            subcontractorId=dbObject.subcontractorId,
            equipmentId=dbObject.equipmentId,
            )


    @debugLogger
    def bulkSave(
        self, objList: List[MaintenanceProcedure], tokenData: TokenData = None
    ):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        for obj in objList:
            dbObject = (
                dbSession.query(DbMaintenanceProcedure)
                .filter_by(id=obj.id())
                .first()
            )
            if dbObject is not None:
                dbObject = self._updateDbObjectByObj(dbObject=dbObject, obj=obj)
            else:
                dbObject = self._createDbObjectByObj(obj=obj)
            dbSession.add(dbObject)


    @debugLogger
    def bulkDelete(
        self, objList: List[MaintenanceProcedure], tokenData: TokenData = None
    ) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        for obj in objList:
            dbObject = (
                dbSession.query(DbMaintenanceProcedure)
                .filter_by(id=obj.id())
                .first()
            )
            if dbObject is not None:
                dbSession.delete(dbObject)


    def _updateDbObjectByObj(
        self, dbObject: DbMaintenanceProcedure, obj: MaintenanceProcedure
    ):
        dbObject.name = obj.name() if obj.name() is not None else dbObject.name
        dbObject.type = obj.type() if obj.type() is not None else dbObject.type
        if obj.type() == "hard":
            dbObject.subType = (
                obj.subType() if obj.subType() is not None else dbObject.subType
            )
        else:
            dbObject.subType = None
        dbObject.frequency = (
            obj.frequency() if obj.frequency() is not None else dbObject.frequency
        )
        dbObject.startDate = (
            DateTimeHelper.intToDateTime(obj.startDate())
            if obj.startDate() is not None and obj.startDate() > 0
            else dbObject.startDate
        )
        dbObject.subcontractorId = (
            obj.subcontractorId()
            if obj.subcontractorId() is not None
            else dbObject.subcontractorId
        )
        dbObject.equipmentId = (
            obj.equipmentId() if obj.equipmentId() is not None else dbObject.equipmentId
        )
        return dbObject

    def _createDbObjectByObj(self, obj: MaintenanceProcedure):
        return DbMaintenanceProcedure(
            id=obj.id(),
            name=obj.name(),
            type=obj.type(),
            subType=obj.subType(),
            frequency=obj.frequency(),
            startDate=DateTimeHelper.intToDateTime(obj.startDate())
            if obj.startDate() is not None and obj.startDate() > 0
            else None,
            subcontractorId=obj.subcontractorId(),
            equipmentId=obj.equipmentId(),
        )

    @debugLogger
    def maintenanceProcedures(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        tokenData: TokenData = None,
    ) -> dict:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        sortData = ""
        if order is not None:
            for item in order:
                sortData = f'{sortData}, {item["orderBy"]} {item["direction"]}'
            sortData = sortData[2:]
        items = (
            dbSession.query(DbMaintenanceProcedure)
            .order_by(text(sortData))
            .limit(resultSize)
            .offset(resultFrom)
            .all()
        )
        itemsCount = dbSession.query(DbMaintenanceProcedure).count()
        if items is None:
            return {"items": [], "totalItemCount": 0}

        return {
            "items": [
                MaintenanceProcedure.createFrom(
                    id=x.id,
                    name=x.name,
                    type=x.type,
                    subType=x.subType,
                    frequency=x.frequency,
                    startDate=DateTimeHelper.datetimeToInt(x.startDate)
                    if DateTimeHelper.datetimeToInt(x.startDate) is not None
                    else 0,
                    subcontractorId=x.subcontractorId,
                    equipmentId=x.equipmentId,
                )
                for x in items
            ],
            "totalItemCount": itemsCount,
        }

    @debugLogger
    def maintenanceProceduresByEquipmentId(
        self,
        equipmentId: str = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        tokenData: TokenData = None,
    ) -> dict:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        sortData = ""
        if order is not None:
            for item in order:
                sortData = f'{sortData}, {item["orderBy"]} {item["direction"]}'
            sortData = sortData[2:]
        items = (
            dbSession.query(DbMaintenanceProcedure)
            .filter_by(equipmentId=equipmentId)
            .order_by(text(sortData))
            .limit(resultSize)
            .offset(resultFrom)
            .all()
        )
        itemsCount = (
            dbSession.query(DbMaintenanceProcedure)
            .filter_by(equipmentId=equipmentId)
            .count()
        )
        if items is None:
            return {"items": [], "totalItemCount": 0}
        return {
            "items": [
                MaintenanceProcedure.createFrom(
                    id=x.id,
                    name=x.name,
                    type=x.type,
                    subType=x.subType,
                    frequency=x.frequency,
                    startDate=DateTimeHelper.datetimeToInt(x.startDate)
                    if DateTimeHelper.datetimeToInt(x.startDate) is not None
                    else 0,
                    subcontractorId=x.subcontractorId,
                    equipmentId=x.equipmentId,
                )
                for x in items
            ],
            "totalItemCount": itemsCount,
        }
