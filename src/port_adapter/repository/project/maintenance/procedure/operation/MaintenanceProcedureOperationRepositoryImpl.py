"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

import os
from typing import List

from sqlalchemy import create_engine
from sqlalchemy.sql.expression import text

from src.domain_model.project.maintenance.procedure.operation.MaintenanceProcedureOperation import (
    MaintenanceProcedureOperation,
)
from src.domain_model.project.maintenance.procedure.operation.MaintenanceProcedureOperationRepository import (
    MaintenanceProcedureOperationRepository,
)
from src.domain_model.resource.exception.MaintenanceProcedureOperationDoesNotExistException import (
    MaintenanceProcedureOperationDoesNotExistException,
)
from src.domain_model.token.TokenData import TokenData
from src.port_adapter.repository.DbSession import DbSession
from src.port_adapter.repository.db_model.MaintenanceProcedureOperation import (
    MaintenanceProcedureOperation as DbMaintenanceProcedureOperation,
)
from src.resource.logging.decorator import debugLogger
from src.resource.logging.logger import logger


class MaintenanceProcedureOperationRepositoryImpl(
    MaintenanceProcedureOperationRepository
):
    def __init__(self):
        try:
            self._db = create_engine(
                f"mysql+mysqlconnector://{os.getenv('CAFM_PROJECT_DB_USER', 'root')}:{os.getenv('CAFM_PROJECT_DB_PASSWORD', '1234')}@{os.getenv('CAFM_PROJECT_DB_HOST', '127.0.0.1')}:{os.getenv('CAFM_PROJECT_DB_PORT', '3306')}/{os.getenv('CAFM_PROJECT_DB_NAME', 'cafm-project')}"
            )
        except Exception as e:
            logger.warn(
                f"[{MaintenanceProcedureOperationRepositoryImpl.__init__.__qualname__}] Could not connect to the db, message: {e}"
            )
            raise Exception(f"Could not connect to the db, message: {e}")

    @debugLogger
    def save(self, obj: MaintenanceProcedureOperation, tokenData: TokenData = None):
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            dbObject = (
                dbSession.query(DbMaintenanceProcedureOperation)
                .filter_by(id=obj.id())
                .first()
            )
            if dbObject is not None:
                self.updateMaintenanceProcedureOperation(obj=obj, dbObject=dbObject, tokenData=tokenData)
            else:
                self.createMaintenanceProcedureOperation(obj=obj, tokenData=tokenData)
        finally:
            dbSession.close()

    @debugLogger
    def createMaintenanceProcedureOperation(
        self, obj: MaintenanceProcedureOperation, tokenData: TokenData = None
    ):
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            dbObject = self._createDbObjectByObj(obj=obj)
            result = (
                dbSession.query(DbMaintenanceProcedureOperation)
                .filter_by(id=obj.id())
                .first()
            )
            if result is None:
                dbSession.add(dbObject)
                dbSession.commit()
        finally:
            dbSession.close()

    @debugLogger
    def deleteMaintenanceProcedureOperation(
        self, obj: MaintenanceProcedureOperation, tokenData: TokenData = None
    ) -> None:
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            dbObject = (
                dbSession.query(DbMaintenanceProcedureOperation)
                .filter_by(id=obj.id())
                .first()
            )
            if dbObject is not None:
                dbSession.delete(dbObject)
                dbSession.commit()
        finally:
            dbSession.close()

    @debugLogger
    def updateMaintenanceProcedureOperation(
        self, obj: MaintenanceProcedureOperation, dbObject: DbMaintenanceProcedureOperation = None, tokenData: TokenData = None
    ) -> None:
        from sqlalchemy import inspect
        dbSession = inspect(dbObject).session
        if dbObject is None:
            raise MaintenanceProcedureOperationDoesNotExistException(
                f"id = {obj.id()}"
            )
        dbObject = self._updateDbObjectByObj(dbObject=dbObject, obj=obj)
        dbSession.add(dbObject)
        dbSession.commit()


    @debugLogger
    def bulkSave(self, objList: List[MaintenanceProcedureOperation], tokenData: TokenData = None):
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            for obj in objList:
                dbObject = dbSession.query(DbMaintenanceProcedureOperation).filter_by(id=obj.id()).first()
                if dbObject is not None:
                    dbObject = self._updateDbObjectByObj(dbObject=dbObject, obj=obj)
                else:
                    dbObject = self._createDbObjectByObj(obj=obj)
                dbSession.add(dbObject)
            dbSession.commit()
        finally:
            dbSession.close()

    @debugLogger
    def bulkDelete(
            self, objList: List[MaintenanceProcedureOperation], tokenData: TokenData = None
    ) -> None:
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            for obj in objList:
                dbObject = dbSession.query(DbMaintenanceProcedureOperation).filter_by(id=obj.id()).first()
                if dbObject is not None:
                    dbSession.delete(dbObject)
            dbSession.commit()
        finally:
            dbSession.close()

    def _updateDbObjectByObj(self, dbObject: DbMaintenanceProcedureOperation, obj: MaintenanceProcedureOperation):
        dbObject.name = obj.name() if obj.name() is not None else dbObject.name
        dbObject.description = obj.description() if obj.description() is not None else dbObject.description
        dbObject.type = obj.type() if obj.type() is not None else dbObject.type
        dbObject.maintenanceProcedureId = obj.maintenanceProcedureId() if obj.maintenanceProcedureId() is not None else dbObject.maintenanceProcedureId
        return dbObject


    def _createDbObjectByObj(self, obj: MaintenanceProcedureOperation):
        return DbMaintenanceProcedureOperation(id=obj.id(), name=obj.name(),
                                           description=obj.description(),
                                           type=obj.type(),
                                           maintenanceProcedureId=obj.maintenanceProcedureId())

    @debugLogger
    def maintenanceProcedureOperationById(
        self, id: str
    ) -> MaintenanceProcedureOperation:
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            dbObject = (
                dbSession.query(DbMaintenanceProcedureOperation)
                .filter_by(id=id)
                .first()
            )
            if dbObject is None:
                raise MaintenanceProcedureOperationDoesNotExistException(f"id = {id}")
            return MaintenanceProcedureOperation.createFrom(
                id=dbObject.id,
                name=dbObject.name,
                description=dbObject.description,
                type=dbObject.type,
                maintenanceProcedureId=dbObject.maintenanceProcedureId,
            )
        finally:
            dbSession.close()

    @debugLogger
    def maintenanceProcedureOperations(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        tokenData: TokenData = None,
    ) -> dict:
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            sortData = ""
            if order is not None:
                for item in order:
                    sortData = f'{sortData}, {item["orderBy"]} {item["direction"]}'
                sortData = sortData[2:]
            items = (
                dbSession.query(DbMaintenanceProcedureOperation)
                .order_by(text(sortData))
                .limit(resultSize)
                .offset(resultFrom)
                .all()
            )
            itemsCount = dbSession.query(DbMaintenanceProcedureOperation).count()
            if items is None:
                return {"items": [], "totalItemCount": 0}
            return {
                "items": [
                    MaintenanceProcedureOperation.createFrom(
                        id=x.id,
                        name=x.name,
                        description=x.description,
                        type=x.type,
                        maintenanceProcedureId=x.maintenanceProcedureId,
                    )
                    for x in items
                ],
                "totalItemCount": itemsCount,
            }
        finally:
            dbSession.close()

    @debugLogger
    def maintenanceProcedureOperationsByMaintenanceProcedureId(
        self,
        maintenanceProcedureId: str = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        tokenData: TokenData = None,
    ) -> dict:
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            sortData = ""
            if order is not None:
                for item in order:
                    sortData = f'{sortData}, {item["orderBy"]} {item["direction"]}'
                sortData = sortData[2:]
            items = (
                dbSession.query(DbMaintenanceProcedureOperation)
                .filter_by(maintenanceProcedureId=maintenanceProcedureId)
                .order_by(text(sortData))
                .limit(resultSize)
                .offset(resultFrom)
                .all()
            )
            itemsCount = (
                dbSession.query(DbMaintenanceProcedureOperation)
                .filter_by(maintenanceProcedureId=maintenanceProcedureId)
                .count()
            )
            if items is None:
                return {"items": [], "totalItemCount": 0}
            return {
                "items": [
                    MaintenanceProcedureOperation.createFrom(
                        id=x.id,
                        name=x.name,
                        description=x.description,
                        type=x.type,
                        maintenanceProcedureId=x.maintenanceProcedureId,
                    )
                    for x in items
                ],
                "totalItemCount": itemsCount,
            }
        finally:
            dbSession.close()
