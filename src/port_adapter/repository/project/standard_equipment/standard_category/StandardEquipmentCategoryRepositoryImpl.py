"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from sqlalchemy.sql.expression import text

from src.application.lifecycle.ApplicationServiceLifeCycle import ApplicationServiceLifeCycle
from src.domain_model.project.standard_equipment.standard_category.StandardEquipmentCategory import (
    StandardEquipmentCategory,
)
from src.domain_model.project.standard_equipment.standard_category.StandardEquipmentCategoryRepository import (
    StandardEquipmentCategoryRepository,
)
from src.domain_model.resource.exception.StandardEquipmentCategoryDoesNotExistException import (
    StandardEquipmentCategoryDoesNotExistException,
)
from src.domain_model.token.TokenData import TokenData
from src.port_adapter.repository.db_model.StandardEquipmentCategory import (
    StandardEquipmentCategory as DbStandardEquipmentCategory,
)
from src.resource.logging.decorator import debugLogger


class StandardEquipmentCategoryRepositoryImpl(StandardEquipmentCategoryRepository):
    @debugLogger
    def save(self, obj: StandardEquipmentCategory, tokenData: TokenData = None):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = dbSession.query(DbStandardEquipmentCategory).filter_by(id=obj.id()).first()
        if dbObject is not None:
            self.updateStandardEquipmentCategory(obj=obj, dbObject=dbObject, tokenData=tokenData)
        else:
            self.createStandardEquipmentCategory(obj=obj, tokenData=tokenData)

    @debugLogger
    def createStandardEquipmentCategory(self, obj: StandardEquipmentCategory, tokenData: TokenData = None):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = self._createDbObjectByObj(obj=obj)
        result = dbSession.query(DbStandardEquipmentCategory).filter_by(id=obj.id()).first()
        if result is None:
            dbSession.add(dbObject)

    @debugLogger
    def deleteStandardEquipmentCategory(self, obj: StandardEquipmentCategory, tokenData: TokenData = None) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = dbSession.query(DbStandardEquipmentCategory).filter_by(id=obj.id()).first()
        if dbObject is not None:
            dbSession.delete(dbObject)

    @debugLogger
    def updateStandardEquipmentCategory(
        self, obj: StandardEquipmentCategory, dbObject: DbStandardEquipmentCategory = None, tokenData: TokenData = None
    ) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        if dbObject is None:
            raise StandardEquipmentCategoryDoesNotExistException(f"id = {obj.id()}")
        dbObject = self._updateDbObjectByObj(dbObject=dbObject, obj=obj)
        dbSession.add(dbObject)

    @debugLogger
    def bulkSave(self, objList: List[StandardEquipmentCategory], tokenData: TokenData = None):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        for obj in objList:
            dbObject = dbSession.query(DbStandardEquipmentCategory).filter_by(id=obj.id()).first()
            if dbObject is not None:
                dbObject = self._updateDbObjectByObj(dbObject=dbObject, obj=obj)
            else:
                dbObject = self._createDbObjectByObj(obj=obj)
            dbSession.add(dbObject)

    @debugLogger
    def bulkDelete(self, objList: List[StandardEquipmentCategory], tokenData: TokenData = None) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        for obj in objList:
            dbObject = dbSession.query(DbStandardEquipmentCategory).filter_by(id=obj.id()).first()
            if dbObject is not None:
                dbSession.delete(dbObject)

    @debugLogger
    def standardEquipmentCategoryById(self, id: str) -> StandardEquipmentCategory:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = dbSession.query(DbStandardEquipmentCategory).filter_by(id=id).first()
        if dbObject is None:
            raise StandardEquipmentCategoryDoesNotExistException(f"id = {id}")
        return StandardEquipmentCategory.createFrom(id=dbObject.id, name=dbObject.name)

    @debugLogger
    def standardEquipmentCategories(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        tokenData: TokenData = None,
    ) -> dict:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        sortData = ""
        if order is not None:
            for item in order:
                sortData = f'{sortData}, {item["orderBy"]} {item["direction"]}'
            sortData = sortData[2:]
        items = (
            dbSession.query(DbStandardEquipmentCategory)
            .order_by(text(sortData))
            .limit(resultSize)
            .offset(resultFrom)
            .all()
        )
        itemsCount = dbSession.query(DbStandardEquipmentCategory).count()
        if items is None:
            return {"items": [], "totalItemCount": 0}
        return {
            "items": [StandardEquipmentCategory.createFrom(id=x.id, name=x.name) for x in items],
            "totalItemCount": itemsCount,
        }

    def _updateDbObjectByObj(self, dbObject: DbStandardEquipmentCategory, obj: StandardEquipmentCategory):
        dbObject.name = obj.name() if obj.name() is not None else dbObject.name
        return dbObject

    def _createDbObjectByObj(self, obj: StandardEquipmentCategory):
        return DbStandardEquipmentCategory(id=obj.id(), name=obj.name())
