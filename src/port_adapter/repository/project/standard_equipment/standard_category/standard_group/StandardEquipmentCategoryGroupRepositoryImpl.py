"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from sqlalchemy.sql.expression import text

from src.application.lifecycle.ApplicationServiceLifeCycle import ApplicationServiceLifeCycle
from src.domain_model.project.standard_equipment.standard_category.standard_group.StandardEquipmentCategoryGroup import (
    StandardEquipmentCategoryGroup,
)
from src.domain_model.project.standard_equipment.standard_category.standard_group.StandardEquipmentCategoryGroupRepository import (
    StandardEquipmentCategoryGroupRepository,
)
from src.domain_model.resource.exception.StandardEquipmentCategoryGroupDoesNotExistException import (
    StandardEquipmentCategoryGroupDoesNotExistException,
)
from src.domain_model.token.TokenData import TokenData
from src.port_adapter.repository.db_model.StandardEquipmentCategoryGroup import (
    StandardEquipmentCategoryGroup as DbStandardEquipmentCategoryGroup,
)
from src.resource.logging.decorator import debugLogger


class StandardEquipmentCategoryGroupRepositoryImpl(
    StandardEquipmentCategoryGroupRepository
):
    @debugLogger
    def save(self, obj: StandardEquipmentCategoryGroup, tokenData: TokenData = None):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = (
            dbSession.query(DbStandardEquipmentCategoryGroup)
            .filter_by(id=obj.id())
            .first()
        )
        if dbObject is not None:
            self.updateStandardEquipmentCategoryGroup(obj=obj, dbObject=dbObject, tokenData=tokenData)
        else:
            self.createStandardEquipmentCategoryGroup(obj=obj, tokenData=tokenData)

    @debugLogger
    def createStandardEquipmentCategoryGroup(
        self, obj: StandardEquipmentCategoryGroup, tokenData: TokenData = None
    ):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = self._createDbObjectByObj(obj=obj)
        result = (
            dbSession.query(DbStandardEquipmentCategoryGroup)
            .filter_by(id=obj.id())
            .first()
        )
        if result is None:
            dbSession.add(dbObject)
    

    @debugLogger
    def deleteStandardEquipmentCategoryGroup(
        self, obj: StandardEquipmentCategoryGroup, tokenData: TokenData = None
    ) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = (
            dbSession.query(DbStandardEquipmentCategoryGroup)
            .filter_by(id=obj.id())
            .first()
        )
        if dbObject is not None:
            dbSession.delete(dbObject)
    

    @debugLogger
    def updateStandardEquipmentCategoryGroup(
        self, obj: StandardEquipmentCategoryGroup, dbObject: DbStandardEquipmentCategoryGroup = None, tokenData: TokenData = None
    ) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        if dbObject is None:
            raise StandardEquipmentCategoryGroupDoesNotExistException(
                f"id = {obj.id()}"
            )
        dbObject = self._updateDbObjectByObj(dbObject=dbObject, obj=obj)
        dbSession.add(dbObject)
        

    @debugLogger
    def bulkSave(self, objList: List[StandardEquipmentCategoryGroup], tokenData: TokenData = None):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        for obj in objList:
            dbObject = dbSession.query(DbStandardEquipmentCategoryGroup).filter_by(id=obj.id()).first()
            if dbObject is not None:
                dbObject = self._updateDbObjectByObj(dbObject=dbObject, obj=obj)
            else:
                dbObject = self._createDbObjectByObj(obj=obj)
            dbSession.add(dbObject)


    @debugLogger
    def bulkDelete(
            self, objList: List[StandardEquipmentCategoryGroup], tokenData: TokenData = None
    ) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        for obj in objList:
            dbObject = dbSession.query(DbStandardEquipmentCategoryGroup).filter_by(id=obj.id()).first()
            if dbObject is not None:
                dbSession.delete(dbObject)


    @debugLogger
    def standardEquipmentCategoryGroupById(
        self, id: str
    ) -> StandardEquipmentCategoryGroup:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = (
            dbSession.query(DbStandardEquipmentCategoryGroup)
            .filter_by(id=id)
            .first()
        )
        if dbObject is None:
            raise StandardEquipmentCategoryGroupDoesNotExistException(f"id = {id}")
        return StandardEquipmentCategoryGroup.createFrom(
            id=dbObject.id,
            name=dbObject.name,
            standardEquipmentCategoryId=dbObject.standardEquipmentCategoryId,
        )


    @debugLogger
    def standardEquipmentCategoryGroups(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        tokenData: TokenData = None,
    ) -> dict:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        sortData = ""
        if order is not None:
            for item in order:
                sortData = f'{sortData}, {item["orderBy"]} {item["direction"]}'
            sortData = sortData[2:]
        items = (
            dbSession.query(DbStandardEquipmentCategoryGroup)
            .order_by(text(sortData))
            .limit(resultSize)
            .offset(resultFrom)
            .all()
        )
        itemsCount = dbSession.query(DbStandardEquipmentCategoryGroup).count()
        if items is None:
            return {"items": [], "totalItemCount": 0}
        return {
            "items": [
                StandardEquipmentCategoryGroup.createFrom(
                    id=x.id,
                    name=x.name,
                    standardEquipmentCategoryId=x.standardEquipmentCategoryId,
                )
                for x in items
            ],
            "totalItemCount": itemsCount,
        }


    def _updateDbObjectByObj(self, dbObject: DbStandardEquipmentCategoryGroup, obj: StandardEquipmentCategoryGroup):
        dbObject.name = obj.name() if obj.name() is not None else dbObject.name
        dbObject.standardEquipmentCategoryId = obj.standardEquipmentCategoryId() if obj.standardEquipmentCategoryId() is not None else dbObject.standardEquipmentCategoryId
        return dbObject


    def _createDbObjectByObj(self, obj: StandardEquipmentCategoryGroup):
        return DbStandardEquipmentCategoryGroup(id=obj.id(), name=obj.name(),
                                            standardEquipmentCategoryId=obj.standardEquipmentCategoryId())
