"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

import os
from typing import List

from sqlalchemy import create_engine
from sqlalchemy.exc import IntegrityError
from sqlalchemy.sql.expression import text

from src.domain_model.project.standard_equipment.standard_project.standard_category.StandardEquipmentProjectCategory import (
    StandardEquipmentProjectCategory,
)
from src.domain_model.project.standard_equipment.standard_project.standard_category.StandardEquipmentProjectCategoryRepository import (
    StandardEquipmentProjectCategoryRepository,
)
from src.domain_model.resource.exception.StandardEquipmentProjectCategoryDoesNotExistException import (
    StandardEquipmentProjectCategoryDoesNotExistException,
)
from src.domain_model.token.TokenData import TokenData
from src.port_adapter.repository.db_model.StandardEquipmentProjectCategory import (
    StandardEquipmentProjectCategory as DbStandardEquipmentProjectCategory,
)
from src.port_adapter.repository.resource.exception.IntegrityErrorRepositoryException import (
    IntegrityErrorRepositoryException,
)
from src.application.lifecycle.ApplicationServiceLifeCycle import (
    ApplicationServiceLifeCycle,
)
from src.resource.logging.decorator import debugLogger
from src.resource.logging.logger import logger


class StandardEquipmentProjectCategoryRepositoryImpl(
    StandardEquipmentProjectCategoryRepository
):
    @debugLogger
    def save(self, obj: StandardEquipmentProjectCategory, tokenData: TokenData = None):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = (
            dbSession.query(DbStandardEquipmentProjectCategory)
            .filter_by(id=obj.id())
            .first()
        )
        if dbObject is not None:
            self.updateStandardEquipmentProjectCategory(
                obj=obj, dbObject=dbObject, tokenData=tokenData
            )
        else:
            self.createStandardEquipmentProjectCategory(obj=obj, tokenData=tokenData)

    @debugLogger
    def bulkSave(
        self,
        objList: List[StandardEquipmentProjectCategory],
        tokenData: TokenData = None,
    ):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        for obj in objList:
            dbObject = (
                dbSession.query(DbStandardEquipmentProjectCategory)
                .filter_by(id=obj.id())
                .first()
            )
            if dbObject is not None:
                dbObject = self._updateDbObjectByObj(dbObject=dbObject, obj=obj)
            else:
                dbObject = self._createDbObjectByObj(obj=obj)
            dbSession.add(dbObject)

    @debugLogger
    def bulkDelete(
        self,
        objList: List[StandardEquipmentProjectCategory],
        tokenData: TokenData = None,
    ) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        for obj in objList:
            dbObject = (
                dbSession.query(DbStandardEquipmentProjectCategory)
                .filter_by(id=obj.id())
                .first()
            )
            if dbObject is not None:
                dbSession.delete(dbObject)

    @debugLogger
    def createStandardEquipmentProjectCategory(
        self, obj: StandardEquipmentProjectCategory, tokenData: TokenData = None
    ):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = self._createDbObjectByObj(obj=obj)
        dbSession.add(dbObject)

    @debugLogger
    def deleteStandardEquipmentProjectCategory(
        self, obj: StandardEquipmentProjectCategory, tokenData: TokenData = None
    ) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = (
            dbSession.query(DbStandardEquipmentProjectCategory)
            .filter_by(id=obj.id())
            .first()
        )
        if dbObject is not None:
            dbSession.delete(dbObject)

    @debugLogger
    def updateStandardEquipmentProjectCategory(
        self,
        obj: StandardEquipmentProjectCategory,
        dbObject: DbStandardEquipmentProjectCategory = None,
        tokenData: TokenData = None,
    ) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        if dbObject is None:
            raise StandardEquipmentProjectCategoryDoesNotExistException(
                f"id = {obj.id()}"
            )
        dbSession.add(self._updateDbObjectByObj(dbObject=dbObject, obj=obj))

    @debugLogger
    def standardEquipmentProjectCategoryById(
        self, id: str
    ) -> StandardEquipmentProjectCategory:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = (
            dbSession.query(DbStandardEquipmentProjectCategory).filter_by(id=id).first()
        )
        if dbObject is None:
            raise StandardEquipmentProjectCategoryDoesNotExistException(f"id = {id}")
        return StandardEquipmentProjectCategory.createFrom(
            id=dbObject.id, name=dbObject.name, organizationId=dbObject.organizationId
        )

    @debugLogger
    def standardEquipmentProjectCategories(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        tokenData: TokenData = None,
    ) -> dict:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        sortData = ""
        if order is not None:
            for item in order:
                sortData = f'{sortData}, {item["orderBy"]} {item["direction"]}'
            sortData = sortData[2:]
        items = (
            dbSession.query(DbStandardEquipmentProjectCategory)
            .order_by(text(sortData))
            .limit(resultSize)
            .offset(resultFrom)
            .all()
        )

        itemsCount = dbSession.query(DbStandardEquipmentProjectCategory).count()
        if items is None:
            return {"items": [], "totalItemCount": 0}
        return {
            "items": [
                StandardEquipmentProjectCategory.createFrom(
                    id=x.id, name=x.name, organizationId=x.organizationId
                )
                for x in items
            ],
            "totalItemCount": itemsCount,
        }

    @debugLogger
    def standardEquipmentProjectCategoriesByOrganizationId(
        self,
        organizationId: str = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        tokenData: TokenData = None,
    ) -> dict:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        sortData = ""
        if order is not None:
            for item in order:
                sortData = f'{sortData}, {item["orderBy"]} {item["direction"]}'
            sortData = sortData[2:]
        items = (
            dbSession.query(DbStandardEquipmentProjectCategory)
            .filter_by(organizationId=organizationId)
            .order_by(text(sortData))
            .limit(resultSize)
            .offset(resultFrom)
            .all()
        )
        itemsCount = (
            dbSession.query(DbStandardEquipmentProjectCategory)
            .filter_by(organizationId=organizationId)
            .count()
        )
        if items is None:
            return {"items": [], "totalItemCount": 0}
        return {
            "items": [
                StandardEquipmentProjectCategory.createFrom(
                    id=x.id, name=x.name, organizationId=x.organizationId
                )
                for x in items
            ],
            "totalItemCount": itemsCount,
        }

    def _updateDbObjectByObj(
        self,
        dbObject: DbStandardEquipmentProjectCategory,
        obj: StandardEquipmentProjectCategory,
    ):
        dbObject.name = obj.name() if obj.name() is not None else dbObject.name
        dbObject.organizationId = (
            obj.organizationId()
            if obj.organizationId() is not None
            else dbObject.organizationId
        )
        return dbObject

    def _createDbObjectByObj(self, obj: StandardEquipmentProjectCategory):
        return DbStandardEquipmentProjectCategory(
            id=obj.id(), name=obj.name(), organizationId=obj.organizationId()
        )
