"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

import os
from typing import List

from sqlalchemy import create_engine
from sqlalchemy.sql.expression import text

from src.domain_model.role.Role import Role
from src.domain_model.role.RoleRepository import RoleRepository
from src.domain_model.resource.exception.RoleDoesNotExistException import (
    RoleDoesNotExistException,
)
from src.domain_model.role.Role import Role
from src.domain_model.role.RoleRepository import RoleRepository
from src.domain_model.token.TokenData import TokenData
from src.port_adapter.repository.DbSession import DbSession
from src.port_adapter.repository.db_model.Role import Role as DbRole
from src.port_adapter.repository.db_model.role__organization__junction import (
    ROLE__ORGANIZATION__JUNCTION,
)
from src.resource.logging.decorator import debugLogger
from src.resource.logging.logger import logger


class RoleRepositoryImpl(RoleRepository):
    def __init__(self):
        try:
            self._db = create_engine(
                f"mysql+mysqlconnector://{os.getenv('CAFM_PROJECT_DB_USER', 'root')}:{os.getenv('CAFM_PROJECT_DB_PASSWORD', '1234')}@{os.getenv('CAFM_PROJECT_DB_HOST', '127.0.0.1')}:{os.getenv('CAFM_PROJECT_DB_PORT', '3306')}/{os.getenv('CAFM_PROJECT_DB_NAME', 'cafm-project')}"
            )
        except Exception as e:
            logger.warn(
                f"[{RoleRepositoryImpl.__init__.__qualname__}] Could not connect to the db, message: {e}"
            )
            raise Exception(f"Could not connect to the db, message: {e}")

    @debugLogger
    def save(self, obj: Role, tokenData: TokenData = None):
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            dbObject = dbSession.query(DbRole).filter_by(id=obj.id()).first()
            if dbObject is not None:
                self.updateRole(obj=obj, dbObject=dbObject, tokenData=tokenData)
            else:
                self.createRole(obj=obj, tokenData=tokenData)
        finally:
            dbSession.close()

    @debugLogger
    def createRole(self, obj: Role, tokenData: TokenData = None):
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            dbObject = self._createDbObjectByObj(obj=obj)
            dbSession.add(dbObject)
            dbSession.commit()
        finally:
            dbSession.close()

    @debugLogger
    def deleteRole(self, obj: Role, tokenData: TokenData = None) -> None:
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            dbObject = dbSession.query(DbRole).filter_by(id=obj.id()).first()
            if dbObject is not None:
                dbSession.delete(dbObject)
                dbSession.commit()
        finally:
            dbSession.close()

    @debugLogger
    def updateRole(
        self, obj: Role, dbObject: DbRole = None, tokenData: TokenData = None
    ) -> None:
        from sqlalchemy import inspect

        dbSession = inspect(dbObject).session
        if dbObject is None:
            raise RoleDoesNotExistException(f"id = {obj.id()}")
        dbSession.add(self._updateDbObjectByObj(dbObject=dbObject, obj=obj))
        dbSession.commit()

    @debugLogger
    def roleByName(self, name: str) -> Role:
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            dbObject = dbSession.query(DbRole).filter_by(name=name).first()
            if dbObject is None:
                raise RoleDoesNotExistException(f"name = {name}")
            return self._roleFromDbObject(dbObject=dbObject)
        finally:
            dbSession.close()

    @debugLogger
    def rolesByOrganizationType(
        self,
        organizationType: str,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        tokenData: TokenData = None,
    ) -> dict:
        sortData = ""
        if order is not None:
            for item in order:
                sortData = f'{sortData}, {item["orderBy"]} {item["direction"]}'
            sortData = sortData[2:]

        items = self._db.execute(
            text(
                f"""SELECT
                        DISTINCT
                            role.id as id,
                            role.name as name,
                            role.title as title
                    FROM role
                    LEFT OUTER JOIN
                        {ROLE__ORGANIZATION__JUNCTION} role__org__junc ON role.id = role__org__junc.role_id
                    LEFT OUTER JOIN
                        organization ON organization.id = role__org__junc.organization_id
                    WHERE organization.organization_type = '{organizationType}'

                    {sortData}
                    LIMIT {resultSize} OFFSET {resultFrom}
                """
            )
        )

        itemsCount = self._db.execute(
            text(
                f"""SELECT count(1) FROM role
                    LEFT OUTER JOIN
                        {ROLE__ORGANIZATION__JUNCTION} role__org__junc ON role.id = role__org__junc.role_id
                    LEFT OUTER JOIN
                        organization ON organization.id = role__org__junc.organization_id
                    WHERE organization.organization_type = '{organizationType}'
                """
            )
        ).scalar()

        if items is None:
            return {"items": [], "totalItemCount": 0}
        return {
            "items": [
                Role.createFrom(id=x.id, name=x.name, title=x.title) for x in items
            ],
            "totalItemCount": itemsCount,
        }

    @debugLogger
    def roleById(self, id: str) -> Role:
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            dbObject = dbSession.query(DbRole).filter_by(id=id).first()
            if dbObject is None:
                raise RoleDoesNotExistException(f"id = {id}")
            return Role.createFrom(
                id=dbObject.id, name=dbObject.name, title=dbObject.title
            )
        finally:
            dbSession.close()

    @debugLogger
    def _roleFromDbObject(self, dbObject: DbRole):
        return Role(
            id=dbObject.id,
            name=dbObject.name,
            title=dbObject.title,
        )

    def _updateDbObjectByObj(self, dbObject: DbRole, obj: Role):
        dbObject.name = obj.name() if obj.name() is not None else dbObject.name
        dbObject.title = obj.title() if obj.title() is not None else dbObject.title
        return dbObject

    def _createDbObjectByObj(self, obj: Role):
        return DbRole(id=obj.id(), name=obj.name(), title=obj.title())

    @debugLogger
    def roles(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        tokenData: TokenData = None,
    ) -> dict:
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            sortData = ""
            if order is not None:
                for item in order:
                    sortData = f'{sortData}, {item["orderBy"]} {item["direction"]}'
                sortData = sortData[2:]
            items = (
                dbSession.query(DbRole)
                .order_by(text(sortData))
                .limit(resultSize)
                .offset(resultFrom)
                .all()
            )
            itemsCount = dbSession.query(DbRole).count()
            if items is None:
                return {"items": [], "totalItemCount": 0}
            return {
                "items": [
                    Role.createFrom(id=x.id, name=x.name, title=x.title) for x in items
                ],
                "totalItemCount": itemsCount,
            }
        finally:
            dbSession.close()

    @debugLogger
    def bulkSave(self, objList: List[Role], tokenData: TokenData = None):
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            for obj in objList:
                dbObject = dbSession.query(DbRole).filter_by(id=obj.id()).first()
                if dbObject is not None:
                    dbObject = self._updateDbObjectByObj(dbObject=dbObject, obj=obj)
                else:
                    dbObject = self._createDbObjectByObj(obj=obj)
                dbSession.add(dbObject)
            dbSession.commit()
        finally:
            dbSession.close()

    @debugLogger
    def bulkDelete(self, objList: List[Role], tokenData: TokenData = None) -> None:
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            for obj in objList:
                dbObject = dbSession.query(DbRole).filter_by(id=obj.id()).first()
                if dbObject is not None:
                    dbSession.delete(dbObject)
            dbSession.commit()
        finally:
            dbSession.close()
