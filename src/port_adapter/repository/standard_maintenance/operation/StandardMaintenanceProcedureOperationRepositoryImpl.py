"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from sqlalchemy.sql.expression import text

from src.application.lifecycle.ApplicationServiceLifeCycle import ApplicationServiceLifeCycle
from src.domain_model.standard_maintenance.procedure.operation.StandardMaintenanceProcedureOperation import (
    StandardMaintenanceProcedureOperation,
)
from src.domain_model.standard_maintenance.procedure.operation.StandardMaintenanceProcedureOperationRepository import (
    StandardMaintenanceProcedureOperationRepository,
)
from src.domain_model.resource.exception.StandardMaintenanceProcedureOperationDoesNotExistException import (
    StandardMaintenanceProcedureOperationDoesNotExistException,
)
from src.domain_model.token.TokenData import TokenData
from src.port_adapter.repository.db_model.StandardMaintenanceProcedureOperation import (
    StandardMaintenanceProcedureOperation as DbStandardMaintenanceProcedureOperation,
)
from src.resource.logging.decorator import debugLogger


class StandardMaintenanceProcedureOperationRepositoryImpl(StandardMaintenanceProcedureOperationRepository):
    @debugLogger
    def save(self, obj: StandardMaintenanceProcedureOperation, tokenData: TokenData = None):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = dbSession.query(DbStandardMaintenanceProcedureOperation).filter_by(id=obj.id()).first()
        if dbObject is not None:
            self.updateStandardMaintenanceProcedureOperation(obj=obj, dbObject=dbObject, tokenData=tokenData)
        else:
            self.createStandardMaintenanceProcedureOperation(obj=obj, tokenData=tokenData)

    @debugLogger
    def createStandardMaintenanceProcedureOperation(self, obj: StandardMaintenanceProcedureOperation, tokenData: TokenData = None):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = self._createDbObjectByObj(obj=obj)
        result = dbSession.query(DbStandardMaintenanceProcedureOperation).filter_by(id=obj.id()).first()
        if result is None:
            dbSession.add(dbObject)

    @debugLogger
    def deleteStandardMaintenanceProcedureOperation(
        self, obj: StandardMaintenanceProcedureOperation, tokenData: TokenData = None
    ) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = dbSession.query(DbStandardMaintenanceProcedureOperation).filter_by(id=obj.id()).first()
        if dbObject is not None:
            dbSession.delete(dbObject)

    @debugLogger
    def updateStandardMaintenanceProcedureOperation(
        self,
        obj: StandardMaintenanceProcedureOperation,
        dbObject: DbStandardMaintenanceProcedureOperation = None,
        tokenData: TokenData = None,
    ) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        if dbObject is None:
            raise StandardMaintenanceProcedureOperationDoesNotExistException(f"id = {obj.id()}")
        dbObject = self._updateDbObjectByObj(dbObject=dbObject, obj=obj)
        dbSession.add(dbObject)

    @debugLogger
    def bulkSave(self, objList: List[StandardMaintenanceProcedureOperation], tokenData: TokenData = None):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        for obj in objList:
            dbObject = dbSession.query(DbStandardMaintenanceProcedureOperation).filter_by(id=obj.id()).first()
            if dbObject is not None:
                dbObject = self._updateDbObjectByObj(dbObject=dbObject, obj=obj)
            else:
                dbObject = self._createDbObjectByObj(obj=obj)
            dbSession.add(dbObject)

    @debugLogger
    def bulkDelete(self, objList: List[StandardMaintenanceProcedureOperation], tokenData: TokenData = None) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        for obj in objList:
            dbObject = dbSession.query(DbStandardMaintenanceProcedureOperation).filter_by(id=obj.id()).first()
            if dbObject is not None:
                dbSession.delete(dbObject)

    def _updateDbObjectByObj(self, dbObject: DbStandardMaintenanceProcedureOperation, obj: StandardMaintenanceProcedureOperation):
        dbObject.name = obj.name() if obj.name() is not None else dbObject.name
        dbObject.description = obj.description() if obj.description() is not None else dbObject.description
        dbObject.type = obj.type() if obj.type() is not None else dbObject.type
        dbObject.standardMaintenanceProcedureId = (
            obj.standardMaintenanceProcedureId()
            if obj.standardMaintenanceProcedureId() is not None
            else dbObject.standardMaintenanceProcedureId
        )
        return dbObject

    def _createDbObjectByObj(self, obj: StandardMaintenanceProcedureOperation):
        return DbStandardMaintenanceProcedureOperation(
            id=obj.id(),
            name=obj.name(),
            description=obj.description(),
            type=obj.type(),
            standardMaintenanceProcedureId=obj.standardMaintenanceProcedureId(),
        )

    @debugLogger
    def standardMaintenanceProcedureOperationById(self, id: str) -> StandardMaintenanceProcedureOperation:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = dbSession.query(DbStandardMaintenanceProcedureOperation).filter_by(id=id).first()
        if dbObject is None:
            raise StandardMaintenanceProcedureOperationDoesNotExistException(f"id = {id}")
        return StandardMaintenanceProcedureOperation.createFrom(
            id=dbObject.id,
            name=dbObject.name,
            description=dbObject.description,
            type=dbObject.type,
            standardMaintenanceProcedureId=dbObject.standardMaintenanceProcedureId,
        )

    @debugLogger
    def standardMaintenanceProcedureOperations(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        tokenData: TokenData = None,
    ) -> dict:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        sortData = ""
        if order is not None:
            for item in order:
                sortData = f'{sortData}, {item["orderBy"]} {item["direction"]}'
            sortData = sortData[2:]
        items = (
            dbSession.query(DbStandardMaintenanceProcedureOperation)
            .order_by(text(sortData))
            .limit(resultSize)
            .offset(resultFrom)
            .all()
        )
        itemsCount = dbSession.query(DbStandardMaintenanceProcedureOperation).count()
        if items is None:
            return {"items": [], "totalItemCount": 0}
        return {
            "items": [
                StandardMaintenanceProcedureOperation.createFrom(
                    id=x.id,
                    name=x.name,
                    description=x.description,
                    type=x.type,
                    standardMaintenanceProcedureId=x.standardMaintenanceProcedureId,
                )
                for x in items
            ],
            "totalItemCount": itemsCount,
        }

    @debugLogger
    def standardMaintenanceProcedureOperationsByStandardMaintenanceProcedureId(
        self,
        standardMaintenanceProcedureId: str = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        tokenData: TokenData = None,
    ) -> dict:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        sortData = ""
        if order is not None:
            for item in order:
                sortData = f'{sortData}, {item["orderBy"]} {item["direction"]}'
            sortData = sortData[2:]
        items = (
            dbSession.query(DbStandardMaintenanceProcedureOperation)
            .filter_by(standardMaintenanceProcedureId=standardMaintenanceProcedureId)
            .order_by(text(sortData))
            .limit(resultSize)
            .offset(resultFrom)
            .all()
        )
        itemsCount = (
            dbSession.query(DbStandardMaintenanceProcedureOperation)
            .filter_by(standardMaintenanceProcedureId=standardMaintenanceProcedureId)
            .count()
        )
        if items is None:
            return {"items": [], "totalItemCount": 0}
        return {
            "items": [
                StandardMaintenanceProcedureOperation.createFrom(
                    id=x.id,
                    name=x.name,
                    description=x.description,
                    type=x.type,
                    standardMaintenanceProcedureId=x.standardMaintenanceProcedureId,
                )
                for x in items
            ],
            "totalItemCount": itemsCount,
        }
