"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List

from sqlalchemy.sql.expression import text

from src.application.lifecycle.ApplicationServiceLifeCycle import ApplicationServiceLifeCycle
from src.domain_model.standard_maintenance.procedure.operation.parameter.StandardMaintenanceProcedureOperationParameter import (
    StandardMaintenanceProcedureOperationParameter,
)
from src.domain_model.standard_maintenance.procedure.operation.parameter.StandardMaintenanceProcedureOperationParameterRepository import (
    StandardMaintenanceProcedureOperationParameterRepository,
)
from src.domain_model.resource.exception.StandardMaintenanceProcedureOperationParameterDoesNotExistException import (
    StandardMaintenanceProcedureOperationParameterDoesNotExistException,
)
from src.domain_model.token.TokenData import TokenData
from src.port_adapter.repository.db_model.StandardMaintenanceProcedureOperationParameter import (
    StandardMaintenanceProcedureOperationParameter as DbStandardMaintenanceProcedureOperationParameter,
)
from src.resource.logging.decorator import debugLogger


class StandardMaintenanceProcedureOperationParameterRepositoryImpl(
    StandardMaintenanceProcedureOperationParameterRepository
):
    @debugLogger
    def save(
        self, obj: StandardMaintenanceProcedureOperationParameter, tokenData: TokenData = None
    ):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = (
            dbSession.query(DbStandardMaintenanceProcedureOperationParameter)
            .filter_by(id=obj.id())
            .first()
        )
        if dbObject is not None:
            self.updateStandardMaintenanceProcedureOperationParameter(
                obj=obj, dbObject=dbObject, tokenData=tokenData
            )
        else:
            self.createStandardMaintenanceProcedureOperationParameter(
                obj=obj, tokenData=tokenData
            )

    @debugLogger
    def createStandardMaintenanceProcedureOperationParameter(
        self, obj: StandardMaintenanceProcedureOperationParameter, tokenData: TokenData = None
    ):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = self._createDbObjectByObj(obj=obj)
        result = (
            dbSession.query(DbStandardMaintenanceProcedureOperationParameter)
            .filter_by(id=obj.id())
            .first()
        )
        if result is None:
            dbSession.add(dbObject)
    

    @debugLogger
    def deleteStandardMaintenanceProcedureOperationParameter(
        self, obj: StandardMaintenanceProcedureOperationParameter, tokenData: TokenData = None
    ) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = (
            dbSession.query(DbStandardMaintenanceProcedureOperationParameter)
            .filter_by(id=obj.id())
            .first()
        )
        if dbObject is not None:
            dbSession.delete(dbObject)
    

    @debugLogger
    def updateStandardMaintenanceProcedureOperationParameter(
        self, obj: StandardMaintenanceProcedureOperationParameter, dbObject: DbStandardMaintenanceProcedureOperationParameter = None, tokenData: TokenData = None
    ) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        if dbObject is None:
            raise StandardMaintenanceProcedureOperationParameterDoesNotExistException(
                f"id = {obj.id()}"
            )
        dbObject = self._updateDbObjectByObj(dbObject=dbObject, obj=obj)
        dbSession.add(dbObject)

    @debugLogger
    def bulkSave(self, objList: List[StandardMaintenanceProcedureOperationParameter], tokenData: TokenData = None):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        for obj in objList:
            dbObject = dbSession.query(DbStandardMaintenanceProcedureOperationParameter).filter_by(id=obj.id()).first()
            if dbObject is not None:
                dbObject = self._updateDbObjectByObj(dbObject=dbObject, obj=obj)
            else:
                dbObject = self._createDbObjectByObj(obj=obj)
            dbSession.add(dbObject)


    @debugLogger
    def bulkDelete(
            self, objList: List[StandardMaintenanceProcedureOperationParameter], tokenData: TokenData = None
    ) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        for obj in objList:
            dbObject = dbSession.query(DbStandardMaintenanceProcedureOperationParameter).filter_by(id=obj.id()).first()
            if dbObject is not None:
                dbSession.delete(dbObject)


    @debugLogger
    def standardMaintenanceProcedureOperationParameterById(
        self, id: str
    ) -> StandardMaintenanceProcedureOperationParameter:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = (
            dbSession.query(DbStandardMaintenanceProcedureOperationParameter)
            .filter_by(id=id)
            .first()
        )
        if dbObject is None:
            raise StandardMaintenanceProcedureOperationParameterDoesNotExistException(
                f"id = {id}"
            )
        return StandardMaintenanceProcedureOperationParameter.createFrom(
            id=dbObject.id,
            name=dbObject.name,
            unitId=dbObject.unitId,
            standardMaintenanceProcedureOperationId=dbObject.standardMaintenanceProcedureOperationId,
            minValue=dbObject.minValue,
            maxValue=dbObject.maxValue,
        )

    @debugLogger
    def standardMaintenanceProcedureOperationParameters(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        tokenData: TokenData = None,
    ) -> dict:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        sortData = ""
        if order is not None:
            for item in order:
                sortData = f'{sortData}, {item["orderBy"]} {item["direction"]}'
            sortData = sortData[2:]
        items = (
            dbSession.query(DbStandardMaintenanceProcedureOperationParameter)
            .order_by(text(sortData))
            .limit(resultSize)
            .offset(resultFrom)
            .all()
        )
        itemsCount = dbSession.query(
            DbStandardMaintenanceProcedureOperationParameter
        ).count()
        if items is None:
            return {"items": [], "totalItemCount": 0}
        return {
            "items": [
                StandardMaintenanceProcedureOperationParameter.createFrom(
                    id=x.id,
                    name=x.name,
                    unitId=x.unitId,
                    standardMaintenanceProcedureOperationId=x.standardMaintenanceProcedureOperationId,
                    minValue=x.minValue,
                    maxValue=x.maxValue,
                )
                for x in items
            ],
            "totalItemCount": itemsCount,
        }

    @debugLogger
    def standardMaintenanceProcedureOperationParametersByStandardMaintenanceProcedureOperationId(
        self,
        standardMaintenanceProcedureOperationId: str = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        tokenData: TokenData = None,
    ) -> dict:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        sortData = ""
        if order is not None:
            for item in order:
                sortData = f'{sortData}, {item["orderBy"]} {item["direction"]}'
            sortData = sortData[2:]
        items = (
            dbSession.query(DbStandardMaintenanceProcedureOperationParameter)
            .filter_by(
                standardMaintenanceProcedureOperationId=standardMaintenanceProcedureOperationId
            )
            .order_by(text(sortData))
            .limit(resultSize)
            .offset(resultFrom)
            .all()
        )
        itemsCount = (
            dbSession.query(DbStandardMaintenanceProcedureOperationParameter)
            .filter_by(
                standardMaintenanceProcedureOperationId=standardMaintenanceProcedureOperationId
            )
            .count()
        )
        if items is None:
            return {"items": [], "totalItemCount": 0}
        return {
            "items": [
                StandardMaintenanceProcedureOperationParameter.createFrom(
                    id=x.id,
                    name=x.name,
                    unitId=x.unitId,
                    standardMaintenanceProcedureOperationId=x.standardMaintenanceProcedureOperationId,
                    minValue=x.minValue,
                    maxValue=x.maxValue,
                )
                for x in items
            ],
            "totalItemCount": itemsCount,
        }

    def _updateDbObjectByObj(self, dbObject: DbStandardMaintenanceProcedureOperationParameter,
                             obj: StandardMaintenanceProcedureOperationParameter):
        dbObject.name = obj.name() if obj.name() is not None else dbObject.name
        dbObject.unitId = obj.unitId() if obj.unitId() is not None else dbObject.unitId
        dbObject.standardMaintenanceProcedureOperationId = obj.standardMaintenanceProcedureOperationId() if obj.standardMaintenanceProcedureOperationId() is not None else dbObject.standardMaintenanceProcedureOperationId
        dbObject.minValue = obj.minValue() if obj.minValue() is not None else dbObject.minValue
        dbObject.maxValue = obj.maxValue() if obj.maxValue() is not None else dbObject.maxValue
        return dbObject


    def _createDbObjectByObj(self, obj: StandardMaintenanceProcedureOperationParameter):
        return DbStandardMaintenanceProcedureOperationParameter(id=obj.id(), name=obj.name(),
                                                    unitId=obj.unitId(),
                                                    standardMaintenanceProcedureOperationId=obj.standardMaintenanceProcedureOperationId(),
                                                    minValue=obj.minValue(),
                                                    maxValue=obj.maxValue())
