"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

import os
from src.application.lifecycle.ApplicationServiceLifeCycle import ApplicationServiceLifeCycle
from typing import List

from sqlalchemy import create_engine
from sqlalchemy.exc import IntegrityError
from sqlalchemy.sql.expression import label, text

from src.domain_model.standard_maintenance.procedure.operation.label.StandardMaintenanceProcedureOperationLabel import StandardMaintenanceProcedureOperationLabel
from src.domain_model.standard_maintenance.procedure.operation.label.StandardMaintenanceProcedureOperationLabelRepository import StandardMaintenanceProcedureOperationLabelRepository
from src.domain_model.resource.exception.StandardMaintenanceProcedureOperationLabelDoesNotExistException import StandardMaintenanceProcedureOperationLabelDoesNotExistException
from src.domain_model.token.TokenData import TokenData
from src.port_adapter.repository.db_model.StandardMaintenanceProcedureOperationLabel import StandardMaintenanceProcedureOperationLabel as DbStandardMaintenanceProcedureOperationLabel
from src.port_adapter.repository.resource.exception.IntegrityErrorRepositoryException import \
    IntegrityErrorRepositoryException
from src.resource.logging.decorator import debugLogger
from src.resource.logging.logger import logger


class StandardMaintenanceProcedureOperationLabelRepositoryImpl(StandardMaintenanceProcedureOperationLabelRepository):
    @debugLogger
    def save(self, obj: StandardMaintenanceProcedureOperationLabel, tokenData: TokenData = None):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = dbSession.query(DbStandardMaintenanceProcedureOperationLabel).filter_by(id=obj.id()).first()
        if dbObject is not None:
            self.updateStandardMaintenanceProcedureOperationLabel(obj=obj, dbObject=dbObject, tokenData=tokenData)
        else:
            self.createStandardMaintenanceProcedureOperationLabel(obj=obj, tokenData=tokenData)

    @debugLogger
    def bulkSave(self, objList: List[StandardMaintenanceProcedureOperationLabel], tokenData: TokenData = None):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        for obj in objList:
            dbObject = dbSession.query(DbStandardMaintenanceProcedureOperationLabel).filter_by(id=obj.id()).first()
            if dbObject is not None:
                dbObject = self._updateDbObjectByObj(dbObject=dbObject, obj=obj)
            else:
                dbObject = self._createDbObjectByObj(obj=obj)
            dbSession.add(dbObject)

    @debugLogger
    def bulkDelete(
        self, objList: List[StandardMaintenanceProcedureOperationLabel], tokenData: TokenData = None
    ) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        for obj in objList:
            dbObject = dbSession.query(DbStandardMaintenanceProcedureOperationLabel).filter_by(id=obj.id()).first()
            if dbObject is not None:
                dbSession.delete(dbObject)

    @debugLogger
    def createStandardMaintenanceProcedureOperationLabel(self, obj: StandardMaintenanceProcedureOperationLabel, tokenData: TokenData = None):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = self._createDbObjectByObj(obj=obj)
        dbSession.add(dbObject)

    @debugLogger
    def deleteStandardMaintenanceProcedureOperationLabel(self, obj: StandardMaintenanceProcedureOperationLabel, tokenData: TokenData = None) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = dbSession.query(DbStandardMaintenanceProcedureOperationLabel).filter_by(id=obj.id()).first()
        if dbObject is not None:
            dbSession.delete(dbObject)

    @debugLogger
    def updateStandardMaintenanceProcedureOperationLabel(self, obj: StandardMaintenanceProcedureOperationLabel, dbObject: DbStandardMaintenanceProcedureOperationLabel = None, tokenData: TokenData = None) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        if dbObject is None:
            raise StandardMaintenanceProcedureOperationLabelDoesNotExistException(f'id = {obj.id()}')
        dbSession.add(self._updateDbObjectByObj(dbObject=dbObject, obj=obj))

    @debugLogger
    def standardMaintenanceProcedureOperationLabelById(self, id: str) -> StandardMaintenanceProcedureOperationLabel:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = dbSession.query(DbStandardMaintenanceProcedureOperationLabel).filter_by(id=id).first()
        if dbObject is None:
            raise StandardMaintenanceProcedureOperationLabelDoesNotExistException(f'id = {id}')
        return StandardMaintenanceProcedureOperationLabel.createFrom(id=dbObject.id,
			label=dbObject.label,
			generateAlert=dbObject.generateAlert,
			standardMaintenanceProcedureOperationId=dbObject.standardMaintenanceProcedureOperationId)

    @debugLogger
    def standardMaintenanceProcedureOperationLabels(self, resultFrom: int = 0, resultSize: int = 100, order: List[dict] = None, tokenData: TokenData = None) -> dict:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        sortData = ''
        if order is not None:
            for item in order:
                sortData = f'{sortData}, {item["orderBy"]} {item["direction"]}'
            sortData = sortData[2:]
        items = dbSession.query(DbStandardMaintenanceProcedureOperationLabel).order_by(text(sortData)).limit(resultSize).offset(resultFrom).all()
        itemsCount = dbSession.query(DbStandardMaintenanceProcedureOperationLabel).count()
        if items is None:
            return {"items": [], "totalItemCount": 0}
        return {"items": [StandardMaintenanceProcedureOperationLabel.createFrom(id=x.id,
			label=x.label,
			generateAlert=x.generateAlert,
			standardMaintenanceProcedureOperationId=x.standardMaintenanceProcedureOperationId) for x in items],
                "totalItemCount": itemsCount}

    @debugLogger
    def standardMaintenanceProcedureOperationLabelsByStandardMaintenanceProcedureOperationId(
        self,
        standardMaintenanceProcedureOperationId: str = None,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        tokenData: TokenData = None,
    ) -> dict:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        sortData = ""
        # order.append({"orderBy":"index", "direction": "asc"})
        if order is not None:
            for item in order:
                sortData = f'{sortData}, {item["orderBy"]} {item["direction"]}'
            sortData = sortData[2:]
        items = (
            dbSession.query(DbStandardMaintenanceProcedureOperationLabel)
            .filter_by(
                standardMaintenanceProcedureOperationId=standardMaintenanceProcedureOperationId
            )
            .order_by(text(sortData))
            .limit(resultSize)
            .offset(resultFrom)
            .all()
        )
        itemsCount = (
            dbSession.query(DbStandardMaintenanceProcedureOperationLabel)
            .filter_by(
                standardMaintenanceProcedureOperationId=standardMaintenanceProcedureOperationId
            )
            .count()
        )
        if items is None:
            return {"items": [], "totalItemCount": 0}
        return {
            "items": [
                StandardMaintenanceProcedureOperationLabel.createFrom(
                    id=x.id,
                    label=x.label,
                    generateAlert=x.generateAlert,
                    standardMaintenanceProcedureOperationId=x.standardMaintenanceProcedureOperationId,
                )
                for x in items
            ],
            "totalItemCount": itemsCount,
        }

    def _updateDbObjectByObj(self, dbObject: DbStandardMaintenanceProcedureOperationLabel, obj: StandardMaintenanceProcedureOperationLabel):
        dbObject.label = obj.label() if obj.label() is not None else dbObject.label
        dbObject.generateAlert = obj.generateAlert() if obj.generateAlert() is not None else dbObject.generateAlert
        dbObject.standardMaintenanceProcedureOperationId = obj.standardMaintenanceProcedureOperationId() if obj.standardMaintenanceProcedureOperationId() is not None else dbObject.standardMaintenanceProcedureOperationId
        return dbObject

    def _createDbObjectByObj(self, obj: StandardMaintenanceProcedureOperationLabel):
        return DbStandardMaintenanceProcedureOperationLabel(id=obj.id(),
			label=obj.label(),
			generateAlert=obj.generateAlert(),
			standardMaintenanceProcedureOperationId=obj.standardMaintenanceProcedureOperationId())

