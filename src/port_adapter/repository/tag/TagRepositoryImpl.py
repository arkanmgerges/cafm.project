"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

import os
from src.domain_model.role.Role import Role
from typing import List

from sqlalchemy import create_engine
from sqlalchemy.exc import IntegrityError
from sqlalchemy.sql.expression import text

from src.domain_model.tag.Tag import Tag
from src.domain_model.tag.TagRepository import TagRepository
from src.domain_model.resource.exception.TagDoesNotExistException import TagDoesNotExistException
from src.domain_model.token.TokenData import TokenData
from src.application.lifecycle.ApplicationServiceLifeCycle import ApplicationServiceLifeCycle
from src.port_adapter.repository.db_model.Tag import Tag as DbTag
from src.port_adapter.repository.db_model.Role import Role as DbRole
from src.port_adapter.repository.resource.exception.IntegrityErrorRepositoryException import \
    IntegrityErrorRepositoryException
from src.resource.logging.decorator import debugLogger
from src.resource.logging.logger import logger


class TagRepositoryImpl(TagRepository):
    @debugLogger
    def save(self, obj: Tag, tokenData: TokenData = None):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = dbSession.query(DbTag).filter_by(id=obj.id()).first()
        if dbObject is not None:
            self.updateTag(obj=obj, dbObject=dbObject, tokenData=tokenData)
        else:
            self.createTag(obj=obj, tokenData=tokenData)

    @debugLogger
    def bulkSave(self, objList: List[Tag], tokenData: TokenData = None):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        for obj in objList:
            dbObject = dbSession.query(DbTag).filter_by(id=obj.id()).first()
            if dbObject is not None:
                dbObject = self._updateDbObjectByObj(dbObject=dbObject, obj=obj)
            else:
                dbObject = self._createDbObjectByObj(obj=obj)
            dbSession.add(dbObject)

    @debugLogger
    def bulkDelete(
        self, objList: List[Tag], tokenData: TokenData = None
    ) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        for obj in objList:
            dbObject = dbSession.query(DbTag).filter_by(id=obj.id()).first()
            if dbObject is not None:
                dbSession.delete(dbObject)

    @debugLogger
    def createTag(self, obj: Tag, tokenData: TokenData = None):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = dbSession.query(DbTag).filter_by(name=obj.name()).first()
        if dbObject is None:
            dbObject = self._createDbObjectByObj(obj=obj)
            dbSession.add(dbObject)

    @debugLogger
    def deleteTag(self, obj: Tag, tokenData: TokenData = None) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = dbSession.query(DbTag).filter_by(id=obj.id()).first()
        if dbObject is not None:
            dbSession.delete(dbObject)

    @debugLogger
    def updateTag(self, obj: Tag, dbObject: DbTag = None, tokenData: TokenData = None) -> None:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        if dbObject is None:
            raise TagDoesNotExistException(f'id = {obj.id()}')
        dbSession.add(self._updateDbObjectByObj(dbObject=dbObject, obj=obj))

    @debugLogger
    def tagById(self, id: str) -> Tag:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = dbSession.query(DbTag).filter_by(id=id).first()
        if dbObject is None:
            raise TagDoesNotExistException(f'id = {id}')
        return Tag.createFrom(id=dbObject.id,
			name=dbObject.name)

    @debugLogger
    def tagByName(self, name: str) -> Tag:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbObject = dbSession.query(DbTag).filter_by(name=name).first()
        if dbObject is None:
            raise TagDoesNotExistException(f'name = {name}')
        return Tag.createFrom(id=dbObject.id,
			name=dbObject.name)


    def assignTagToRole(self, role: Role, tag: Tag, tokenData: TokenData):
        dbSession = ApplicationServiceLifeCycle.dbContext()
        dbRoleObject = dbSession.query(DbRole).filter_by(id=role.id()).first()
        if dbRoleObject is not None:
            dbTagObject = (
                dbSession.query(DbTag).filter_by(id=tag.id()).first()
            )
            if dbTagObject is not None:
                dbRoleObject.tags.append(dbTagObject)

    @debugLogger
    def tags(self, resultFrom: int = 0, resultSize: int = 100, order: List[dict] = None, tokenData: TokenData = None) -> dict:
        dbSession = ApplicationServiceLifeCycle.dbContext()
        sortData = ''
        if order is not None:
            for item in order:
                sortData = f'{sortData}, {item["orderBy"]} {item["direction"]}'
            sortData = sortData[2:]
        items = dbSession.query(DbTag).order_by(text(sortData)).limit(resultSize).offset(resultFrom).all()
        itemsCount = dbSession.query(DbTag).count()
        if items is None:
            return {"items": [], "totalItemCount": 0}
        return {"items": [Tag.createFrom(id=x.id,
			name=x.name) for x in items],
                "totalItemCount": itemsCount}

    def _updateDbObjectByObj(self, dbObject: DbTag, obj: Tag):
        dbObject.name = obj.name() if obj.name() is not None else dbObject.name
        return dbObject

    def _createDbObjectByObj(self, obj: Tag):
        return DbTag(id=obj.id(),
			name=obj.name())
