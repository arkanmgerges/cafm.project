{%set className= model.name | upperCamelCase%}
{%-set lowerCamelModelName= model.name | lowerCamelCase-%}
{%-set funcParams= model.field | mapFuncParams-%}
{%-set funcArgs= model.field | mapFuncArgs-%}
{%-set funcArgsLowerCase= model.field | mapFuncArgsLowerCase-%}
{%-set funcArgsByObj= model.field | mapFuncArgs('obj', 'function')-%}
{%-set funcArgsByObjLowerCase= model.field | mapFuncArgsLowerCase('obj', 'function')-%}
{%-set funcArgsByDbObj= model.field | mapFuncArgs('dbObject')-%}
{%-set funcArgsByDbObjLowerCase= model.field | mapFuncArgsLowerCase('dbObject')-%}
{%-set funcArgsByItem= model.field | mapFuncArgs('x')-%}
{%-set funcArgsByItemLowerCase= model.field | mapFuncArgsLowerCase('x')-%}
{%-set classNameWords= model.name | spacedWords%}
{%-set filePath= model.path | replace('/', '.')%}
{%- if 'is_lookup' in model and model.is_lookup is true %}
    @singleton
    @provider
    def provideLookup__{{ className }}__{{ className }}ApplicationService(self) -> Lookup__{{ className }}__{{ className }}ApplicationService:
        return Lookup__{{ className }}__{{ className }}ApplicationService(repo=self.__injector__.get(Lookup__{{ className }}__{{ className }}Repository))
{%- else %} 
    @singleton
    @provider
    def provide{{ className }}ApplicationService(self) -> {{ className }}ApplicationService:
        return {{ className }}ApplicationService(repo=self.__injector__.get({{ className }}Repository), {{ model.name | lowerCamelCase }}Service=self.__injector__.get({{ className }}Service), {%- for field in model.field -%}
        {%- if 'foreign' in field and 'model' in field.foreign and 'name' in field.foreign.model -%}
            {%-set foreignModel = field.foreign.model-%}
            {{ foreignModel.name | lowerCamelCase }}Repo=self.__injector__.get({{ foreignModel.name | upperCamelCase }}Repository),
        {%- endif -%}
    {%- endfor -%})   
{%- endif %}