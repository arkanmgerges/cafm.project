"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

{%set className= model.name | upperCamelCase%}
{%set domainModelClassName= model.domain_model.name | upperCamelCase%}
{%-set lowerCamelModelName= model.name | lowerCamelCase-%}
{%-set funcParams= model.field | mapFuncParams-%}
{%-set funcParamsWithDefaultNone= model.field | mapFuncParams(True)-%}
{%-set funcArgs= model.field | mapFuncArgs-%}
{%-set funcArgsByDict= model.field | mapFuncArgs('objListParamsItem', 'dictionary', '=', True)-%}
{%-set funcArgsLowerCase= model.field | mapFuncArgsLowerCase-%}
{%-set funcArgsLowerCaseWithSourceObject= model.field | mapFuncArgsLowerCase(None, None, '=', '_sourceObject')-%}
{%-set classNameWords= model.name | spacedWords%}
{%-set domainModelClassNameWords= model.domain_model.name | spacedWords%}
{%-set filePath= model.path | replace('/', '.')%}
{%-set domainModelFilePath= model.domain_model.path | replace('/', '.')%}
from src.application.lookup.model_data.BaseLookupModel import BaseLookupModel
from src.application.lookup.model_data.LookupModelAttributeData import LookupModelAttributeData
from src.domain_model.common.HasToMap import HasToMap
{%- for field in model.field %}
{%- if field.type == "foreign" %}
from src.application.lookup.{{ field.link.path | replace('/', '.') }}.{{ field.link.name | upperCamelCase }}
{%- endif %}
{%- endfor %}

class {{ className }}(HasToMap, BaseLookupModel):
    __slots__ = [
        {%- for field in model.field %}
        "{{ field.name | lowerCamelCase }}",
        {%- endfor %}
    ]

    def __init__(self, **kwargs):
        for k, v in kwargs.items():
            setattr(self, k, v)

    def toMap(self) -> dict:
        return super()._toMap({{ className }}.attributes())

    def _attributeValue(self, classAttribute):
        return super()._attributeValue(classAttribute)

    @classmethod
    def attributes(cls):
        return {
        {%- for field in model.field %}
        "{{ field.name | lowerCamelCase }}": LookupModelAttributeData(),
        {%- endfor %}
        }

    def __repr__(self):
        return f"<{self.__module__} object at {hex(id(self))}> {self.toMap()}"

    def __str__(self) -> str:
        return f"<{self.__module__} object at {hex(id(self))}> {self.toMap()}"
