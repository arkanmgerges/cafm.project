"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List
{%set className= model.name | upperCamelCase%}
{%-set lowerCamelModelName= model.name | lowerCamelCase-%}
{%-set funcParams= model.field | mapFuncParams-%}
{%-set funcArgs= model.field | mapFuncArgs-%}
{%-set funcArgsLowerCase= model.field | mapFuncArgsLowerCase-%}
{%-set classNameWords= model.name | spacedWords%}
{%-set filePath= model.path | replace('/', '.')%}
from src.domain_model.{{ filePath }}.{{ className }} import {{ className }}
from src.domain_model.{{ filePath }}.{{ className }}Repository import {{ className }}Repository
from src.domain_model.{{ filePath }}.{{ className }}Service import {{ className }}Service
from src.domain_model.resource.exception.Update{{ className }}FailedException import Update{{ className }}FailedException
from src.domain_model.token.TokenService import TokenService
from src.resource.logging.decorator import debugLogger


class {{ className }}ApplicationService:
    def __init__(self, repo: {{ className }}Repository, {{ lowerCamelModelName }}Service: {{ className }}Service):
        self._repo = repo
        self._{{ lowerCamelModelName }}Service = {{ lowerCamelModelName }}Service

    @debugLogger
    def create{{ className }}(self, id: str = None, {{ funcParams }}, objectOnly: bool = False, token: str = ''):
        obj: {{ className }} = self.constructObject(id=id, {{ funcArgsLowerCase }})
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._{{ lowerCamelModelName }}Service.create{{ className }}(obj=obj, objectOnly=objectOnly, tokenData=tokenData)

    @debugLogger
    def update{{ className }}(self, id: str, {{ funcParams }}, token: str = None):
        obj: {{ className }} = self.constructObject(id=id, {{ funcArgsLowerCase }})
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: {{ className }} = self._repo.{{ lowerCamelModelName }}ById(id=id)
            self._{{ lowerCamelModelName }}Service.update{{ className }}(oldObject=oldObject, newObject=obj, tokenData=tokenData)
        except Exception as e:
            raise Update{{ className }}FailedException(message=str(e))

    @debugLogger
    def delete{{ className }}(self, id: str, token: str = None):
        tokenData = TokenService.tokenDataFromToken(token=token)
        obj = self._repo.{{ lowerCamelModelName }}ById(id=id)
        self._{{ lowerCamelModelName }}Service.delete{{ className }}(obj=obj, tokenData=tokenData)

    @debugLogger
    def {{ lowerCamelModelName }}ById(self, id: str, token: str = None) -> {{ className }}:
        {{ lowerCamelModelName }} = self._repo.{{ lowerCamelModelName }}ById(id=id)
        TokenService.tokenDataFromToken(token=token)
        return {{ lowerCamelModelName }}

    @debugLogger
    def {{ lowerCamelModelName }}s(self, resultFrom: int = 0, resultSize: int = 100, order: List[dict] = None,
                        token: str = None) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._{{ lowerCamelModelName }}Service.{{ lowerCamelModelName }}s(tokenData=tokenData, resultFrom=resultFrom, resultSize=resultSize, order=order)

    @debugLogger
    def constructObject(self, id: str, {{ funcParams }}) -> {{ className }}:
        return {{ className }}.createFrom(id=id, {{ funcArgsLowerCase }})
