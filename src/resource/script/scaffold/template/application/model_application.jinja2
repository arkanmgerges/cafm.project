"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List
{%set className= model.name | upperCamelCase%}
{%-set lowerCamelModelName= model.name | lowerCamelCase-%}
{%-set funcParams= model.field | mapFuncParams-%}
{%-set funcParamsWithDefaultNone= model.field | mapFuncParams(True)-%}
{%-set funcArgs= model.field | mapFuncArgs-%}
{%-set funcArgsByDict= model.field | mapFuncArgs('objListParamsItem', 'dictionary', '=', True)-%}
{%-set funcArgsLowerCase= model.field | mapFuncArgsLowerCase-%}
{%-set funcArgsLowerCaseWithSourceObject= model.field | mapFuncArgsLowerCase(None, None, '=', '_sourceObject')-%}
{%-set classNameWords= model.name | spacedWords%}
{%-set filePath= model.path | replace('/', '.')%}
from src.domain_model.{{ filePath }}.{{ className }} import {{ className }}
from src.domain_model.{{ filePath }}.{{ className }}Repository import {{ className }}Repository
from src.domain_model.{{ filePath }}.{{ className }}Service import {{ className }}Service
from src.domain_model.resource.exception.Update{{ className }}FailedException import Update{{ className }}FailedException
from src.domain_model.token.TokenService import TokenService
from src.domain_model.util.DomainModelAttributeValidator import DomainModelAttributeValidator
from src.application.BaseApplicationService import BaseApplicationService
from src.resource.logging.decorator import debugLogger
{%- for field in model.field %}    
    {%- if 'foreign' in field and 'model' in field.foreign and 'name' in field.foreign.model %}
        {%-set foreignModel = field.foreign.model%}
from src.domain_model.{{ foreignModel.path | replace('/', '.') }}.{{ foreignModel.name | upperCamelCase }}Repository import {{ foreignModel.name | upperCamelCase }}Repository
    {%- endif %}
{%- endfor %}

class {{ className }}ApplicationService(BaseApplicationService):
    def __init__(self, repo: {{ className }}Repository, {{ lowerCamelModelName }}Service: {{ className }}Service,
    {%- for field in model.field %}
        {%- if 'foreign' in field and 'model' in field.foreign and 'name' in field.foreign.model %}
            {%-set foreignModel = field.foreign.model%}
            {{ foreignModel.name | lowerCamelCase }}Repo: {{ foreignModel.name | upperCamelCase }}Repository,
        {%- endif %}
    {%- endfor -%}
    ):
        self._repo = repo
        self._{{ lowerCamelModelName }}Service = {{ lowerCamelModelName }}Service
        {%- for field in model.field %}
            {%- if 'foreign' in field and 'model' in field.foreign and 'name' in field.foreign.model %}
                {%-set foreignModel = field.foreign.model%}
        self._{{ foreignModel.name | lowerCamelCase }}Repo = {{ foreignModel.name | lowerCamelCase }}Repo
            {%- endif %}
        {%- endfor %}

    @debugLogger
    def newId(self):
        return {{ className }}.createFrom(skipValidation=True).id()

    @debugLogger
    def create{{ className }}(self, id: str = None, {{ funcParams }}, objectOnly: bool = False, token: str = ''):
        obj: {{ className }} = self._constructObject(id=id, {{ funcArgsLowerCase }})
        tokenData = TokenService.tokenDataFromToken(token=token)
        {%- for field in model.field %}
            {%- if 'foreign' in field and 'model' in field.foreign and 'name' in field.foreign.model %}
                {%-set foreignModel = field.foreign.model%}
        self._{{ foreignModel.name | lowerCamelCase }}Repo.{{ foreignModel.name | lowerCamelCase }}ById(id={{ foreignModel.name | lowerCamelCase }}Id)
            {%- endif %}
        {%- endfor %}
        return self._{{ lowerCamelModelName }}Service.create{{ className }}(obj=obj, objectOnly=objectOnly, tokenData=tokenData)

    @debugLogger
    def update{{ className }}(self, id: str, {{ funcParamsWithDefaultNone }}, token: str = None):
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: {{ className }} = self._repo.{{ lowerCamelModelName }}ById(id=id)
            obj: {{ className }} = self._constructObject(id=id, {{ funcArgsLowerCase }}, _sourceObject=oldObject)
            self._{{ lowerCamelModelName }}Service.update{{ className }}(oldObject=oldObject, newObject=obj, tokenData=tokenData)
        except Exception as e:
            raise Update{{ className }}FailedException(message=str(e))

    @debugLogger
    def delete{{ className }}(self, id: str, token: str = None):
        tokenData = TokenService.tokenDataFromToken(token=token)
        obj = self._repo.{{ lowerCamelModelName }}ById(id=id)
        self._{{ lowerCamelModelName }}Service.delete{{ className }}(obj=obj, tokenData=tokenData)

    @debugLogger
    def bulkCreate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(domainModelObject=self._constructObject(skipValidation=True),
                                                       attributeDictionary=objListParamsItem)
                objList.append(self._constructObject(id=objListParamsItem["{{ lowerCamelModelName }}_id"], {{ funcArgsByDict }}))
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        _tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._{{ lowerCamelModelName }}Service.bulkCreate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkDelete(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(domainModelObject=self._constructObject(skipValidation=True),
                                                       attributeDictionary=objListParamsItem)
                objList.append(self._constructObject(id=objListParamsItem["{{ lowerCamelModelName }}_id"], skipValidation=True))
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        _tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._{{ lowerCamelModelName }}Service.bulkDelete(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def bulkUpdate(self, objListParams: List[dict], token: str = ""):
        objList = []
        exceptions = []
        for objListParamsItem in objListParams:
            try:
                DomainModelAttributeValidator.validate(domainModelObject=self._constructObject(skipValidation=True),
                                                       attributeDictionary=objListParamsItem)
                oldObject: {{ className }} = self._repo.{{ lowerCamelModelName }}ById(id=objListParamsItem["{{ lowerCamelModelName }}_id"])
                newObject = self._constructObject(id=objListParamsItem["{{ lowerCamelModelName }}_id"], {{ funcArgsByDict }}, _sourceObject=oldObject)
                objList.append((newObject, oldObject),)
            except DomainModelException as e:
                exceptions.append({"reason": {"message": e.message, "code": e.code}})
        _tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            self._{{ lowerCamelModelName }}Service.bulkUpdate(objList=objList)
            if len(exceptions) > 0:
                raise ProcessBulkDomainException(messages=exceptions)
        except DomainModelException as e:
            exceptions.append({"reason": {"message": e.message, "code": e.code}})
            raise ProcessBulkDomainException(messages=exceptions)

    @debugLogger
    def {{ lowerCamelModelName }}ById(self, id: str, token: str = None) -> {{ className }}:
        {{ lowerCamelModelName }} = self._repo.{{ lowerCamelModelName }}ById(id=id)
        _tokenData = TokenService.tokenDataFromToken(token=token)
        return {{ lowerCamelModelName }}

    @debugLogger
    def {{ lowerCamelModelName | pluralize }}(self, resultFrom: int = 0, resultSize: int = 100, order: List[dict] = None,
                        token: str = None) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return self._{{ lowerCamelModelName }}Service.{{ lowerCamelModelName | pluralize }}(tokenData=tokenData, resultFrom=resultFrom, resultSize=resultSize, order=order)

    {%-block segmentForeignModel%}{%-endblock%}

    @debugLogger
    def _constructObject(self, *args, **kwargs) -> {{ className }}:
        kwargs["_appServiceClass"] = {{ className }}
        return super()._constructObject(args, kwargs)