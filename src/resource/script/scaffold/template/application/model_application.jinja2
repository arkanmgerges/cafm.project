"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

from typing import List
{%set className= model.name | upperCamelCase%}
{%-set lowerCamelModelName= model.name | lowerCamelCase-%}
{%-set funcParams= model.field | mapFuncParams-%}
{%-set funcParamsWithDefaultNone= model.field | mapFuncParams(True)-%}
{%-set funcArgs= model.field | mapFuncArgs-%}
{%-set funcArgsByDict= model.field | mapFuncArgs('objListParamsItem', 'dictionary', '=', True)-%}
{%-set funcArgsLowerCase= model.field | mapFuncArgsLowerCase-%}
{%-set funcArgsLowerCaseWithSourceObject= model.field | mapFuncArgsLowerCase(None, None, '=', '_sourceObject')-%}
{%-set classNameWords= model.name | spacedWords%}
{%-set filePath= model.path | replace('/', '.')%}
from src.domain_model.{{ filePath }}.{{ className }} import {{ className }}
from src.domain_model.{{ filePath }}.{{ className }}Repository import {{ className }}Repository
from src.domain_model.{{ filePath }}.{{ className }}Service import {{ className }}Service
from src.domain_model.resource.exception.Update{{ className }}FailedException import Update{{ className }}FailedException
from src.domain_model.token.TokenService import TokenService
from src.application.BaseApplicationService import BaseApplicationService
from src.application.model.BaseApplicationServiceBulkData import BaseApplicationServiceBulkData
from src.application.model.BaseApplicationServiceModelData import BaseApplicationServiceModelData
from src.resource.logging.decorator import debugLogger
{%- for field in model.field %}    
    {%- if 'foreign' in field and 'model' in field.foreign and 'name' in field.foreign.model %}
        {%-set foreignModel = field.foreign.model%}
from src.domain_model.{{ foreignModel.path | replace('/', '.') }}.{{ foreignModel.name | upperCamelCase }}Repository import {{ foreignModel.name | upperCamelCase }}Repository
    {%- endif %}
{%- endfor %}

class {{ className }}ApplicationService(BaseApplicationService):
    def __init__(self, repo: {{ className }}Repository, {{ lowerCamelModelName }}Service: {{ className }}Service,
    {%- for field in model.field %}
        {%- if 'foreign' in field and 'model' in field.foreign and 'name' in field.foreign.model %}
            {%-set foreignModel = field.foreign.model%}
            {{ foreignModel.name | lowerCamelCase }}Repo: {{ foreignModel.name | upperCamelCase }}Repository,
        {%- endif %}
    {%- endfor -%}
    ):
        self._repo = repo
        self._{{ lowerCamelModelName }}Service = {{ lowerCamelModelName }}Service
        {%- for field in model.field %}
            {%- if 'foreign' in field and 'model' in field.foreign and 'name' in field.foreign.model %}
                {%-set foreignModel = field.foreign.model%}
        self._{{ foreignModel.name | lowerCamelCase }}Repo = {{ foreignModel.name | lowerCamelCase }}Repo
            {%- endif %}
        {%- endfor %}

    @debugLogger
    def newId(self, **_kwargs):
        return {{ className }}.createFrom(skipValidation=True).id()

    @debugLogger
    def create{{ className }}(self, token: str = None, objectOnly: bool = False, **kwargs):
        obj: {{ className }} = self._constructObject(**kwargs)
        tokenData = TokenService.tokenDataFromToken(token=token)
        {%- for field in model.field %}
            {%- if 'foreign' in field and 'model' in field.foreign and 'name' in field.foreign.model %}
                {%-set foreignModel = field.foreign.model%}
        self._{{ foreignModel.name | lowerCamelCase }}Repo.{{ foreignModel.name | lowerCamelCase }}ById(id={{ foreignModel.name | lowerCamelCase }}Id)
            {%- endif %}
        {%- endfor %}
        return self._{{ lowerCamelModelName }}Service.create{{ className }}(obj=obj, objectOnly=objectOnly, tokenData=tokenData)

    @debugLogger
    def update{{ className }}(
        self,
        token: str = None,
        **kwargs,
    ):
        tokenData = TokenService.tokenDataFromToken(token=token)
        try:
            oldObject: {{ className }} = self._repo.{{ lowerCamelModelName }}ById(id=kwargs["id"])
            super().callFunction(
                modelData=BaseApplicationServiceModelData(
                    function=self._{{ lowerCamelModelName }}Service.update{{ className }},
                    kwargs={
                        "oldObject": oldObject,
                        "newObject": self._constructObject(_sourceObject=oldObject, **kwargs),
                        "tokenData": tokenData,
                    },
                )
            )

        except Exception as e:
            raise Update{{ className }}FailedException(message=str(e))

    @debugLogger
    def delete{{ className }}(self, id: str, token: str = None, **_kwargs):
        super().callFunction(
            modelData=BaseApplicationServiceModelData(
                function=self._{{ lowerCamelModelName }}Service.delete{{ className }},
                kwargs={
                    "obj": self._repo.{{ lowerCamelModelName }}ById(id=id),
                    "tokenData": TokenService.tokenDataFromToken(token=token),
                },
            )
        )

    @debugLogger
    def bulkCreate(self, objListParams: List[dict], token: str = "", **_kwargs):
        super()._bulkCreate(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="{{ lowerCamelModelName }}_id",
                domainService=self._{{ lowerCamelModelName }}Service,
            )
        )

    @debugLogger
    def bulkDelete(self, objListParams: List[dict], token: str = "", **_kwargs):
        super()._bulkDelete(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="{{ lowerCamelModelName }}_id",
                domainService=self._{{ lowerCamelModelName }}Service,
            )
        )

    @debugLogger
    def bulkUpdate(self, objListParams: List[dict], token: str = "", **_kwargs):
        super()._bulkUpdate(
            baseBulkData=BaseApplicationServiceBulkData(
                objListParams=objListParams,
                token=token,
                sourceId="{{ lowerCamelModelName }}_id",
                domainService=self._{{ lowerCamelModelName }}Service,
                repositoryCallbackFunction=self._repo.{{ lowerCamelModelName }}ById,
            )
        )

    @debugLogger
    def {{ lowerCamelModelName }}ById(self, id: str, token: str = None, **_kwargs) -> {{ className }}:
        TokenService.tokenDataFromToken(token=token)
        return super().callGetterFunction(
            modelData=BaseApplicationServiceModelData(getterFunction=self._repo.{{ lowerCamelModelName }}ById, kwargs={"id": id})
        )

    @debugLogger
    def {{ lowerCamelModelName | pluralize }}(
        self,
        resultFrom: int = 0,
        resultSize: int = 100,
        order: List[dict] = None,
        token: str = None,
        **_kwargs,
    ) -> dict:
        tokenData = TokenService.tokenDataFromToken(token=token)
        return super().callGetterFunction(
            modelData=BaseApplicationServiceModelData(
                getterFunction=self._{{ lowerCamelModelName }}Service.{{ lowerCamelModelName | pluralize }},
                kwargs={"resultFrom": resultFrom, "resultSize": resultSize, "order": order, "tokenData": tokenData},
            )
        )


    {%-block segmentForeignModel%}{%-endblock%}

    @debugLogger
    def _constructObject(self, *args, **kwargs) -> {{ className }}:
        kwargs[BaseApplicationService.DOMAIN_MODEL_CLASS] = {{ className }}
        return super()._constructObject(*args, **kwargs)