"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
from src.domain_model.event.DomainPublishedEvents import DomainPublishedEvents
from src.resource.logging.logger import logger

from uuid import uuid4
{%set className= model.name | upperCamelCase%}
{%-set funcParams= model.fields | mapFuncParams-%}
{%-set funcArgs= model.fields | mapFuncArgs-%}
{%-set funcArgsByObj= model.fields | mapFuncArgs('obj', 'function')-%}
{%-set classNameWords= model.name | spacedWords%}
class {{ className }}:
    def __init__(self, id: str = None, {{ funcParams }}, skipValidation: bool = False):
        self._id = str(uuid4()) if id is None else id
        {%- for field in model.fields %}
        self._{{ field.name }} = {{ field.name }}
        {%- endfor %}

        if not skipValidation:
        {%- for field in model.fields %}
            if {{ field.name }} is None or {{ field.name }} == '':
                from src.domain_model.resource.exception.InvalidArgumentException import InvalidArgumentException
                raise InvalidArgumentException(
                    f'Invalid {{ classNameWords }} {{ field.name }}: {{ '{' }}{{ field.name }}{{ '}' }}, for {{ classNameWords }} id: {id}')
        {%- endfor %}

    @classmethod
    def createFrom(cls, id: str = None, {{ funcParams }}, publishEvent: bool = False, skipValidation: bool = False):
        from src.domain_model.{{ model.path | replace('/', '.') }}.{{  className }}Created import {{  className }}Created
        obj = {{ className }}(id=id, {{ funcArgs }}, skipValidation=skipValidation)

        if publishEvent:
            logger.debug(
                f'[{{ '{' }}{{  className }}.createFrom.__qualname__}] - Create {{ classNameWords }} with id: {id}')
            DomainPublishedEvents.addEventForPublishing({{  className }}Created(obj))
        return obj

    @classmethod
    def createFromObject(cls, obj: '{{ className }}', publishEvent: bool = False, generateNewId: bool = False,
                         skipValidation: bool = False):
        logger.debug(f'[{{ '{' }}{{ className }}.createFromObject.__qualname__}]')
        id = None if generateNewId else obj.id()
        return cls.createFrom(id=id, {{ funcArgsByObj }},
                              skipValidation=skipValidation,
                              publishEvent=publishEvent)


    def id(self) -> str:
        return self._id    
    {% for field in model.fields %}
    def {{ field.name }}(self) -> {{ field.type }}:
        return self._{{ field.name }}
    {% endfor %}

    def publishDelete(self):
        from src.domain_model.{{ model.path | replace('/', '.') }}.{{  className }}Deleted import {{  className }}Deleted
        DomainPublishedEvents.addEventForPublishing({{  className }}Deleted(self))

    def publishUpdate(self, old):
        from src.domain_model.{{ model.path | replace('/', '.') }}.{{  className }}Updated import {{  className }}Updated
        DomainPublishedEvents.addEventForPublishing({{  className }}Updated(old, self))


    def toMap(self) -> dict:
        return {'id': self.id(), {{ model.fields | mapFunToMapReturnData }}}

    def __repr__(self):
        return f'<{self.__module__} object at {hex(id(self))}> {self.toMap()}'

    def __str__(self) -> str:
        return f'<{self.__module__} object at {hex(id(self))}> {self.toMap()}'

    def __eq__(self, other):
        if not isinstance(other, {{  className }}):
            raise NotImplementedError(f'other: {other} can not be compared with {{  className }} class')
        return self.id() == other.id() and {{ model.fields | mapFunCompare }}