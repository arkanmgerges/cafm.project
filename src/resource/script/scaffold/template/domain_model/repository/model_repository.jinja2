"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
from abc import ABC, abstractmethod
from typing import List
{%-set className= model.name | upperCamelCase%}
{%-set classNameWords= model.name | spacedWords%}
{%-set funcName= model.name | lowerCamelCase%}
from src.domain_model.{{ model.path | replace('/', '.') }}.{{ className }} import {{ className }}
from src.domain_model.token.TokenData import TokenData


class {{ className }}Repository(ABC):
    @abstractmethod
    def save(self, obj: {{ className }}, tokenData: TokenData):
        """Save {{ classNameWords }}

        Args:
            obj ({{ className }}): The {{ classNameWords }} that needs to be saved
            tokenData (TokenData): Token data that has info about the token

        """

    @abstractmethod
    def delete{{ className }}(self, obj: {{ className }}, tokenData: TokenData) -> None:
        """Delete a {{ classNameWords }}

        Args:
            obj ({{ className }}): The {{ classNameWords }} that needs to be deleted
            tokenData (TokenData): Token data used for deleting the {{ classNameWords }}

        :raises:
            `ObjectCouldNotNotBeDeletedException
            <src.domain_model.resource.exception.ObjectCouldNotNotBeDeletedException>`
            Raise an exception if the {{ classNameWords }} could not be deleted
        """

    @abstractmethod
    def {{ funcName }}ById(self, id: str) -> {{ className }}:
        """Get {{ classNameWords }} by id

        Args:
            id (str): The id of the {{ classNameWords }}

        Returns:
            {{ className }}: {{ classNameWords }} object

        :raises:
            `{{ className }}DoesNotExistException <src.domain_model.resource.exception.{{ className }}DoesNotExistException>`
            Raise an exception if the {{ classNameWords }} does not exist
        """

    @abstractmethod
    def {{ funcName }}s(self, tokenData: TokenData, resultFrom: int = 0, resultSize: int = 100,
                 order: List[dict] = None) -> dict:
        """Get list of {{ classNameWords }}s based on the owned roles that the user has

        Args:
            tokenData (TokenData): A token data object
            resultFrom (int): The start offset of the result item
            resultSize (int): The size of the items in the result
            order (List[dict]): A list of order e.g. [{'orderBy': 'name', 'direction': 'asc'},
                                {'orderBy': 'quantity', 'direction': 'desc'}]

        Returns:
            dict: A dict that has {"items": [], "itemCount": 0}
        """

    {%-block modelByForeignModelId%}{%-endblock%}