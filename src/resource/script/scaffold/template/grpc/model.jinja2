"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

{%set className= model.name | upperCamelCase%}
{%-set lowerCamelModelName= model.name | lowerCamelCase-%}
{%-set funcParams= model.field | mapFuncParams-%}
{%-set funcArgs= model.field | mapFuncArgs-%}
{%-set funcArgsByObj= model.field | mapFuncArgs('obj', 'function')-%}
{%-set funcArgsByDbObj= model.field | mapFuncArgs('dbObject')-%}
{%-set funcArgsByItem= model.field | mapFuncArgs('x')-%}
{%-set classNameWords= model.name | spacedWords%}
{%-set filePath= model.path | replace('/', '.')%}

import grpc

from src.application.{{ className }}ApplicationService import {{ className }}ApplicationService
from src.domain_model.{{ filePath }}.{{ className }} import {{ className }}
from src.domain_model.resource.exception.{{ className }}DoesNotExistException import {{ className }}DoesNotExistException
from src.domain_model.resource.exception.UnAuthorizedException import UnAuthorizedException
from src.port_adapter.api.grpc.listener.CommonBaseListener import CommonBaseListener
from src.resource.logging.decorator import debugLogger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry
from src.resource.proto._generated.{{ model.name }}_app_service_pb2 import (
    {{ className }}AppService_{{ lowerCamelModelName | pluralize }}Response,
    {{ className }}AppService_{{ lowerCamelModelName }}ByIdResponse,
    {{ className }}AppService_newIdResponse,
)
from src.resource.proto._generated.{{ model.name }}_app_service_pb2_grpc import (
    {{ className }}AppServiceServicer,
)
{%-block segmentImport%}{%-endblock%}

class {{ className }}AppServiceListener(
    CommonBaseListener, {{ className }}AppServiceServicer
):
    """The listener function implements the rpc call as described in the .proto file"""
    def __init__(self):
        import src.port_adapter.AppDi as AppDi
        self._appService: {{ className }}ApplicationService = AppDi.instance.get(
            {{ className }}ApplicationService
        )
        super().__init__()


    def __str__(self):
        return self.__class__.__name__

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def new_id(self, request, context):
        return super().newId(request=request, context=context, response={{ className }}AppService_newIdResponse)


    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def {{ model.name | pluralize }}(self, request, context):
        response = {{ className }}AppService_{{ lowerCamelModelName | pluralize }}Response
        try:
            import src.port_adapter.AppDi as AppDi
            {{ lowerCamelModelName }}AppService: {{ className }}ApplicationService = (
                AppDi.instance.get({{ className }}ApplicationService)
            )
            return super().models(request=request, context=context, response=response,
                                     appServiceMethod={{ lowerCamelModelName }}AppService.{{ lowerCamelModelName | pluralize }},
                                     responseAttribute='{{ model.name | pluralize }}'
                                     )

        except {{ className }}DoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("No {{ lowerCamelModelName | pluralize }} found")
            return response()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return response()

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def {{ model.name }}_by_id(self, request, context):
        response = {{ className }}AppService_{{ lowerCamelModelName }}ByIdResponse
        try:
            import src.port_adapter.AppDi as AppDi
            {{ lowerCamelModelName }}AppService: {{ className }}ApplicationService = (
                AppDi.instance.get({{ className }}ApplicationService)
            )
            return super().oneModel(request=request, context=context,
                                     response=response,
                                     appServiceMethod={{ lowerCamelModelName }}AppService.{{ lowerCamelModelName }}ById,
                                     responseAttribute='{{ model.name }}',
                                     appServiceParams={'id': request.id}
                                     )
        except {{ className }}DoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details("daily check procedure does not exist")
            return response()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details("Un Authorized")
            return response()

    def _addObjectToGrpcResponse(self, obj: {{ className }}, grpcResponseObject):
        kwargs = {
            "id": obj.id(),
            {%-for field in model.field %}
            "{{field.name}}": obj.{{field.name | lowerCamelCase}}() if obj.{{field.name | lowerCamelCase}}() is not None else {%-if field.type == 'int'%}0{%-elif field.type == 'float'%}0.0{%-elif field.type == 'bool'%}false{%-else}''{%-endif%},
            {%-endfor%}
        }
        for k, v in kwargs.items():
            setattr(grpcResponseObject, k, v)
