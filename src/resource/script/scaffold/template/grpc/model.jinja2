"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

{%set className= model.name | upperCamelCase%}
{%-set lowerCamelModelName= model.name | lowerCamelCase-%}
{%-set funcParams= model.field | mapFuncParams-%}
{%-set funcArgs= model.field | mapFuncArgs-%}
{%-set funcArgsByObj= model.field | mapFuncArgs('obj', 'function')-%}
{%-set funcArgsByDbObj= model.field | mapFuncArgs('dbObject')-%}
{%-set funcArgsByItem= model.field | mapFuncArgs('x')-%}
{%-set classNameWords= model.name | spacedWords%}
{%-set filePath= model.path | replace('/', '.')%}
import time
from typing import Any

import grpc

import src.port_adapter.AppDi as AppDi
from src.application.{{ className }}ApplicationService import {{ className }}ApplicationService
from src.domain_model.{{ filePath }}.{{ className }} import {{ className }}
from src.domain_model.resource.exception.UnAuthorizedException import UnAuthorizedException
from src.domain_model.resource.exception.{{ className }}DoesNotExistException import {{ className }}DoesNotExistException
from src.domain_model.token.TokenService import TokenService
from src.resource.logging.decorator import debugLogger
from src.resource.logging.logger import logger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry
from src.resource.proto._generated.{{ model.name }}_app_service_pb2 import {{ className }}AppService_{{ lowerCamelModelName | pluralize }}Response, \
    {{ className }}AppService_{{ lowerCamelModelName }}ByIdResponse
from src.resource.proto._generated.{{ model.name }}_app_service_pb2_grpc import {{ className }}AppServiceServicer
{%-block segmentImport%}{%-endblock%}

class {{ className }}AppServiceListener({{ className }}AppServiceServicer):
    """The listener function implements the rpc call as described in the .proto file"""

    def __init__(self):
        self.counter = 0
        self.last_print_time = time.time()
        self._tokenService = TokenService()

    def __str__(self):
        return self.__class__.__name__

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def newId(self, request, context):
        try:
            token = self._token(context)
            metadata = context.invocation_metadata()
            claims = self._tokenService.claimsFromToken(token=metadata[0].value) if 'token' in metadata[0] else None
            logger.debug(
                f'[{{'{'}}{{ className }}AppServiceListener.newId.__qualname__}] - metadata: {metadata}\n\t claims: {claims}\n\t \
                    token: {token}')
            appService: {{ className }}ApplicationService = AppDi.instance.get({{ className }}ApplicationService)
            return {{ className }}AppService_newIdResponse(id=appService.newId())
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details('Un Authorized')
            return {{ className }}AppService_newIdResponse()

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def {{ lowerCamelModelName | pluralize }}(self, request, context):
        try:
            token = self._token(context)
            metadata = context.invocation_metadata()
            resultSize = request.resultSize if request.resultSize >= 0 else 10
            claims = self._tokenService.claimsFromToken(token=metadata[0].value) if 'token' in metadata[0] else None
            logger.debug(
                f'[{{ '{' }}{{ className }}AppServiceListener.{{ lowerCamelModelName | pluralize }}.__qualname__}] - metadata: {metadata}\n\t claims: {claims}\n\t \
resultFrom: {request.resultFrom}, resultSize: {resultSize}, token: {token}')
            {{ lowerCamelModelName }}AppService: {{ className }}ApplicationService = AppDi.instance.get({{ className }}ApplicationService)

            orderData = [{"orderBy": o.orderBy, "direction": o.direction} for o in request.order]
            result: dict = {{ lowerCamelModelName }}AppService.{{ lowerCamelModelName | pluralize }}(
                resultFrom=request.resultFrom,
                resultSize=resultSize,
                token=token,
                order=orderData)
            response = {{ className }}AppService_{{ lowerCamelModelName | pluralize }}Response()
            for item in result['items']:
                response.{{ lowerCamelModelName | pluralize }}.add(id=item.id(),
                                        {%- for field in model.field %}
                                           {{ field.name | lowerCamelCase }}=item.{{ field.name | lowerCamelCase }}(),
                                        {%- endfor %}
                                           )
            response.itemCount = result['itemCount']
            logger.debug(f'[{{ '{' }}{{ className }}AppServiceListener.{{ lowerCamelModelName | pluralize }}.__qualname__}] - response: {response}')
            return {{ className }}AppService_{{ lowerCamelModelName | pluralize }}Response({{lowerCamelModelName | pluralize }}=response.{{ lowerCamelModelName | pluralize }},
                                                                itemCount=response.itemCount)
        except {{ className }}DoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details('No {{ lowerCamelModelName | pluralize }} found')
            return {{ className }}AppService_{{ lowerCamelModelName | pluralize }}Response()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details('Un Authorized')
            return {{ className }}AppService_{{ lowerCamelModelName | pluralize }}Response()

    @debugLogger
    @OpenTelemetry.grpcTraceOTel
    def {{ lowerCamelModelName }}ById(self, request, context):
        try:
            token = self._token(context)
            appService: {{ className }}ApplicationService = AppDi.instance.get({{ className }}ApplicationService)
            obj: {{ className }} = appService.{{ lowerCamelModelName }}ById(id=request.id, token=token)
            logger.debug(f'[{{ '{' }}{{ className }}AppServiceListener.{{ lowerCamelModelName }}ById.__qualname__}] - response: {obj}')
            response = {{ className }}AppService_{{ lowerCamelModelName }}ByIdResponse()
            self._addObjectToResponse(obj=obj, response=response)
            return response
        except {{ className }}DoesNotExistException:
            context.set_code(grpc.StatusCode.NOT_FOUND)
            context.set_details('{{ classNameWords }} does not exist')
            return {{ className }}AppService_{{ lowerCamelModelName }}ByIdResponse()
        except UnAuthorizedException:
            context.set_code(grpc.StatusCode.PERMISSION_DENIED)
            context.set_details('Un Authorized')
            return {{ className }}AppService_{{ lowerCamelModelName }}ByIdResponse()

    {%-block modelByForeignModelId%}{%-endblock%}

    @debugLogger
    def _addObjectToResponse(self, obj: {{ className }}, response: Any):
        response.{{ lowerCamelModelName }}.id = obj.id()
        {%- for field in model.field %}
        {%-if field.type == 'float' or field.type == 'int'%}
        response.{{ lowerCamelModelName }}.{{ field.name | lowerCamelCase }}=obj.{{ field.name | lowerCamelCase }}() if obj.{{ field.name | lowerCamelCase }}() is not None else 0
        {%-else%}
        response.{{ lowerCamelModelName }}.{{ field.name | lowerCamelCase }}=obj.{{ field.name | lowerCamelCase }}()
        {%-endif%}
        {%- endfor %}

    @debugLogger
    def _token(self, context) -> str:
        metadata = context.invocation_metadata()
        if 'token' in metadata[0]:
            return metadata[0].value
        return ''
