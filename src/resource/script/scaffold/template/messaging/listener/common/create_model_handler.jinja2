"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

{%set className= model.name | upperCamelCase%}
{%-set lowerCamelModelName= model.name | lowerCamelCase-%}
{%-set funcParams= model.fields | mapFuncParams-%}
{%-set funcArgs= model.fields | mapFuncArgs-%}
{%-set funcArgsByObjDict= model.fields | mapFuncArgs('obj', 'function', ':')-%}
{%-set funcArgsByDict= model.fields | mapFuncArgs('dataDict', 'dictionary')-%}
{%-set funcArgsByDictLowerKey= model.fields | mapFuncArgsLowerKey('dataDict', 'dictionary')-%}
{%-set funcArgsByObjDictLowerValue= model.fields | mapFuncArgsLowerValue('obj', 'function', ':')-%}
{%-set funcArgsByDbObj= model.fields | mapFuncArgs('dbObject')-%}
{%-set funcArgsByItem= model.fields | mapFuncArgs('x')-%}
{%-set classNameWords= model.name | spacedWords%}
{%-set filePath= model.path | replace('/', '.')%}
import json
import src.port_adapter.AppDi as AppDi
from src.application.{{ className }}ApplicationService import {{ className }}ApplicationService
from src.domain_model.resource.exception.UnAuthorizedException import UnAuthorizedException
from src.port_adapter.messaging.listener.CommandConstant import CommonCommandConstant
from src.port_adapter.messaging.listener.common.handler.Handler import Handler
from src.resource.common.DateTimeHelper import DateTimeHelper
from src.resource.logging.logger import logger


class Create{{ className }}Handler(Handler):

    def __init__(self):
        self._commandConstant = CommonCommandConstant.CREATE_{{ model.name | upper }}

    def canHandle(self, name: str) -> bool:
        return name == self._commandConstant.value

    def handleCommand(self, messageData: dict) -> dict:
        name = messageData['name']
        data = messageData['data']
        metadata = messageData['metadata']

        logger.debug(
            f'[{Create{{ className }}Handler.handleCommand.__qualname__}] - received args:\ntype(name): {type(name)}, name: {name}\ntype(data): {type(data)}, data: {data}\ntype(metadata): {type(metadata)}, metadata: {metadata}')
        appService: {{ className }}ApplicationService = AppDi.instance.get({{ className }}ApplicationService)
        dataDict = json.loads(data)
        metadataDict = json.loads(metadata)

        if 'token' not in metadataDict:
            raise UnAuthorizedException()

        id = dataDict['{{ model.name }}_id'] if '{{ model.name }}_id' in dataDict else None
        obj = appService.create{{ className }}(id=id, {{ funcArgsByDictLowerKey }}, token=metadataDict['token'])
        return {'name': self._commandConstant.value, 'created_on': DateTimeHelper.utcNow(),
                'data': {'id': obj.id(), {{ funcArgsByObjDictLowerValue }}},
                'metadata': metadataDict}
