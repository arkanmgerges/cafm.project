"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

{%set className= model.name | upperCamelCase%}
{%-set lowerCamelModelName= model.name | lowerCamelCase-%}
{%-set funcParams= model.field | mapFuncParams-%}
{%-set funcArgs= model.field | mapFuncArgs-%}
{%-set funcArgsByObj= model.field | mapFuncArgs('obj', 'function')-%}
{%-set funcArgsByDbObj= model.field | mapFuncArgs('dbObject')-%}
{%-set funcArgsByItem= model.field | mapFuncArgs('x')-%}
{%-set classNameWords= model.name | spacedWords%}
{%-set filePath= model.path | replace('/', '.')%}

import os

from elasticsearch_dsl import Keyword, Nested, Document

{%- for field in model.field %}
{%- if field.type == "foreign" %}
from src.port_adapter.repository.es_model.{{ field.link.path | replace('/', '.') }}.{{ field.link.domain_model.name | upperCamelCase }} import {{ field.link.domain_model.name | upperCamelCase }}
{%- endif %}
{%- endfor %}
from src.port_adapter.repository.es_model.model.EsModelAttributeData import EsModelAttributeData
from src.resource.common.Util import Util

indexPrefix = f'{os.getenv("CAFM_PROJECT_SERVICE_NAME", "cafm.project")}'

class {{ model.domain_model.name | upperCamelCase }}(Document):
{%- for field in model.field %}
{%- if field.type == "foreign" %}
    {{ field.name }} = Nested({{ field.link.domain_model.name | upperCamelCase }})
{%- else %}
    {{ field.name }} = {{ field.es.type }}()
{%- endif %}
{%- endfor %}

    class Index:
        name = f"{indexPrefix}.{{ model.domain_model.name }}_1"

    @classmethod
    def createIndex(cls):
        connection = cls._get_connection()
        connection.indices.create(index=f"{indexPrefix}.{{ model.domain_model.name }}_1")
        connection.indices.put_alias(index=f"{indexPrefix}.{{ model.domain_model.name }}_1", name=cls.alias())
        cls.init()

    @classmethod
    def alias(cls):
        return f"{indexPrefix}.{{ model.domain_model.name }}"

    @classmethod
    def attributeDataBySnakeCaseAttributeName(cls, instance: '{{ model.domain_model.name | upperCamelCase }}' = None, snakeCaseAttributeName: str = None) -> EsModelAttributeData:
        # Remove any dots for nested objects, e.g. country.id should become country
        periodIndex = snakeCaseAttributeName.rfind('.')
        if periodIndex != -1:
            snakeCaseAttributeName = snakeCaseAttributeName[:periodIndex]
        mapping = {
        {%- for field in model.field %}
        {%- if field.type == "foreign" %}
            "{{ field.name }}": EsModelAttributeData(attributeModelName='{{ field.name | lowerCamelCase }}', attributeRepoName='{{ field.name }}', attributeRepoValue=Util.deepAttribute(instance, '{{ field.name }}', None), dataType={{ field.link.domain_model.name | upperCamelCase }}, isClass=True),
        {%- else %}
            "{{ field.name }}": EsModelAttributeData(attributeModelName='{{ field.name | lowerCamelCase }}', attributeRepoName='{{ field.name }}', attributeRepoValue=getattr(instance, '{{ field.name }}', None)),
        {%- endif %}
        {%- endfor %}
        }

        return mapping[snakeCaseAttributeName] if snakeCaseAttributeName in mapping else None


