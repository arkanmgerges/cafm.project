"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

import os
from typing import List
{%set className= model.name | upperCamelCase%}
{%-set lowerCamelModelName= model.name | lowerCamelCase-%}
{%-set funcParams= model.field | mapFuncParams-%}
{%-set funcArgs= model.field | mapFuncArgs-%}
{%-set funcArgsByObj= model.field | mapFuncArgs('obj', 'function')-%}
{%-set funcArgsByObjLowerCase= model.field | mapFuncArgsLowerCase('obj', 'function')-%}
{%-set funcArgsByDbObj= model.field | mapFuncArgs('dbObject')-%}
{%-set funcArgsByDbObjLowerCase= model.field | mapFuncArgsLowerCase('dbObject')-%}
{%-set funcArgsByItem= model.field | mapFuncArgs('x')-%}
{%-set funcArgsByItemLowerCase= model.field | mapFuncArgsLowerCase('x')-%}
{%-set classNameWords= model.name | spacedWords%}
{%-set filePath= model.path | replace('/', '.')%}
from sqlalchemy import create_engine
from sqlalchemy.sql.expression import text

from src.domain_model.{{ filePath }}.{{ className }} import {{ className }}
from src.domain_model.{{ filePath }}.{{ className }}Repository import {{ className }}Repository
from src.domain_model.resource.exception.ObjectIdenticalException import ObjectIdenticalException
from src.domain_model.resource.exception.{{ className }}DoesNotExistException import {{ className }}DoesNotExistException
from src.domain_model.token.TokenData import TokenData
from src.port_adapter.repository.DbSession import DbSession
from src.port_adapter.repository.db_model.{{ className }} import {{ className }} as Db{{ className }}
from src.resource.logging.decorator import debugLogger
from src.resource.logging.logger import logger


class {{ className }}RepositoryImpl({{ className }}Repository):
    def __init__(self):
        try:
            self._db = create_engine(
                f"mysql+mysqlconnector://{os.getenv('CAFM_PROJECT_DB_USER', 'root')}:{os.getenv('CAFM_PROJECT_DB_PASSWORD', '1234')}@{os.getenv('CAFM_PROJECT_DB_HOST', '127.0.0.1')}:{os.getenv('CAFM_PROJECT_DB_PORT', '3306')}/{os.getenv('CAFM_PROJECT_DB_NAME', 'cafm-project')}")
        except Exception as e:
            logger.warn(f'[{{ '{' }}{{ className }}RepositoryImpl.__init__.__qualname__}] Could not connect to the db, message: {e}')
            raise Exception(f'Could not connect to the db, message: {e}')

    @debugLogger
    def save(self, obj: {{ className }}, tokenData: TokenData = None):
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            dbObject = dbSession.query(Db{{ className }}).filter_by(id=obj.id()).first()
            if dbObject is not None:
                self.update{{ className }}(obj=obj, dbObject=dbObject, tokenData=tokenData)
            else:
                self.create{{ className }}(obj=obj, tokenData=tokenData)
        finally:
            dbSession.close()
    
    @debugLogger
    def bulkSave(self, objList: List[{{ className }}], tokenData: TokenData = None):
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            for obj in objList:
                dbObject = dbSession.query(Db{{ className }}).filter_by(id=obj.id()).first()
                if dbObject is not None:
                    dbObject = self._updateDbObjectByObj(dbObject=dbObject, obj=obj)
                else:
                    dbObject = self._createDbObjectByObj(obj=obj)
                dbSession.add(dbObject)
            dbSession.commit()
        finally:
            dbSession.close()

    @debugLogger
    def bulkDelete(
        self, objList: List[{{ className }}], tokenData: TokenData = None
    ) -> None:
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            for obj in objList:
                dbObject = dbSession.query(Db{{ className }}).filter_by(id=obj.id()).first()
                if dbObject is not None:
                    dbSession.delete(dbObject)
            dbSession.commit()
        finally:
            dbSession.close()

    @debugLogger
    def create{{ className }}(self, obj: {{ className }}, tokenData: TokenData = None):
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            dbObject = self._createDbObjectByObj(obj=obj)
            dbSession.add(dbObject)
            dbSession.commit()
        finally:
            dbSession.close()

    @debugLogger
    def delete{{ className }}(self, obj: {{ className }}, tokenData: TokenData = None) -> None:
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            dbObject = dbSession.query(Db{{ className }}).filter_by(id=obj.id()).first()
            if dbObject is not None:
                dbSession.delete(dbObject)
                dbSession.commit()
        finally:
            dbSession.close()

    @debugLogger
    def update{{ className }}(self, obj: {{ className }}, dbObject: {{ className }} = None, tokenData: TokenData = None) -> None:
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            if dbObject is None:
                raise {{ className }}DoesNotExistException(f'id = {obj.id()}')
            dbSession.add(self._updateDbObjectByObj(dbObject=dbObject, obj=obj))
            dbSession.commit()
        finally:
            dbSession.close()

    @debugLogger
    def {{ lowerCamelModelName }}ById(self, id: str) -> {{ className }}:
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            dbObject = dbSession.query(Db{{ className }}).filter_by(id=id).first()
            if dbObject is None:
                raise {{ className }}DoesNotExistException(f'id = {id}')
            return {{ className }}.createFrom(id=dbObject.id, {{ funcArgsByDbObjLowerCase }})
        finally:
            dbSession.close()

    @debugLogger
    def {{ lowerCamelModelName | pluralize }}(self, resultFrom: int = 0, resultSize: int = 100, order: List[dict] = None, tokenData: TokenData = None) -> dict:
        dbSession = DbSession.newSession(dbEngine=self._db)
        try:
            sortData = ''
            if order is not None:
                for item in order:
                    sortData = f'{sortData}, {item["orderBy"]} {item["direction"]}'
                sortData = sortData[2:]
            items = dbSession.query(Db{{ className }}).order_by(text(sortData)).limit(resultSize).offset(resultFrom).all()
            itemsCount = dbSession.query(Db{{ className }}).count()
            if items is None:
                return {"items": [], "itemCount": 0}
            return {"items": [{{ className }}.createFrom(id=x.id, {{ funcArgsByItemLowerCase }}) for x in items],
                    "itemCount": itemsCount}
        finally:
            dbSession.close()

    {%-block modelByForeignModelId %}{%-endblock%}

    
    def _updateDbObjectByObj(self, dbObject: Db{{ className }}, obj: {{ className }}):
        {%- for field in model.field %}
        dbObject.{{ field.name | lowerCamelCase }} = obj.{{ field.name | lowerCamelCase }}() if obj.{{ field.name | lowerCamelCase }}() is not None else dbObject.{{ field.name | lowerCamelCase }}
        {%- endfor %}
        return dbObject

    def _createDbObjectByObj(self, obj: {{ className }}):
        return Db{{ className }}(id=obj.id(), {{ funcArgsByObjLowerCase }})