"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
{%set className= model.name | upperCamelCase%}
{%set domainModelClassName= model.domain_model.name | upperCamelCase%}
{%-set lowerCamelModelName= model.name | lowerCamelCase-%}
{%-set funcParams= model.field | mapFuncParams-%}
{%-set funcParamsWithDefaultNone= model.field | mapFuncParams(True)-%}
{%-set funcArgs= model.field | mapFuncArgs-%}
{%-set funcArgsByDict= model.field | mapFuncArgs('objListParamsItem', 'dictionary', '=', True)-%}
{%-set funcArgsLowerCase= model.field | mapFuncArgsLowerCase-%}
{%-set funcArgsLowerCaseWithSourceObject= model.field | mapFuncArgsLowerCase(None, None, '=', '_sourceObject')-%}
{%-set classNameWords= model.name | spacedWords%}
{%-set domainModelClassNameWords= model.domain_model.name | spacedWords%}
{%-set filePath= model.path | replace('/', '.')%}
{%-set domainModelFilePath= model.domain_model.path | replace('/', '.')%}

import os

from elasticsearch_dsl import UpdateByQuery, Q
from elasticsearch_dsl.connections import connections
from sqlalchemy import create_engine

from src.application.{{ filePath }}.{{ className }}Repository import {{ className }}Repository
from src.domain_model.{{ model.domain_model.path | replace('/', '.') }}.{{ model.domain_model.name | upperCamelCase }} import {{ model.domain_model.name | upperCamelCase }}
from src.port_adapter.repository.es_model.{{ model.path | replace('/', '.') }}.{{ model.domain_model.name | upperCamelCase }} import ({{ model.domain_model.name | upperCamelCase }} as Es{{ model.domain_model.name | upperCamelCase }},)
from src.resource.logging.decorator import debugLogger
from src.resource.logging.logger import logger


class {{ className }}RepositoryImpl({{ className }}Repository):
    def __init__(self):
        try:
            self._db = create_engine(
                f"mysql+mysqlconnector://{os.getenv('CAFM_PROJECT_DB_USER', 'root')}:{os.getenv('CAFM_PROJECT_DB_PASSWORD', '1234')}@{os.getenv('CAFM_PROJECT_DB_HOST', '127.0.0.1')}:{os.getenv('CAFM_PROJECT_DB_PORT', '3306')}/{os.getenv('CAFM_PROJECT_DB_NAME', 'cafm-project')}"
            )
            self._es = connections.create_connection(
                hosts=[
                    f'{os.getenv("CAFM_PROJECT_ELASTICSEARCH_HOST", "elasticsearch")}:{os.getenv("CAFM_PROJECT_ELASTICSEARCH_PORT", 9200)}'
                ]
            )
        except Exception as e:
            logger.warn(
                f"[{{"{"}}{{ className }}RepositoryImpl.__init__.__qualname__}] Could not connect to the db, message: {e}"
            )
            raise Exception(f"Could not connect to the db, message: {e}")

    @debugLogger
    def save(self, obj: {{ model.domain_model.name | upperCamelCase }}):
        if obj is not None:
            UpdateByQuery(index=Es{{ model.domain_model.name | upperCamelCase }}.alias()).using(self._es) \
             .filter('nested', path="{{ model.domain_model.name }}",
                     query=Q("term",
                             **{"{{ model.domain_model.name }}.id": obj.id()})) \
             .script(source="{%- for field in model.domain_model.field -%}
             {%- if field.name != "id" -%}
             ctx._source.{{ model.domain_model.name }}.{{ field.name }} = params.{{ field.name }};
             {%- endif -%}
             {%- endfor -%}
             ", params={
                 {%- for field in model.domain_model.field %}
                 {%- if field.name != "id" %}
                 "{{ field.name }}": obj.{{ field.name | lowerCamelCase }}(),
                 {%- endif %}
                 {%- endfor %}
                 }) \
            .execute()
