"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
{%set className= model.name | upperCamelCase%}
{%set domainModelClassName= model.domain_model.name | upperCamelCase%}
{%-set lowerCamelModelName= model.name | lowerCamelCase-%}
{%-set funcParams= model.field | mapFuncParams-%}
{%-set funcParamsWithDefaultNone= model.field | mapFuncParams(True)-%}
{%-set funcArgs= model.field | mapFuncArgs-%}
{%-set funcArgsByDict= model.field | mapFuncArgs('objListParamsItem', 'dictionary', '=', True)-%}
{%-set funcArgsLowerCase= model.field | mapFuncArgsLowerCase-%}
{%-set funcArgsLowerCaseWithSourceObject= model.field | mapFuncArgsLowerCase(None, None, '=', '_sourceObject')-%}
{%-set classNameWords= model.name | spacedWords%}
{%-set domainModelClassNameWords= model.domain_model.name | spacedWords%}
{%-set filePath= model.path | replace('/', '.')%}
{%-set domainModelFilePath= model.domain_model.path | replace('/', '.')%}
{%-set esIndexModelClassName= model.es_index_model.domain_model.name | upperCamelCase%}
{%-set vars=['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't']%}

{% import "repository/lookup/impl/macro.jinja2" as macros %}



import os

from elasticsearch_dsl import UpdateByQuery, Q, Search
from elasticsearch_dsl.connections import connections
from sqlalchemy import create_engine

from src.application.{{ filePath }}.{{ className }}Repository import {{ className }}Repository
from src.domain_model.{{ model.domain_model.path | replace('/', '.') }}.{{ domainModelClassName }} import {{ domainModelClassName }}
from src.port_adapter.repository.es_model.{{ model.path | replace('/', '.') }}.{{ esIndexModelClassName }} import ({{ esIndexModelClassName }} as Es{{ esIndexModelClassName }},)
from src.resource.logging.decorator import debugLogger
from src.resource.logging.logger import logger


class {{ className }}RepositoryImpl({{ className }}Repository):
    def __init__(self):
        try:
            self._db = create_engine(
                f"mysql+mysqlconnector://{os.getenv('CAFM_PROJECT_DB_USER', 'root')}:{os.getenv('CAFM_PROJECT_DB_PASSWORD', '1234')}@{os.getenv('CAFM_PROJECT_DB_HOST', '127.0.0.1')}:{os.getenv('CAFM_PROJECT_DB_PORT', '3306')}/{os.getenv('CAFM_PROJECT_DB_NAME', 'cafm-project')}"
            )
            self._es = connections.create_connection(
                hosts=[
                    f'{os.getenv("CAFM_PROJECT_ELASTICSEARCH_HOST", "elasticsearch")}:{os.getenv("CAFM_PROJECT_ELASTICSEARCH_PORT", 9200)}'
                ]
            )
        except Exception as e:
            logger.warn(
                f"[{{"{"}}{{ className }}RepositoryImpl.__init__.__qualname__}] Could not connect to the db, message: {e}"
            )
            raise Exception(f"Could not connect to the db, message: {e}")


    {% if 'repo_data' in model %}
           
    @debugLogger
    def delete(self, obj: {{ domainModelClassName }}):
        if obj is not None:
        {%- set indentationIndex = namespace(value=1) %}
        {%-for paths_item in model.repo_data.all_paths %}
        {%-set fullPath = macros.macro_fullPath(model, paths_item, true) %}
            UpdateByQuery(index=Es{{ esIndexModelClassName }}.alias()).using(self._es) \
                .filter('nested', path="{{ fullPath }}",
                        query=Q("term",
                                **{"{{ fullPath }}.{{"id" if 'on_delete_attribute' not in model.repo_data else model.repo_data.on_delete_attribute}}": obj.id()})) \
                .script(
                source="""
                    {%-if 'in_root' in model.repo_data and model.repo_data.in_root is true %}
                        ctx._source.{{ model.name }} = null;
                    {%-else %}
                    {%- for currentPath in paths_item.paths %}                        
                       {{"" | indent(loop.index0 * (indentationIndex.value * 4), true)}} if (ctx._source.{{ macros.macro_loopPaths(loop.index0, paths_item.paths) }} instanceof List) {
                        {%set currentVar = vars[loop.index0] %}
                           {{"" | indent(loop.index0 * (indentationIndex.value * 4), true)}} for (int {{ currentVar }}=ctx._source.{{ macros.macro_loopPaths(loop.index0, paths_item.paths) }}.length - 1; {{ currentVar }} >= 0; {{ currentVar }}--) {
                        {%- if loop.last %}
                              {{"" | indent(loop.index0 * (indentationIndex.value * 4), true)}}  if (ctx._source.{{ macros.macro_loopPaths(loop.index0, paths_item.paths)}}[{{ vars[loop.index0] }}].{{"id" if 'on_delete_attribute' not in model.repo_data else model.repo_data.on_delete_attribute}} == params.id) {
                                    {%-if model.repo_data.on_delete == 'set_to_none' %}
                                 {{"" | indent(loop.index0 * (indentationIndex.value * 4), true)}}   ctx._source.{{ macros.macro_loopPaths(loop.index0, paths_item.paths) }}[{{ vars[loop.index0] }}].{{model.name}} = null;
                                    {%-else%}
                                   {{"" | indent(loop.index0 * (indentationIndex.value * 4), true)}} ctx._source.{{ macros.macro_loopPaths(loop.index0, paths_item.paths) }}.remove({{vars[loop.index0] }});
                                    {%-endif%}
                              {{"" | indent(loop.index0 * (indentationIndex.value * 4), true)}}  }
                        {%- endif %}
                        {%-set indentationIndex.value = indentationIndex.value + 1%}
                    {%- endfor %}
                    {%-endif%}
                    {# Add } to close the blocks (for, if, ...etc) above #}
                    {%-set pathsLength = paths_item.paths | length%}
                    {%- set indentationIndex = namespace(value=paths_item.paths | length) %}
                    {%-if 'in_root' not in model.repo_data or 'in_root' in model.repo_data and model.repo_data.in_root is false %}
                       {%- for currentPath in paths_item.paths %}    
                       {{"" | indent((pathsLength - loop.index) * (indentationIndex.value * 8), true)}} }
                       {{"" | indent((pathsLength - loop.index) * (indentationIndex.value * 4), true)}} }
                       {%-set indentationIndex.value = indentationIndex.value - 1%}
                       {%- endfor %}
                    {%-endif%}
                            """,
                params={"id": obj.id()}).execute()
        {%- endfor %}
    {%- else %}
    @debugLogger
    def delete(self, obj: {{ domainModelClassName }}):
        if obj is not None:
            Search(index=Es{{ esIndexModelClassName }}.alias()).using(self._es).filter('nested', path="{{ model.domain_model.name }}", query=Q("term", **{"{{ model.domain_model.name }}.id": obj.id()})).delete()
    {%- endif %}

    @debugLogger
    def save(self, obj: {{ domainModelClassName }}):
        if obj is not None:
        {%-for paths_item in model.repo_data.all_paths %}
            {%-if 'in_root' in model and model.in_root == true %}            
            {%-set fullPath = model.name %}
            {%-else%}
            {%-set fullPath = paths_item.paths[0] %}
                {%-if (paths_item.paths| length) > 1%}
                    {%-set fullPath = paths_item.paths[:(paths_item.paths| length)]|join(".") %}
                {%-endif%}
            {%-endif%}
        
            result = Es{{ esIndexModelClassName }}.search().filter("nested", path="{{ fullPath }}", query=Q("term", **{
                    "{{ fullPath }}.{{"id" if 'on_save_attribute' not in model.repo_data else model.repo_data.on_save_attribute}}": obj.id()})).execute()
                
            if result.hits.totla.value > 0:
                # Update
                UpdateByQuery(index=Es{{ esIndexModelClassName }}.alias()).using(self._es).script(source="""
                    {%- set indentationIndex = namespace(value=0) %}
                    {%- for currentPath in paths_item.paths %}                        
                        {%- set indentationIndex.value = indentationIndex.value + 1 %}
                        {{"" | indent(loop.index0 * (indentationIndex.value * 4), true)}} if (ctx._source.{{ macros.macro_loopPaths(loop.index0, paths_item.paths) }} instanceof List) {
                        {%-set currentVar = vars[loop.index0] %}
                           {{"" | indent(loop.index0 * (indentationIndex.value * 4), true)}} for (int {{ currentVar }}=ctx._source.{{ macros.macro_loopPaths(loop.index0, paths_item.paths) }}.length - 1; {{ currentVar }} >= 0; {{ currentVar }}--) {
                        {%- if loop.last %}
                                {{"" | indent(loop.index0 *  (indentationIndex.value * 4), true)}} if (ctx._source.{{ macros.macro_loopPaths(loop.index0, paths_item.paths)}}[{{ vars[loop.index0] }}].{{"id" if 'on_save_attribute' not in model.repo_data else model.name }} != null) {
                                   {{"" | indent(loop.index0 *  (indentationIndex.value * 4), true)}} if (ctx._source.{{ macros.macro_loopPaths(loop.index0, paths_item.paths)}}[{{ vars[loop.index0] }}].{{"id" if 'on_save_attribute' not in model.repo_data else model.repo_data.on_save_attribute}} == params.obj.id) {
                                        {%-set prevLoopIndex = loop.index0%}
                                        {%- for field in model.field %}
                                        {%- if field.name != "id" %}
                                        {%- if field.type != 'foreign' %}
                                        {{"" | indent(loop.index0 *  (indentationIndex.value * 8), true)}}  if (params.obj.{{field.name}} != null) {
                                            {{"" | indent(loop.index0 *  (indentationIndex.value * 8), true)}}  ctx._source.{{ macros.macro_loopPaths(prevLoopIndex, paths_item.paths)}}[{{ vars[prevLoopIndex] }}].{{model.name}}.{{field.name}} = params.obj.{{field.name}};
                                        {{"" | indent(loop.index0 *  (indentationIndex.value * 8), true)}} }
                                        {%-endif%}
                                        {%- endif %}
                                        {%- endfor %}

                                    {{"" | indent(loop.index0 *  (indentationIndex.value * 4), true)}} }
                                {{"" | indent(loop.index0 *  (indentationIndex.value * 4), true)}} }
                        {%- endif %}
                        {%-set indentationIndex.value = indentationIndex.value + 1%}
                    {%- endfor %}
                    {%- set indentationIndex = namespace(value=paths_item.paths|length) %}
                    {%- set pathsCount = namespace(value=(paths_item.paths | length))%}                    
                    {%- for currentPath in paths_item.paths %}   
                       {{"" | indent((pathsCount.value - loop.index0) *  (indentationIndex.value * 4), true)}} }
                    {{"" | indent((pathsCount.value - loop.index0) *  (indentationIndex.value * 4), true)}} }
                    {%-set indentationIndex.value = indentationIndex.value - 1%}
                    {%- endfor %}
                """, params={
                        "obj": {
                            {%- for field in model.field %}
                            {%- if field.type != 'foreign' %}
                            "{{ field.name }}": obj.{{ field.name | singularize | lowerCamelCase }}(),
                            {%-elif field.type == 'foreign' and 'repo_data' not in field.link %}
                            "{{ field.name }}": {{field.name | lowerCamelCase}}Dict,
                            {%-endif%}
                            {%- endfor %}
                        }
                    }) \
                .execute()
            {%-if 'update_only' not in paths_item%}
            else:
                # Create
                UpdateByQuery(index=Es{{ esIndexModelClassName }}.alias()).using(self._es).script(source="""
                        {%- for currentPath in paths_item.paths[:-1] %}                            
                            if (ctx._source.{{ macros.macro_loopPaths(loop.index0, paths_item.paths) }} instanceof List) {
                            {%set currentVar = vars[loop.index0] %}
                                for (int {{ currentVar }}=ctx._source.{{ macros.macro_loopPaths(loop.index0, paths_item.paths) }}.length - 1; {{ currentVar }} >= 0; {{ currentVar }}--) {
                            {%- if loop.last %}
                                    {%-set parentPathPart = macros.macro_parentPathFromString(currentPath) | singularize%}
                                    if (ctx._source.{{ macros.macro_loopPaths(loop.index0, paths_item.paths) }}[{{currentVar}}].id == obj.{{parentPathPart}}_id) {
                                        ctx._source.{{ macros.macro_loopPaths(loop.index0, paths_item.paths)}}.add(params.obj);
                                    }
                            {%- endif %}
                        {%- endfor %}
                        {%- for idx in range(0, paths_item.paths | length - 1) %}                        
                            }
                            }
                        {%- endfor %}
                        """, params={
                        "obj": {
                            {%- for field in model.field %}
                                {%- if field.type != 'foreign' %}
                                "{{ field.name }}": obj.{{ field.name | singularize | lowerCamelCase }}(),
                                {%-elif field.type == 'foreign' and 'repo_data' not in field.link %}
                                "{{ field.name }}": {{field.name | lowerCamelCase}}Dict,
                                {%-endif%}
                            {%-endfor%}
                        },
                        {%-set parentPathPart = macros.macro_parentPathFromArray(paths_item.paths) | singularize%}
                        "{{parentPathPart}}_id": obj.{{parentPathPart | lowerCamelCase}}Id(),
                    }) \
                .execute()
            {%-endif%}
        {%-endfor%}
