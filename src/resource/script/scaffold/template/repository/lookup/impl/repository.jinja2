"""
The file is generated by scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
{%set className= model.domain_model.name | upperCamelCase%}
{%set domainModelClassName= model.domain_model.name | upperCamelCase%}
{%-set lowerCamelModelName= model.name | lowerCamelCase-%}
{%-set funcParams= model.field | mapFuncParams-%}
{%-set funcParamsWithDefaultNone= model.field | mapFuncParams(True)-%}
{%-set funcArgs= model.field | mapFuncArgs-%}
{%-set funcArgsByDict= model.field | mapFuncArgs('objListParamsItem', 'dictionary', '=', True)-%}
{%-set funcArgsLowerCase= model.field | mapFuncArgsLowerCase-%}
{%-set funcArgsLowerCaseWithSourceObject= model.field | mapFuncArgsLowerCase(None, None, '=', '_sourceObject')-%}
{%-set classNameWords= model.name | spacedWords%}
{%-set domainModelClassNameWords= model.domain_model.name | spacedWords%}
{%-set filePath= model.path | replace('/', '.')%}
{%-set domainModelFilePath= model.domain_model.path | replace('/', '.')%}
import os
from typing import List, Optional

from elasticsearch_dsl.connections import connections
from sqlalchemy import create_engine
from src.port_adapter.repository.application.lookup.BaseLookupRepository import BaseLookupRepository
from src.application.lookup.subcontractor.{{ className }}Lookup import {{ className }}
from src.application.lookup.subcontractor.{{ className }}Repository import {{ className }}Repository
{%- for field in model.field %}
{%- if field.type == "foreign" %}
from src.domain_model.{{ field.name }}.{{ field.name | upperCamelCase }} import {{ field.name | upperCamelCase }}
from src.domain_model.{{ field.name }}.{{ field.name | upperCamelCase }}Repository import {{ field.name | upperCamelCase }}Repository
from src.port_adapter.repository.es_model.{{ field.name }}.Es{{ field.name | upperCamelCase }} import Es{{ field.name | upperCamelCase }}
{%- endif %}
{%- endfor %}
from src.resource.logging.decorator import debugLogger
from src.resource.logging.logger import logger


class {{ className }}RepositoryImpl(BaseLookupRepository, {{ className }}Repository):
    def __init__(self):
        import src.port_adapter.AppDi as AppDi
        {%- for field in model.field %}
        {%- if field.type == "foreign" %}
        self._{{ field.name | lowerCamelCase }}: {{ field.name | upperCamelCase }}Repository = AppDi.instance.get({{ field.name | upperCamelCase }}Repository)
        {%- endif %}
        {%- endfor %}


        try:
            self._db = create_engine(
                f"mysql+mysqlconnector://{os.getenv('CAFM_PROJECT_DB_USER', 'root')}:{os.getenv('CAFM_PROJECT_DB_PASSWORD', '1234')}@{os.getenv('CAFM_PROJECT_DB_HOST', '127.0.0.1')}:{os.getenv('CAFM_PROJECT_DB_PORT', '3306')}/{os.getenv('CAFM_PROJECT_DB_NAME', 'cafm-project')}"
            )
            self._es = connections.create_connection(
                hosts=[
                    f'{os.getenv("CAFM_PROJECT_ELASTICSEARCH_HOST", "elasticsearch")}:{os.getenv("CAFM_PROJECT_ELASTICSEARCH_PORT", 9200)}'
                ]
            )
        except Exception as e:
            logger.warn(
                f"[{{"{"}}{{ className }}RepositoryImpl.__init__.__qualname__}] Could not connect to the db, message: {e}"
            )
            raise Exception(f"Could not connect to the db, message: {e}")

    @debugLogger
    def save(self, obj: {{ model.domain_model.name | upperCamelCase }}):
        {%- for field in model.field %}
        {%- if field.type == "foreign" %}
        {{ field.link.domain_model.name | lowerCamelCase }}: Optional[{{ field.link.domain_model.name | upperCamelCase }}, None] = None
        {%- endif %}
        {%- endfor %}

        {%- for field in model.field %}
        {%- if field.type == "foreign" %}
        {{ field.link.domain_model.name | lowerCamelCase }} = self._{{ field.link.domain_model.name | lowerCamelCase }}Repo.{{ field.link.domain_model.name | lowerCamelCase }}ById(id=obj.{{ field.link.domain_model.name | lowerCamelCase}}Id()) if obj.{{ field.link.domain_model.name | lowerCamelCase }}Id() is not None else None
        {%- endif %}
        {%- endfor %}

        esDoc = Es{{ model.domain_model.name | upperCamelCase }}.get(id=obj.id(), ignore=404)
        if esDoc is None:
            # Create
            Es{{ model.domain_model.name | upperCamelCase }}(
                _id=obj.id(),
                {%- for field in model.field %}
                {%- if field.type == "foreign" %}
                {{ field.name }}=Es{{ field.link.name | upperCamelCase }}(
                    _id={{ field.link.domain_model.name | lowerCamelCase }}.id(),
                    id={{ field.link.domain_model.name | lowerCamelCase }}.id(), 
                    {%- for linkField in model.domain_model.field %}
                    {{ linkField.name }}={{ field.link.domain_model.name | lowerCamelCase }}.{{ linkField.name | lowerCamelCase }}(),
                    {%- endfor %}    
                )
                {%- else %}
                {{ field.name }}=obj.{{ field.name | lowerCamelCase }}(),
                {%- endif %}
                {%- endfor %}
            ).save()
        else:
            # Update
            Es{{ model.domain_model.name | upperCamelCase }}(
                _id=obj.id(),
                {%- for field in model.field %}
                {%- if field.type == "foreign" %}
                {{ field.name }}=Es{{ field.link.name | upperCamelCase }}(
                    _id={{ field.link.domain_model.name | lowerCamelCase }}.id(),
                    id={{ field.link.domain_model.name | lowerCamelCase }}.id(),
                    {%- for linkField in model.domain_model.field %}
                    {{ linkField.name }}={{ field.link.domain_model.name | lowerCamelCase }}.{{ linkField.name | lowerCamelCase }}(),
                    {%- endfor %}    
                ) if obj.obj.{{ field.name | lowerCamelCase }}Id() is not None
                {%- else %}
                {{ field.name }}=obj.{{ field.name | lowerCamelCase }}() if obj.{{ field.name | lowerCamelCase }}() is not None else esDoc.{{ field.name }},
                {%- endif %}
                {%- endfor %}
            ).save()

    @debugLogger
    def lookup(self, resultFrom: int, resultSize: int, orders: List[dict], filters: List[dict]):
        return super().lookup(
            resultFrom=resultFrom,
            resultSize=resultSize,
            orders=orders,
            filters=filters,
            esModel=Es{{ model.domain_model.name | upperCamelCase }},
            lookupModel={{ className }},
        )
