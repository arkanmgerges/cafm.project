"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
{%set className= model.name | upperCamelCase%}
{%-set lowerCamelModelName= model.name | lowerCamelCase-%}
{%-set funcParams= model.field | mapFuncParams-%}
{%-set funcArgs= model.field | mapFuncArgs-%}
{%-set funcArgsLowerCase= model.field | mapFuncArgsLowerCase-%}
{%-set funcArgsByObj= model.field | mapFuncArgs('obj', 'function')-%}
{%-set funcArgsByObjLowerCase= model.field | mapFuncArgsLowerCase('obj', 'function')-%}
{%-set funcArgsByDbObj= model.field | mapFuncArgs('dbObject')-%}
{%-set funcArgsByDbObjLowerCase= model.field | mapFuncArgsLowerCase('dbObject')-%}
{%-set funcArgsByItem= model.field | mapFuncArgs('x')-%}
{%-set funcArgsByItemLowerCase= model.field | mapFuncArgsLowerCase('x')-%}
{%-set classNameWords= model.name | spacedWords%}
{%-set filePath= model.path | replace('/', '.')%}
import pytest

from src.domain_model.event.DomainPublishedEvents import DomainPublishedEvents
from src.domain_model.{{ filePath }}.{{ className }} import {{ className }}


def setup_function(function):
    DomainPublishedEvents.cleanup()


def test_create_object():
    # Act
    obj = _create_object()
    # Assert
    assert isinstance(obj, {{ className }})

{% for field in model.field -%}
def test_{{ field.name }}():
    # Act
    obj = _create_object()
    # Assert
{%- if field.type == 'int' %}
    assert obj.{{ field.name | lowerCamelCase }}() == 1
{%- else %}
    assert obj.{{ field.name | lowerCamelCase }}() == '{{ field.name }}'
{%- endif %}
{% endfor %}

def test_create_from_object():
    # Act
    obj = _create_object()
    obj2 = {{ className }}.createFromObject(obj=obj)
    # Assert
    assert obj == obj2


def test_toMap():
    # Arrange
    obj = _create_object(id='1', 
    {%- for field in model.field %}
    {%- if field.type == 'int' %}
        {{ field.name | lowerCamelCase }} = 1,
    {%- else %}
        {{ field.name | lowerCamelCase }} = '{{ field.name }}',
    {%- endif %}
    {%- endfor %}
    )
    currentMap = {{ '{' }}'{{ model.name }}_id': '1',
    {%- for field in model.field %}
    {%- if field.type == 'int' %}
        '{{ field.name }}': 1,
    {%- else %}
        '{{ field.name }}': '{{ field.name }}',
    {%- endif %}
    {%- endfor %}
    }
    # Act
    objectMap = obj.toMap()

    # Assert
    assert objectMap == currentMap
    assert len(objectMap.keys()) == len(currentMap.keys())


def _create_object(id: str = None, {{ funcParams }}, skipValidation: bool = False):
    id = '1' if id is None else id
    {%- for field in model.field %}
    {%- if field.type == 'int' %}
    {{ field.name | lowerCamelCase }} = 1 if {{ field.name | lowerCamelCase }} is None else {{ field.name | lowerCamelCase }}
    {%- else %}
    {{ field.name | lowerCamelCase }} = '{{ field.name }}' if {{ field.name | lowerCamelCase }} is None else {{ field.name | lowerCamelCase }}
    {%- endif %}
    {%- endfor %}

    return {{ className }}.createFrom(id=id, {{ funcArgsLowerCase }}, skipValidation=skipValidation)
