"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

import pytest

from src.domain_model.event.DomainPublishedEvents import DomainPublishedEvents
from src.domain_model.project.daily_check.procedure.operation.DailyCheckProcedureOperation import (
    DailyCheckProcedureOperation,
)


def setup_function(function):
    DomainPublishedEvents.cleanup()


def test_create_object():
    # Act
    obj = _create_object()
    # Assert
    assert isinstance(obj, DailyCheckProcedureOperation)


def test_name():
    # Act
    obj = _create_object()
    # Assert
    assert obj.name() == "name"


def test_description():
    # Act
    obj = _create_object()
    # Assert
    assert obj.description() == "description"


def test_type():
    # Act
    obj = _create_object()
    # Assert
    assert obj.type() == "visual"


def test_daily_check_procedure_id():
    # Act
    obj = _create_object()
    # Assert
    assert obj.dailyCheckProcedureId() == "daily_check_procedure_id"


def test_create_from_object():
    # Act
    obj = _create_object()
    obj2 = DailyCheckProcedureOperation.createFromObject(obj=obj)
    # Assert
    assert obj == obj2


def test_toMap():
    # Arrange
    obj = _create_object(
        id="1",
        name="name",
        description="description",
        type="visual",
        dailyCheckProcedureId="daily_check_procedure_id",
    )
    currentMap = {
        "daily_check_procedure_operation_id": "1",
        "name": "name",
        "description": "description",
        "type": "visual",
        "daily_check_procedure_id": "daily_check_procedure_id",
    }
    # Act
    objectMap = obj.toMap()

    # Assert
    assert objectMap == currentMap
    assert len(objectMap.keys()) == len(currentMap.keys())


def _create_object(
    id: str = None,
    name: str = None,
    description: str = None,
    type: str = None,
    dailyCheckProcedureId: str = None,
    skipValidation: bool = False,
):
    id = "1" if id is None else id
    name = "name" if name is None else name
    description = "description" if description is None else description
    type = "visual" if type is None else type
    dailyCheckProcedureId = (
        "daily_check_procedure_id"
        if dailyCheckProcedureId is None
        else dailyCheckProcedureId
    )

    return DailyCheckProcedureOperation.createFrom(
        id=id,
        name=name,
        description=description,
        type=type,
        dailyCheckProcedureId=dailyCheckProcedureId,
        skipValidation=skipValidation,
    )
