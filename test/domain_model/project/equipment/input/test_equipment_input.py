"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

import pytest

from src.domain_model.event.DomainPublishedEvents import DomainPublishedEvents
from src.domain_model.project.equipment.input.EquipmentInput import EquipmentInput


def setup_function(function):
    DomainPublishedEvents.cleanup()


def test_create_object():
    # Act
    obj = _create_object()
    # Assert
    assert isinstance(obj, EquipmentInput)

def test_name():
    # Act
    obj = _create_object()
    # Assert
    assert obj.name() == 'name'
def test_value():
    # Act
    obj = _create_object()
    # Assert
    assert obj.value() == 'value'
def test_unit_id():
    # Act
    obj = _create_object()
    # Assert
    assert obj.unitId() == 'unit_id'


def test_create_from_object():
    # Act
    obj = _create_object()
    obj2 = EquipmentInput.createFromObject(obj=obj)
    # Assert
    assert obj == obj2


def test_toMap():
    # Arrange
    obj = _create_object(id='1',
        name = 'name',
        value = 'value',
        unitId = 'unit_id',
    )
    currentMap = {'equipment_input_id': '1',
        'name': 'name',
        'value': 'value',
        'unit_id': 'unit_id',
    }
    # Act
    objectMap = obj.toMap()

    # Assert
    assert objectMap == currentMap
    assert len(objectMap.keys()) == len(currentMap.keys())


def _create_object(id: str = None, name: str = None, value: str = None, unitId: str = None, skipValidation: bool = False):
    id = '1' if id is None else id
    name = 'name' if name is None else name
    value = 'value' if value is None else value
    unitId = 'unit_id' if unitId is None else unitId

    return EquipmentInput.createFrom(id=id, name=name, value=value, unitId=unitId, skipValidation=skipValidation)
