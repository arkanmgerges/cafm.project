"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

import pytest

from src.domain_model.event.DomainPublishedEvents import DomainPublishedEvents
from src.domain_model.project.maintenance.procedure.MaintenanceProcedure import MaintenanceProcedure


def setup_function(function):
    DomainPublishedEvents.cleanup()


def test_create_object():
    # Act
    obj = _create_object()
    # Assert
    assert isinstance(obj, MaintenanceProcedure)

def test_name():
    # Act
    obj = _create_object()
    # Assert
    assert obj.name() == 'name'
def test_type():
    # Act
    obj = _create_object()
    # Assert
    assert obj.type() == 'hard'
def test_frequency():
    # Act
    obj = _create_object()
    # Assert
    assert obj.frequency() == '1_month'
def test_start_date():
    # Act
    obj = _create_object()
    # Assert
    assert obj.startDate() == 1
def test_subcontractor_id():
    # Act
    obj = _create_object()
    # Assert
    assert obj.subcontractorId() == 'subcontractor_id'
def test_equipment_id():
    # Act
    obj = _create_object()
    # Assert
    assert obj.equipmentId() == 'equipment_id'


def test_create_from_object():
    # Act
    obj = _create_object()
    obj2 = MaintenanceProcedure.createFromObject(obj=obj)
    # Assert
    assert obj == obj2


def test_toMap():
    # Arrange
    obj = _create_object(id='1',
        name = 'name',
        type = 'hard',
        frequency = '1_month',
        startDate = 1,
        equipmentId = 'equipment_id',
        subcontractorId = 'subcontractor_id',
    )
    currentMap = {'id': '1',
        'name': 'name',
        'type': 'hard',
        'frequency': '1_month',
        'start_date': 1,
        'equipment_id': 'equipment_id',
        'subcontractor_id': 'subcontractor_id',
    }
    # Act
    objectMap = obj.toMap()

    # Assert
    assert objectMap == currentMap
    assert len(objectMap.keys()) == len(currentMap.keys())


def _create_object(id: str = None, name: str = None, type: str = None, frequency: str = None, startDate: int = None, equipmentId: str = None, subcontractorId: str = None, skipValidation: bool = False):
    id = '1' if id is None else id
    name = 'name' if name is None else name
    type = 'hard' if type is None else type
    frequency = '1_month' if frequency is None else frequency
    startDate = 1 if startDate is None else startDate
    subcontractorId = 'subcontractor_id' if subcontractorId is None else subcontractorId
    equipmentId = 'equipment_id' if equipmentId is None else equipmentId

    return MaintenanceProcedure.createFrom(id=id, name=name, type=type, frequency=frequency, startDate=startDate, equipmentId=equipmentId, subcontractorId=subcontractorId, skipValidation=skipValidation)
