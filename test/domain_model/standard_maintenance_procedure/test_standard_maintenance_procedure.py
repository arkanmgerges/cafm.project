"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

import pytest

from src.domain_model.event.DomainPublishedEvents import DomainPublishedEvents
from src.domain_model.standard_maintenance_procedure.StandardMaintenanceProcedure import StandardMaintenanceProcedure


def setup_function(function):
    DomainPublishedEvents.cleanup()


def test_create_object():
    # Act
    obj = _create_object()
    # Assert
    assert isinstance(obj, StandardMaintenanceProcedure)

def test_name():
    # Act
    obj = _create_object()
    # Assert
    assert obj.name() == 'name'
def test_type():
    # Act
    obj = _create_object()
    # Assert
    assert obj.type() == 'hard'
def test_subtype():
    # Act
    obj = _create_object()
    # Assert
    assert obj.subtype() == 'outsourced'
def test_frequency():
    # Act
    obj = _create_object()
    # Assert
    assert obj.frequency() == '1_month'
def test_start_date():
    # Act
    obj = _create_object()
    # Assert
    assert obj.startDate() == 1
def test_organization_id():
    # Act
    obj = _create_object()
    # Assert
    assert obj.organizationId() == 'organization_id'


def test_create_from_object():
    # Act
    obj = _create_object()
    obj2 = StandardMaintenanceProcedure.createFromObject(obj=obj)
    # Assert
    assert obj == obj2


def test_toMap():
    # Arrange
    obj = _create_object(id='1',
        name = 'name',
        type = 'hard',
        subtype = 'outsourced',
        frequency = '1_month',
        startDate = 1,
        organizationId = 'organization_id',
    )
    currentMap = {'standard_maintenance_procedure_id': '1',
        'name': 'name',
        'type': 'hard',
        'subtype': 'outsourced',
        'frequency': '1_month',
        'start_date': 1,
        'organization_id': 'organization_id',
    }
    # Act
    objectMap = obj.toMap()

    # Assert
    assert objectMap == currentMap
    assert len(objectMap.keys()) == len(currentMap.keys())


def _create_object(id: str = None, name: str = None, type: str = None, subtype: str = None, frequency: str = None, startDate: str = None, organizationId: str = None, skipValidation: bool = False):
    id = '1' if id is None else id
    name = 'name' if name is None else name
    type = 'hard' if type is None else type
    subtype = 'outsourced' if subtype is None else subtype
    frequency = '1_month' if frequency is None else frequency
    startDate = 1 if startDate is None else startDate
    organizationId = 'organization_id' if organizationId is None else organizationId

    return StandardMaintenanceProcedure.createFrom(id=id, 
			name=name,
			type=type,
			subtype=subtype,
			frequency=frequency,
			startDate=startDate,
			organizationId=organizationId, skipValidation=skipValidation)
